{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/drawn.jpg","path":"img/drawn.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wild-fire.jpg","path":"img/wild-fire.jpg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/baidu_verify_codeva-fVR3SShMVh.html","path":"baidu_verify_codeva-fVR3SShMVh.html","modified":0,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"77179908ceab4852a8affcadf70884164fb447f0","modified":1748000395335},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1747930697042},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1747229156000},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1748000395336},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1748000395336},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1748000395339},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1748000395336},{"_id":"themes/fluid/package.json","hash":"fd6756866314aaf4b15d734a83b85aa09aa0b5ed","modified":1748000395362},{"_id":"themes/fluid/README_en.md","hash":"85656f2a23cc5e31420f0118bf5541b6e9f058b6","modified":1748000395341},{"_id":"themes/fluid/languages/en.yml","hash":"415e3403182e1282386f28b9d61343f147519163","modified":1748000395342},{"_id":"themes/fluid/README.md","hash":"b4bb8c50c0ce719b8cb37b7e3a899a9a1322c4fa","modified":1748000395340},{"_id":"themes/fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1748000395340},{"_id":"themes/fluid/languages/de.yml","hash":"f814263ded504cb4c50a8b66157bdd71f553be1b","modified":1748000395342},{"_id":"themes/fluid/languages/eo.yml","hash":"314b97a7e68093328675acfd308d839b1d772ac9","modified":1748000395342},{"_id":"themes/fluid/languages/es.yml","hash":"0ad94ddf1ca868a67b5b84aed257a30572962210","modified":1748000395343},{"_id":"themes/fluid/_config.yml","hash":"af0075097c27e501e3183524d1cc546d54044b8f","modified":1748056727059},{"_id":"themes/fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1748000395344},{"_id":"themes/fluid/languages/ru.yml","hash":"998112b384b574e0e29c6ea16e4c1ebce1c15a4c","modified":1748000395343},{"_id":"themes/fluid/languages/ja.yml","hash":"65a90f294f6c73245e8250e87d124630ad10b389","modified":1748000395343},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"497b3dea5058f718da225a7a443e916da895ea10","modified":1748000395343},{"_id":"themes/fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1748000395359},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"05418d0bca261de386872be65027bf4498758788","modified":1748000395344},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"ded0621e63b1f8b241be21f6e9b52d4f36edbcd0","modified":1748000395344},{"_id":"themes/fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1748000395360},{"_id":"themes/fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1748000395360},{"_id":"themes/fluid/layout/about.ejs","hash":"2f3ea36713f0fa91d8d61d39fcf9e584372de818","modified":1748000395359},{"_id":"themes/fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1748000395361},{"_id":"themes/fluid/layout/index.ejs","hash":"dde1f6a27c8d09c38850a691089937f181b6c035","modified":1748000395360},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1748000395339},{"_id":"themes/fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1748000395361},{"_id":"themes/fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1748000395362},{"_id":"themes/fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1748000395361},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1748000395339},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1748000395339},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1748000395338},{"_id":"themes/fluid/layout/post.ejs","hash":"c8da695dc1b01b715909ae6f1052ccaebdf9db4c","modified":1748000395361},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1748000395362},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1748000395337},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1748000395337},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1748000395338},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1748000395338},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1748000395345},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1748000395345},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1748000395338},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1748000395346},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1748000395345},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"6bb3335b5486d4bee2ed42f8bef57903066bc234","modified":1748000395350},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1748000395352},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"901280e6fb3194c30542751d04f27e78b42d3c6f","modified":1748000395350},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"a0bcbbfc34efaef3b23c6b531e7f3201f2eab2dd","modified":1748000395351},{"_id":"themes/fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1748000395363},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1748000395366},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1748000395353},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1748000395367},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1748000395366},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1748000395353},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"67637461e3f94f9e9675369eb7ff015355d9ec54","modified":1748000395367},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1748000395367},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1748000395368},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1748000395371},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1748000395389},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1748000395358},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1748000395359},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"1ff4ea054f2c735dfaccb0be90f1708a2a750bc8","modified":1748000395372},{"_id":"themes/fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1748000395390},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"a93e2603021ad38714e870399767bea24e7cbe3e","modified":1748000395372},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1748000395373},{"_id":"themes/fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1748000395390},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1748000395372},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1748000395373},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1748000395389},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1748000395373},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1748000395368},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1748000395369},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1748000395368},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1748000395368},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1748000395369},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1748000395369},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1748000395370},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1748000395370},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"f57be245e6e7228673e1dec3a3477e731492c5c1","modified":1748000395370},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"0bb33314aa5cfe326ab9bb14b545e343e4db4193","modified":1748000395371},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1748000395374},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"474b00a57f43dbe7bc2876d637ece4214d016c06","modified":1748000395374},{"_id":"themes/fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1748000395374},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1748000395375},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1748000395375},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1747229156000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1747229156000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1747229156000},{"_id":"themes/fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1748000395393},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1748000395394},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1747229156000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"e7addcc88eb73dec4a9a8641a4bb68966a38a65d","modified":1748000395393},{"_id":"themes/fluid/source/js/events.js","hash":"3efd602cdb694902d6e74c4eb1e5bd70120ac5b1","modified":1748000395394},{"_id":"themes/fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1748000395394},{"_id":"themes/fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1748000395395},{"_id":"themes/fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1748000395395},{"_id":"themes/fluid/source/js/umami-view.js","hash":"370ab30ab88c596d85327dbd7db3bafd49489fdd","modified":1748000395395},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1748000395346},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1748000395396},{"_id":"themes/fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1748000395396},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1748000395347},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1748000395346},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1748000395347},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1748000395348},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1748000395347},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1748000395347},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1748000395352},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1748000395348},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1748000395349},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1748000395349},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1748000395349},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"df6bae1a93827991049f7a33f6a69681c60eab0e","modified":1748000395349},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1748000395352},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"047bece1db5cdf96cb78a44c6420ce3e92e6a9ca","modified":1748000395351},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1748000395351},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1748000395354},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"f8fe8e58b83f627db82c0dbeb663389efc33c1c6","modified":1748000395353},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1748000395354},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1748000395354},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1748000395354},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1748000395355},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1748000395355},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1748000395356},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1748000395356},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1748000395357},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1748000395355},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"acc72c3284fe906a4505132c3d9a4720d80e6fcb","modified":1748000395355},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1748000395356},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1748000395357},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1748000395363},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"26905d5862b1531ebcc175af15178dabeecc81c8","modified":1748000395357},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1748000395358},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"73827074db4e0fc3d52c51a76285df87aa5e5a7f","modified":1748000395357},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1748000395364},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"da987411ae4a4e6896a9b8af1fce6209192af28e","modified":1748000395364},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1748000395358},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"d103e4bf612b2445bb136712d57b81e784a313e2","modified":1748000395364},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1748000395365},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1748000395365},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1748000395376},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1748000395366},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1748000395376},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1748000395388},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1748000395377},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1748000395377},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1748000395389},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1748000395384},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1748000395383},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"66d5b045c0e54001d3c98c5901d72590fe08acc4","modified":1748000395383},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1748000395383},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1748000395384},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1748000395383},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"bac20c8fb20276b08972df5ecc7a5850a72393f4","modified":1748000395385},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1748000395384},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1748000395385},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1748000395385},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1748000395386},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1748000395386},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1748000395388},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1748000395387},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"6a35a450bd0a12f68fd92aac3f88b23475a98d46","modified":1748000395387},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1748000395378},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"31c64c3fae4a0fc4747d8afeb72f7a9667c5326c","modified":1748000395387},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1748000395378},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1748000395378},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1748000395379},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1748000395380},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1748000395379},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1748000395379},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1748000395381},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1748000395381},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"88c3c2d99a097142a87eeec0c7c65a3789f25117","modified":1748000395380},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1748000395381},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1748000395380},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1748000395381},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1748000395382},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1748000395382},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1748000395382},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1747229156000},{"_id":"source/_posts/Array-set-map summary.md","hash":"5a3e8af4298d22a732a63648b1eb0046aea4059b","modified":1748000395333},{"_id":"source/_posts/Dependencies-collecting of vue3.md","hash":"9c128419011cc9b720c3e4b2c2f2f1c1fb4676e8","modified":1748000395334},{"_id":"source/_posts/Differences-between-two-kinds-inherit-approches.md","hash":"22d16476a13dce25d6f85b45d3a7bef437347e70","modified":1748000395334},{"_id":"source/_posts/Vite-server-error.md","hash":"d60f61acf07fd68a115c4d54acf0f2bab173827f","modified":1748000395335},{"_id":"source/_posts/Manage-wx-could-service.md","hash":"31648dd7ca51c016e43528194ff841b8107d9373","modified":1748003524441},{"_id":"public/local-search.xml","hash":"b67d8c08018b03799fd999dbc2cfed7f385a22fc","modified":1748071533101},{"_id":"public/about/index.html","hash":"9e81cd30d2cee2bf7b5ad0dc066d23fa5516f33a","modified":1748071533101},{"_id":"public/archives/index.html","hash":"82273a1bcfdb9a4d7b723372e8d94c8800847b4b","modified":1748071533101},{"_id":"public/archives/2025/index.html","hash":"4b5af3e61a5774042b45e6a31dfb61d1a8114fcf","modified":1748071533101},{"_id":"public/archives/2025/05/index.html","hash":"e3a1639be8a2a5f9fbf092304d5869343f5f99b5","modified":1748071533101},{"_id":"public/404.html","hash":"e095db6711417b4954529922a42acd0516b06a04","modified":1748071533101},{"_id":"public/tags/index.html","hash":"0a0a1d77d8661d874e3041f331c32684357a82a1","modified":1748071533101},{"_id":"public/categories/index.html","hash":"20a9882c9db0961b54b513f214c715d8c65786de","modified":1748071533101},{"_id":"public/links/index.html","hash":"76a196682d9f8c1796c62030f8d0430cd9402847","modified":1748071533101},{"_id":"public/2025/05/23/Vite-server-error/index.html","hash":"309bbba15bc120ee37ef672b31243fb7fd474c47","modified":1748071533101},{"_id":"public/2025/05/23/Dependencies-collecting of vue3/index.html","hash":"5725e4d0e48383682516d632deeba5180d76c7d0","modified":1748071533101},{"_id":"public/2025/05/23/Differences-between-two-kinds-inherit-approches/index.html","hash":"c54ad69352b37b3086d1a6f5a2d7f2c54a82a319","modified":1748071533101},{"_id":"public/2025/05/23/Manage-wx-could-service/index.html","hash":"41393f6be44e648e529f056f75ede8793ddc3ba6","modified":1748071533101},{"_id":"public/2025/05/23/Array-set-map summary/index.html","hash":"786108c45cedfb827bc7bc43814969e754cd7090","modified":1748071533101},{"_id":"public/index.html","hash":"0a6eb86277a09c6fb8872b95ea99905c6f6559e1","modified":1748071533101},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1748071533101},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1748071533101},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1748071533101},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1748071533101},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1748071533101},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1748071533101},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1748071533101},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1748071533101},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1748071533101},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1748071533101},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1748071533101},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1748071533101},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1748071533101},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1748071533101},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1748071533101},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1748071533101},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1748071533101},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1748071533101},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1748071533101},{"_id":"themes/fluid/source/img/drawn.jpg","hash":"a8afab014b63afa5e2c043eb7b50ecba6b03edfb","modified":1748007916979},{"_id":"themes/fluid/source/img/wild-fire.jpg","hash":"82061013d2890c5b73b0b5eee565836c13e5223a","modified":1748008182436},{"_id":"source/CNAME","hash":"9fa9730b911e9c477cf00dfbf6d7e611548b1dd9","modified":1748065452093},{"_id":"source/baidu_verify_codeva-fVR3SShMVh.html","hash":"09e554351f969b229ae91d76101bae10651bb03e","modified":1748071350688},{"_id":"public/CNAME","hash":"9fa9730b911e9c477cf00dfbf6d7e611548b1dd9","modified":1748071533101},{"_id":"public/baidu_verify_codeva-fVR3SShMVh.html","hash":"09e554351f969b229ae91d76101bae10651bb03e","modified":1748071533101},{"_id":"public/img/drawn.jpg","hash":"a8afab014b63afa5e2c043eb7b50ecba6b03edfb","modified":1748071533101},{"_id":"public/img/wild-fire.jpg","hash":"82061013d2890c5b73b0b5eee565836c13e5223a","modified":1748071533101},{"_id":"public/sitemap.xml","hash":"6200de5b593b85da562644f93a0dd45f12b05c68","modified":1748084313269}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2025-05-23T04:55:03.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-05-23 12:55:03\n---\n","updated":"2025-05-23T11:39:55.335Z","path":"about/index.html","_id":"cmb0bvn9s0001hwupchmoepb5","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"一篇文章搞懂Array,Set和Map异同","_content":"\nArray,Set和Map三个作为Javascript中可迭代的集合数据类型，在编程过程中使用的频率也比较高。针对三种数据类型各自的一些特性，本文的内容将从以下几个方面来上述数据类型做一个总结。\n\n-  [**实例的创建**](##实例的创建)\n-  [**数据添加**](##数据添加)\n-  [**数据访问（查找）**](##数据访问（查找）)\n-  [**数据的遍历**](##数据的遍历)\n-  [**类似的功能和一些专有方法**](##类似的功能和一些专有方法)\n-  [**三者之间的转换**](##三者之间的转换)\n-  [**应用场景**](##应用场景)\n\n## 实例的创建\n  Map和Set创建实例的方式是唯一的，只允许通过new调用构造方法来创建一个实例。值得注意的是，Set和Map在调用构造函数的时候，传参都是数组或者可迭代对象，其中Map的传参数组需要时一个键值对数组。当然，传参也是可选的，非必须。\n\n Array相较于前两者，其创建实例的方式要多写，可通过字面方式创建，也可像Map和Set一样通过构造函数来创建。此外使用Array的静态函数Array.from来创建也是非常常见的。例如，通过docuemnt.getElementsByTagName这类方法获取到一个HTMLCollect这样一个类数组，通常会通过Array.from将其装换成一个真正的数组来进行后续的操作。\n\n  ```Javascript\n\n   // 创建map实例\n   let map1 = new Map();\n   let map2 = new Map([['a', 1], ['b', 2]]); //  a=>1, b=>2\n   // 创建set实例\n   let set1 = new Set();\n   let set2 = new Set([1,2])\n\n  // 通过字面量创建数组\n  let arr1 = [1,2,3];\n  // 使用Array静态方法从一个可迭代对象或者类数组中创建数组实例\n  let arr2 = Array.from([4,5]) \n  // 使用Array构造函数\n  let arr3 = new Array([6,7]);\n```\n\n## 数据添加与变更\n\n\n```Javascript\n  // Set的数据操作：添加与删除\n  let set = new Set();\n  set.add(11) // [11]\n  set.add(23) // [11, 23]\n  set.add(11) // [11, 23]\n  set.delete(23) // [11] \n  \n  // Map的数据操作：添加与删除\n  let  map = new Map();\n  map.set('a', 1);   // [a=>1]\n  map.set('b', 2);   // [a=>1, b=>2]\n  map.delete('b');   // [a=>1]\n\n  // Array\n  let arr = [1,2,3]\n  // 在数组末尾添加一个值\n  arr.push(4)       // [1,2,3,4]\n  // 弹出数组末尾的值\n  arr.pop(4)        // [1,2,3]\n  // 在数组头部添加一个值\n  arr.unshift(0)    // [0,1,2,3]\n  // 移除头部的第一个值\n  arr.shift()       // [1,2,3]\n  // 在第二个数（下标1）之后插入一个值‘a’\n  arr.splice(1,0,'a')   // [1,2,'a', 3];\n  // 删除第二个数（下标1）后面1个值，然后插入一个新的值‘b’\n  arr.splice(1,1,'b')   // [1,2,'b',3]\n```\n\n## 数据访问\n  Array和Map都能够访问实例中的特定数据，Array是通过下标，而Map是通过实例方法get, 唯独Set没有方式可以直接访问其中特定数据。其实也不难理解，Set本身不是为了单纯存储数据和访问特殊而生的，因为这些功能Array就可以支持，何必再单出构造一个Set数据结构了。我对此的理解是，Set跟多的是紧紧围绕着数据唯一不重复这一准则来的，它的侧重点是某一数据的有无，而不是数据存在哪里。\n\n  另外，从结构上来说。Set不像Array那样是有序的，所以也无法使用下标来访问，也不像Map那般，每个键对应一个值，所以也无法通过键来访问。故而，Set没有单独访问某一数据的方式。\n\n```Javascript\n  const arr = [1,2,3];\n  const set = new Set(['a', 'b']);\n  const map = new Map([['a', 1], ['b', '2']]);\n  \n  //Array通过下标访问数据\n  console.log(arr[0], arr[2]) // 1, 3\n  //Map使用实例方法get访问数据，参数是键\n  console.log(mpa.get('a))    // 1\n```\n## 数据的遍历\n\n**Set数据的遍历方式**：\n-  keys()   &emsp;&emsp;返回键名迭代器\n-  values() &emsp;返回值迭代器  \n-  entries() &emsp;返回键值迭代器\n-  forEach()\n```Javascript\nconst set = new Set(['a', 'b', 'c']);\n// set每个值对应的key其实也是数据值本身\nconst keyIter = set.keys();\nconsole.log(keyIter.next().value);  // 'a'\nconsole.log(keyIter.next().value);  // 'b'\nconsole.log(keyIter.next().value);  // 'c'\nconsole.log(keyIter.next().value);  // undefined\n\nconst valueIter = set.values();\nfor(let val of valueIter) {\n  console.log(val);                // 'a', 'b', 'c'\n}\n\nconst entriesIter = set.entries();\nfor(let [key, value] of entriesIter) {\n  console(`${key}:${value}`)     // 'a':'a', 'b':'b', 'c':'c'\n}\n\nset.forEach(val => {\n  console.log(val)             // 'a', 'b', 'c'\n})\n```\n</br>\n\n**Map数据的遍历方式**\n-  keys()   &emsp;&emsp;返回键名迭代器\n-  values() &emsp;返回值迭代器  \n-  entries() &emsp;返回键值迭代器\n-  forEach()\n\n```Javascript\nconst map = new Map([['a', 1], ['b', '2']]);\n/**\n* 代码就自己脑补吧，\n* 不能说和Set的方式很像，\n* 只能说真的就是一模一样\n**/\n```\n</br>\n\n**Array数据的遍历方式**\n\nArray遍历数据的方法是最多的，除了下面列举的几个之外，还有some, every,甚至filter, find和findIndex这些方法可以用来遍历数据。使用这些方法需要注意的是其使用的场景，例如map和forEach都可以用来对数组内数据做一些操作，但如果不需要返回值的情况，还是使用forEach方法，而不建议是map，其它方法也是如此。\n\n-  keys()   &emsp;&emsp;返回键名迭代器\n-  values() &emsp;返回值迭代器  \n-  entries() &emsp;返回键值迭代器\n-  map()    &emsp;回调函数，要有返回值\n-  reduce() \n-  forEach()\n-  for...of\n```Javascript\n/**\n* 代码就不写了，偷个懒，不过还是贴心的附上链接\n* https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n**/\n```\n\n\n## 类似的功能和一些专有方法\n- **是否包含某个元素**: 数组的includes方法，map和set的has方法，三者的返回值都是布尔值，区别只在于传入的参数。数组和set传入的是值，map传入的是键。\n- **合并两个相同类型的数据**： 数组使用concat方法，合并两个数组值，set使用union方法合并两个集合。map没有专有方法可以用来合并两个map数据，不过可以通过使用new Map([...map1, ...map2])来返回一个合并之后的新map\n- **数据大小**：数组有length属性，map和set有size属性\n- **清空数据**：map和size都可通过clear()方法来清空数据，数组无专有方法，可自己通过修改length值为0或者使用splice方法清空数据。\n\n>关于数组中的includes方法在数组值为一个个对象的时候，这个时候传入的值就只能是对象的引用了。如果作用域内不存在引用的话，判断数组中是否存在某个对象，就只能通过filter, find或者findIndex之类的方法加上数据特征去判断数组中是否存在该对象了。\n\n  \n## 三者之间的转换\n\n\n```Javascript\nconst arr = [1, 3, 4, 4];\nconst arr1 = [['a', 'Kebei']];\nconst map = new Map(['a', 1], ['b', 2]);\nconst set = new Set([1, 5]);\n\n// Array 转 Set\nconst arr2Set = new Set(arr);   // [1, 3, 4];\n// Array 转Map\nconst arr2Map = new Map(arr1);  // {'a' => 'Kebei'}\n\n//Set转Array\nconst set2Arr = Array.from(set);        // [1, 5]\nconst set2Arr2 = [...set];              // [1, 5]\nconst set2Arr3 = set.values()           // [1, 5]\n//Set转Map\nconst set2Map = new Map(set.entries())  // { 1=> 1, 5=>5}\n\n// Map转Array\nconst map2Arr = Array.from(map);     // ['a', 1], ['b', 2]\nconst map2Arr2 = [...map];           // ['a', 1], ['b', 2]\nconst map2Arr3 = map.values()        // ['a', 1], ['b', 2]\n// Map转Set\nconst map2Set = new Set(map.values()) // [1, 2]\n```\n## 应用场景\n</br>\n最常见的一种场景莫过于使用数组与Set之间格式变化进行数据去重\n\n```Javascript\n  const dedup = (arr) => {\n    return [...new Set(arr)]\n  }\n```\n上述方法和之前includes方法也是一样存在无法处理复杂数据类型，对于复杂对象数据，需要根据各自业务场景对重复的数据进行去重策略选择，即在一堆的重复对象中（以id重复为例）保留业务需要的唯一一个数据。\n\n## 总结\n三种数据结构有着各自不同的特性。数组是一个天然的栈，也是一个天然的队列，在三种数据结构中，其实例方法也应用也是最多的，是线性存储中话事人般的存在，也是我们在普通业务场景下的首选。Set数据的唯一性，可以帮助我们在业务场景中快速的进行去重。Map键值对结构的特殊性，以及对键的包容性，能够通过键快速获取到值，也是复杂业务冲常常用的。\n</br>\n\n【资料参考】\n  1. https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n  2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n  3. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","source":"_posts/Array-set-map summary.md","raw":"\n---\ntitle: 一篇文章搞懂Array,Set和Map异同\n---\n\nArray,Set和Map三个作为Javascript中可迭代的集合数据类型，在编程过程中使用的频率也比较高。针对三种数据类型各自的一些特性，本文的内容将从以下几个方面来上述数据类型做一个总结。\n\n-  [**实例的创建**](##实例的创建)\n-  [**数据添加**](##数据添加)\n-  [**数据访问（查找）**](##数据访问（查找）)\n-  [**数据的遍历**](##数据的遍历)\n-  [**类似的功能和一些专有方法**](##类似的功能和一些专有方法)\n-  [**三者之间的转换**](##三者之间的转换)\n-  [**应用场景**](##应用场景)\n\n## 实例的创建\n  Map和Set创建实例的方式是唯一的，只允许通过new调用构造方法来创建一个实例。值得注意的是，Set和Map在调用构造函数的时候，传参都是数组或者可迭代对象，其中Map的传参数组需要时一个键值对数组。当然，传参也是可选的，非必须。\n\n Array相较于前两者，其创建实例的方式要多写，可通过字面方式创建，也可像Map和Set一样通过构造函数来创建。此外使用Array的静态函数Array.from来创建也是非常常见的。例如，通过docuemnt.getElementsByTagName这类方法获取到一个HTMLCollect这样一个类数组，通常会通过Array.from将其装换成一个真正的数组来进行后续的操作。\n\n  ```Javascript\n\n   // 创建map实例\n   let map1 = new Map();\n   let map2 = new Map([['a', 1], ['b', 2]]); //  a=>1, b=>2\n   // 创建set实例\n   let set1 = new Set();\n   let set2 = new Set([1,2])\n\n  // 通过字面量创建数组\n  let arr1 = [1,2,3];\n  // 使用Array静态方法从一个可迭代对象或者类数组中创建数组实例\n  let arr2 = Array.from([4,5]) \n  // 使用Array构造函数\n  let arr3 = new Array([6,7]);\n```\n\n## 数据添加与变更\n\n\n```Javascript\n  // Set的数据操作：添加与删除\n  let set = new Set();\n  set.add(11) // [11]\n  set.add(23) // [11, 23]\n  set.add(11) // [11, 23]\n  set.delete(23) // [11] \n  \n  // Map的数据操作：添加与删除\n  let  map = new Map();\n  map.set('a', 1);   // [a=>1]\n  map.set('b', 2);   // [a=>1, b=>2]\n  map.delete('b');   // [a=>1]\n\n  // Array\n  let arr = [1,2,3]\n  // 在数组末尾添加一个值\n  arr.push(4)       // [1,2,3,4]\n  // 弹出数组末尾的值\n  arr.pop(4)        // [1,2,3]\n  // 在数组头部添加一个值\n  arr.unshift(0)    // [0,1,2,3]\n  // 移除头部的第一个值\n  arr.shift()       // [1,2,3]\n  // 在第二个数（下标1）之后插入一个值‘a’\n  arr.splice(1,0,'a')   // [1,2,'a', 3];\n  // 删除第二个数（下标1）后面1个值，然后插入一个新的值‘b’\n  arr.splice(1,1,'b')   // [1,2,'b',3]\n```\n\n## 数据访问\n  Array和Map都能够访问实例中的特定数据，Array是通过下标，而Map是通过实例方法get, 唯独Set没有方式可以直接访问其中特定数据。其实也不难理解，Set本身不是为了单纯存储数据和访问特殊而生的，因为这些功能Array就可以支持，何必再单出构造一个Set数据结构了。我对此的理解是，Set跟多的是紧紧围绕着数据唯一不重复这一准则来的，它的侧重点是某一数据的有无，而不是数据存在哪里。\n\n  另外，从结构上来说。Set不像Array那样是有序的，所以也无法使用下标来访问，也不像Map那般，每个键对应一个值，所以也无法通过键来访问。故而，Set没有单独访问某一数据的方式。\n\n```Javascript\n  const arr = [1,2,3];\n  const set = new Set(['a', 'b']);\n  const map = new Map([['a', 1], ['b', '2']]);\n  \n  //Array通过下标访问数据\n  console.log(arr[0], arr[2]) // 1, 3\n  //Map使用实例方法get访问数据，参数是键\n  console.log(mpa.get('a))    // 1\n```\n## 数据的遍历\n\n**Set数据的遍历方式**：\n-  keys()   &emsp;&emsp;返回键名迭代器\n-  values() &emsp;返回值迭代器  \n-  entries() &emsp;返回键值迭代器\n-  forEach()\n```Javascript\nconst set = new Set(['a', 'b', 'c']);\n// set每个值对应的key其实也是数据值本身\nconst keyIter = set.keys();\nconsole.log(keyIter.next().value);  // 'a'\nconsole.log(keyIter.next().value);  // 'b'\nconsole.log(keyIter.next().value);  // 'c'\nconsole.log(keyIter.next().value);  // undefined\n\nconst valueIter = set.values();\nfor(let val of valueIter) {\n  console.log(val);                // 'a', 'b', 'c'\n}\n\nconst entriesIter = set.entries();\nfor(let [key, value] of entriesIter) {\n  console(`${key}:${value}`)     // 'a':'a', 'b':'b', 'c':'c'\n}\n\nset.forEach(val => {\n  console.log(val)             // 'a', 'b', 'c'\n})\n```\n</br>\n\n**Map数据的遍历方式**\n-  keys()   &emsp;&emsp;返回键名迭代器\n-  values() &emsp;返回值迭代器  \n-  entries() &emsp;返回键值迭代器\n-  forEach()\n\n```Javascript\nconst map = new Map([['a', 1], ['b', '2']]);\n/**\n* 代码就自己脑补吧，\n* 不能说和Set的方式很像，\n* 只能说真的就是一模一样\n**/\n```\n</br>\n\n**Array数据的遍历方式**\n\nArray遍历数据的方法是最多的，除了下面列举的几个之外，还有some, every,甚至filter, find和findIndex这些方法可以用来遍历数据。使用这些方法需要注意的是其使用的场景，例如map和forEach都可以用来对数组内数据做一些操作，但如果不需要返回值的情况，还是使用forEach方法，而不建议是map，其它方法也是如此。\n\n-  keys()   &emsp;&emsp;返回键名迭代器\n-  values() &emsp;返回值迭代器  \n-  entries() &emsp;返回键值迭代器\n-  map()    &emsp;回调函数，要有返回值\n-  reduce() \n-  forEach()\n-  for...of\n```Javascript\n/**\n* 代码就不写了，偷个懒，不过还是贴心的附上链接\n* https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n**/\n```\n\n\n## 类似的功能和一些专有方法\n- **是否包含某个元素**: 数组的includes方法，map和set的has方法，三者的返回值都是布尔值，区别只在于传入的参数。数组和set传入的是值，map传入的是键。\n- **合并两个相同类型的数据**： 数组使用concat方法，合并两个数组值，set使用union方法合并两个集合。map没有专有方法可以用来合并两个map数据，不过可以通过使用new Map([...map1, ...map2])来返回一个合并之后的新map\n- **数据大小**：数组有length属性，map和set有size属性\n- **清空数据**：map和size都可通过clear()方法来清空数据，数组无专有方法，可自己通过修改length值为0或者使用splice方法清空数据。\n\n>关于数组中的includes方法在数组值为一个个对象的时候，这个时候传入的值就只能是对象的引用了。如果作用域内不存在引用的话，判断数组中是否存在某个对象，就只能通过filter, find或者findIndex之类的方法加上数据特征去判断数组中是否存在该对象了。\n\n  \n## 三者之间的转换\n\n\n```Javascript\nconst arr = [1, 3, 4, 4];\nconst arr1 = [['a', 'Kebei']];\nconst map = new Map(['a', 1], ['b', 2]);\nconst set = new Set([1, 5]);\n\n// Array 转 Set\nconst arr2Set = new Set(arr);   // [1, 3, 4];\n// Array 转Map\nconst arr2Map = new Map(arr1);  // {'a' => 'Kebei'}\n\n//Set转Array\nconst set2Arr = Array.from(set);        // [1, 5]\nconst set2Arr2 = [...set];              // [1, 5]\nconst set2Arr3 = set.values()           // [1, 5]\n//Set转Map\nconst set2Map = new Map(set.entries())  // { 1=> 1, 5=>5}\n\n// Map转Array\nconst map2Arr = Array.from(map);     // ['a', 1], ['b', 2]\nconst map2Arr2 = [...map];           // ['a', 1], ['b', 2]\nconst map2Arr3 = map.values()        // ['a', 1], ['b', 2]\n// Map转Set\nconst map2Set = new Set(map.values()) // [1, 2]\n```\n## 应用场景\n</br>\n最常见的一种场景莫过于使用数组与Set之间格式变化进行数据去重\n\n```Javascript\n  const dedup = (arr) => {\n    return [...new Set(arr)]\n  }\n```\n上述方法和之前includes方法也是一样存在无法处理复杂数据类型，对于复杂对象数据，需要根据各自业务场景对重复的数据进行去重策略选择，即在一堆的重复对象中（以id重复为例）保留业务需要的唯一一个数据。\n\n## 总结\n三种数据结构有着各自不同的特性。数组是一个天然的栈，也是一个天然的队列，在三种数据结构中，其实例方法也应用也是最多的，是线性存储中话事人般的存在，也是我们在普通业务场景下的首选。Set数据的唯一性，可以帮助我们在业务场景中快速的进行去重。Map键值对结构的特殊性，以及对键的包容性，能够通过键快速获取到值，也是复杂业务冲常常用的。\n</br>\n\n【资料参考】\n  1. https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n  2. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n  3. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map","slug":"Array-set-map summary","published":1,"date":"2025-05-23T11:39:55.333Z","updated":"2025-05-23T11:39:55.333Z","comments":1,"layout":"post","photos":[],"_id":"cmb0qjkpm000050upe27b602d","content":"<p>Array,Set和Map三个作为Javascript中可迭代的集合数据类型，在编程过程中使用的频率也比较高。针对三种数据类型各自的一些特性，本文的内容将从以下几个方面来上述数据类型做一个总结。</p>\n<ul>\n<li><a href=\"##%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%88%9B%E5%BB%BA\"><strong>实例的创建</strong></a></li>\n<li><a href=\"##%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0\"><strong>数据添加</strong></a></li>\n<li><a href=\"##%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88%E6%9F%A5%E6%89%BE%EF%BC%89\"><strong>数据访问（查找）</strong></a></li>\n<li><a href=\"##%E6%95%B0%E6%8D%AE%E7%9A%84%E9%81%8D%E5%8E%86\"><strong>数据的遍历</strong></a></li>\n<li><a href=\"##%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E4%B8%80%E4%BA%9B%E4%B8%93%E6%9C%89%E6%96%B9%E6%B3%95\"><strong>类似的功能和一些专有方法</strong></a></li>\n<li><a href=\"##%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><strong>三者之间的转换</strong></a></li>\n<li><a href=\"##%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><strong>应用场景</strong></a></li>\n</ul>\n<h2 id=\"实例的创建\"><a href=\"#实例的创建\" class=\"headerlink\" title=\"实例的创建\"></a>实例的创建</h2><p>  Map和Set创建实例的方式是唯一的，只允许通过new调用构造方法来创建一个实例。值得注意的是，Set和Map在调用构造函数的时候，传参都是数组或者可迭代对象，其中Map的传参数组需要时一个键值对数组。当然，传参也是可选的，非必须。</p>\n<p> Array相较于前两者，其创建实例的方式要多写，可通过字面方式创建，也可像Map和Set一样通过构造函数来创建。此外使用Array的静态函数Array.from来创建也是非常常见的。例如，通过docuemnt.getElementsByTagName这类方法获取到一个HTMLCollect这样一个类数组，通常会通过Array.from将其装换成一个真正的数组来进行后续的操作。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><br> <span class=\"hljs-comment\">// 创建map实例</span><br> <span class=\"hljs-keyword\">let</span> map1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();<br> <span class=\"hljs-keyword\">let</span> map2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>]]); <span class=\"hljs-comment\">//  a=&gt;1, b=&gt;2</span><br> <span class=\"hljs-comment\">// 创建set实例</span><br> <span class=\"hljs-keyword\">let</span> set1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();<br> <span class=\"hljs-keyword\">let</span> set2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<br><br><span class=\"hljs-comment\">// 通过字面量创建数组</span><br><span class=\"hljs-keyword\">let</span> arr1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-comment\">// 使用Array静态方法从一个可迭代对象或者类数组中创建数组实例</span><br><span class=\"hljs-keyword\">let</span> arr2 = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>([<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]) <br><span class=\"hljs-comment\">// 使用Array构造函数</span><br><span class=\"hljs-keyword\">let</span> arr3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>([<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>]);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据添加与变更\"><a href=\"#数据添加与变更\" class=\"headerlink\" title=\"数据添加与变更\"></a>数据添加与变更</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// Set的数据操作：添加与删除</span><br><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();<br>set.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-comment\">// [11]</span><br>set.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">23</span>) <span class=\"hljs-comment\">// [11, 23]</span><br>set.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-comment\">// [11, 23]</span><br>set.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">23</span>) <span class=\"hljs-comment\">// [11] </span><br><br><span class=\"hljs-comment\">// Map的数据操作：添加与删除</span><br><span class=\"hljs-keyword\">let</span>  map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();<br>map.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">// [a=&gt;1]</span><br>map.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>);   <span class=\"hljs-comment\">// [a=&gt;1, b=&gt;2]</span><br>map.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>);   <span class=\"hljs-comment\">// [a=&gt;1]</span><br><br><span class=\"hljs-comment\">// Array</span><br><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br><span class=\"hljs-comment\">// 在数组末尾添加一个值</span><br>arr.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>)       <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-comment\">// 弹出数组末尾的值</span><br>arr.<span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-number\">4</span>)        <span class=\"hljs-comment\">// [1,2,3]</span><br><span class=\"hljs-comment\">// 在数组头部添加一个值</span><br>arr.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-number\">0</span>)    <span class=\"hljs-comment\">// [0,1,2,3]</span><br><span class=\"hljs-comment\">// 移除头部的第一个值</span><br>arr.<span class=\"hljs-title function_\">shift</span>()       <span class=\"hljs-comment\">// [1,2,3]</span><br><span class=\"hljs-comment\">// 在第二个数（下标1）之后插入一个值‘a’</span><br>arr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&#x27;a&#x27;</span>)   <span class=\"hljs-comment\">// [1,2,&#x27;a&#x27;, 3];</span><br><span class=\"hljs-comment\">// 删除第二个数（下标1）后面1个值，然后插入一个新的值‘b’</span><br>arr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>)   <span class=\"hljs-comment\">// [1,2,&#x27;b&#x27;,3]</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据访问\"><a href=\"#数据访问\" class=\"headerlink\" title=\"数据访问\"></a>数据访问</h2><p>  Array和Map都能够访问实例中的特定数据，Array是通过下标，而Map是通过实例方法get, 唯独Set没有方式可以直接访问其中特定数据。其实也不难理解，Set本身不是为了单纯存储数据和访问特殊而生的，因为这些功能Array就可以支持，何必再单出构造一个Set数据结构了。我对此的理解是，Set跟多的是紧紧围绕着数据唯一不重复这一准则来的，它的侧重点是某一数据的有无，而不是数据存在哪里。</p>\n<p>  另外，从结构上来说。Set不像Array那样是有序的，所以也无法使用下标来访问，也不像Map那般，每个键对应一个值，所以也无法通过键来访问。故而，Set没有单独访问某一数据的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>]);<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>]]);<br><br><span class=\"hljs-comment\">//Array通过下标访问数据</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr[<span class=\"hljs-number\">0</span>], arr[<span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">// 1, 3</span><br><span class=\"hljs-comment\">//Map使用实例方法get访问数据，参数是键</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mpa.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;a))    // 1</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"数据的遍历\"><a href=\"#数据的遍历\" class=\"headerlink\" title=\"数据的遍历\"></a>数据的遍历</h2><p><strong>Set数据的遍历方式</strong>：</p>\n<ul>\n<li>keys()   &emsp;&emsp;返回键名迭代器</li>\n<li>values() &emsp;返回值迭代器  </li>\n<li>entries() &emsp;返回键值迭代器</li>\n<li>forEach()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]);<br><span class=\"hljs-comment\">// set每个值对应的key其实也是数据值本身</span><br><span class=\"hljs-keyword\">const</span> keyIter = set.<span class=\"hljs-title function_\">keys</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// &#x27;a&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// &#x27;b&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// &#x27;c&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-keyword\">const</span> valueIter = set.<span class=\"hljs-title function_\">values</span>();<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> val <span class=\"hljs-keyword\">of</span> valueIter) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val);                <span class=\"hljs-comment\">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> entriesIter = set.<span class=\"hljs-title function_\">entries</span>();<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> entriesIter) &#123;<br>  <span class=\"hljs-title function_\">console</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;key&#125;</span>:<span class=\"hljs-subst\">$&#123;value&#125;</span>`</span>)     <span class=\"hljs-comment\">// &#x27;a&#x27;:&#x27;a&#x27;, &#x27;b&#x27;:&#x27;b&#x27;, &#x27;c&#x27;:&#x27;c&#x27;</span><br>&#125;<br><br>set.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val)             <span class=\"hljs-comment\">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n</br></li>\n</ul>\n<p><strong>Map数据的遍历方式</strong></p>\n<ul>\n<li>keys()   &emsp;&emsp;返回键名迭代器</li>\n<li>values() &emsp;返回值迭代器  </li>\n<li>entries() &emsp;返回键值迭代器</li>\n<li>forEach()</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>]]);<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 代码就自己脑补吧，</span><br><span class=\"hljs-comment\">* 不能说和Set的方式很像，</span><br><span class=\"hljs-comment\">* 只能说真的就是一模一样</span><br><span class=\"hljs-comment\">**/</span><br></code></pre></td></tr></table></figure>\n</br>\n\n<p><strong>Array数据的遍历方式</strong></p>\n<p>Array遍历数据的方法是最多的，除了下面列举的几个之外，还有some, every,甚至filter, find和findIndex这些方法可以用来遍历数据。使用这些方法需要注意的是其使用的场景，例如map和forEach都可以用来对数组内数据做一些操作，但如果不需要返回值的情况，还是使用forEach方法，而不建议是map，其它方法也是如此。</p>\n<ul>\n<li>keys()   &emsp;&emsp;返回键名迭代器</li>\n<li>values() &emsp;返回值迭代器  </li>\n<li>entries() &emsp;返回键值迭代器</li>\n<li>map()    &emsp;回调函数，要有返回值</li>\n<li>reduce() </li>\n<li>forEach()</li>\n<li>for…of<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 代码就不写了，偷个懒，不过还是贴心的附上链接</span><br><span class=\"hljs-comment\">* https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</span><br><span class=\"hljs-comment\">**/</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"类似的功能和一些专有方法\"><a href=\"#类似的功能和一些专有方法\" class=\"headerlink\" title=\"类似的功能和一些专有方法\"></a>类似的功能和一些专有方法</h2><ul>\n<li><strong>是否包含某个元素</strong>: 数组的includes方法，map和set的has方法，三者的返回值都是布尔值，区别只在于传入的参数。数组和set传入的是值，map传入的是键。</li>\n<li><strong>合并两个相同类型的数据</strong>： 数组使用concat方法，合并两个数组值，set使用union方法合并两个集合。map没有专有方法可以用来合并两个map数据，不过可以通过使用new Map([…map1, …map2])来返回一个合并之后的新map</li>\n<li><strong>数据大小</strong>：数组有length属性，map和set有size属性</li>\n<li><strong>清空数据</strong>：map和size都可通过clear()方法来清空数据，数组无专有方法，可自己通过修改length值为0或者使用splice方法清空数据。</li>\n</ul>\n<blockquote>\n<p>关于数组中的includes方法在数组值为一个个对象的时候，这个时候传入的值就只能是对象的引用了。如果作用域内不存在引用的话，判断数组中是否存在某个对象，就只能通过filter, find或者findIndex之类的方法加上数据特征去判断数组中是否存在该对象了。</p>\n</blockquote>\n<h2 id=\"三者之间的转换\"><a href=\"#三者之间的转换\" class=\"headerlink\" title=\"三者之间的转换\"></a>三者之间的转换</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>];<br><span class=\"hljs-keyword\">const</span> arr1 = [[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;Kebei&#x27;</span>]];<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>]);<br><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>]);<br><br><span class=\"hljs-comment\">// Array 转 Set</span><br><span class=\"hljs-keyword\">const</span> arr2Set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(arr);   <span class=\"hljs-comment\">// [1, 3, 4];</span><br><span class=\"hljs-comment\">// Array 转Map</span><br><span class=\"hljs-keyword\">const</span> arr2Map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>(arr1);  <span class=\"hljs-comment\">// &#123;&#x27;a&#x27; =&gt; &#x27;Kebei&#x27;&#125;</span><br><br><span class=\"hljs-comment\">//Set转Array</span><br><span class=\"hljs-keyword\">const</span> set2Arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(set);        <span class=\"hljs-comment\">// [1, 5]</span><br><span class=\"hljs-keyword\">const</span> set2Arr2 = [...set];              <span class=\"hljs-comment\">// [1, 5]</span><br><span class=\"hljs-keyword\">const</span> set2Arr3 = set.<span class=\"hljs-title function_\">values</span>()           <span class=\"hljs-comment\">// [1, 5]</span><br><span class=\"hljs-comment\">//Set转Map</span><br><span class=\"hljs-keyword\">const</span> set2Map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>(set.<span class=\"hljs-title function_\">entries</span>())  <span class=\"hljs-comment\">// &#123; 1=&gt; 1, 5=&gt;5&#125;</span><br><br><span class=\"hljs-comment\">// Map转Array</span><br><span class=\"hljs-keyword\">const</span> map2Arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(map);     <span class=\"hljs-comment\">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class=\"hljs-keyword\">const</span> map2Arr2 = [...map];           <span class=\"hljs-comment\">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class=\"hljs-keyword\">const</span> map2Arr3 = map.<span class=\"hljs-title function_\">values</span>()        <span class=\"hljs-comment\">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class=\"hljs-comment\">// Map转Set</span><br><span class=\"hljs-keyword\">const</span> map2Set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(map.<span class=\"hljs-title function_\">values</span>()) <span class=\"hljs-comment\">// [1, 2]</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2></br>\n最常见的一种场景莫过于使用数组与Set之间格式变化进行数据去重\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dedup</span> = (<span class=\"hljs-params\">arr</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> [...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(arr)]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上述方法和之前includes方法也是一样存在无法处理复杂数据类型，对于复杂对象数据，需要根据各自业务场景对重复的数据进行去重策略选择，即在一堆的重复对象中（以id重复为例）保留业务需要的唯一一个数据。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>三种数据结构有着各自不同的特性。数组是一个天然的栈，也是一个天然的队列，在三种数据结构中，其实例方法也应用也是最多的，是线性存储中话事人般的存在，也是我们在普通业务场景下的首选。Set数据的唯一性，可以帮助我们在业务场景中快速的进行去重。Map键值对结构的特殊性，以及对键的包容性，能够通过键快速获取到值，也是复杂业务冲常常用的。<br></br></p>\n<p>【资料参考】</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map</a></li>\n</ol>\n","excerpt":"","more":"<p>Array,Set和Map三个作为Javascript中可迭代的集合数据类型，在编程过程中使用的频率也比较高。针对三种数据类型各自的一些特性，本文的内容将从以下几个方面来上述数据类型做一个总结。</p>\n<ul>\n<li><a href=\"##%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%88%9B%E5%BB%BA\"><strong>实例的创建</strong></a></li>\n<li><a href=\"##%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0\"><strong>数据添加</strong></a></li>\n<li><a href=\"##%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88%E6%9F%A5%E6%89%BE%EF%BC%89\"><strong>数据访问（查找）</strong></a></li>\n<li><a href=\"##%E6%95%B0%E6%8D%AE%E7%9A%84%E9%81%8D%E5%8E%86\"><strong>数据的遍历</strong></a></li>\n<li><a href=\"##%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E4%B8%80%E4%BA%9B%E4%B8%93%E6%9C%89%E6%96%B9%E6%B3%95\"><strong>类似的功能和一些专有方法</strong></a></li>\n<li><a href=\"##%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><strong>三者之间的转换</strong></a></li>\n<li><a href=\"##%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><strong>应用场景</strong></a></li>\n</ul>\n<h2 id=\"实例的创建\"><a href=\"#实例的创建\" class=\"headerlink\" title=\"实例的创建\"></a>实例的创建</h2><p>  Map和Set创建实例的方式是唯一的，只允许通过new调用构造方法来创建一个实例。值得注意的是，Set和Map在调用构造函数的时候，传参都是数组或者可迭代对象，其中Map的传参数组需要时一个键值对数组。当然，传参也是可选的，非必须。</p>\n<p> Array相较于前两者，其创建实例的方式要多写，可通过字面方式创建，也可像Map和Set一样通过构造函数来创建。此外使用Array的静态函数Array.from来创建也是非常常见的。例如，通过docuemnt.getElementsByTagName这类方法获取到一个HTMLCollect这样一个类数组，通常会通过Array.from将其装换成一个真正的数组来进行后续的操作。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><br> <span class=\"hljs-comment\">// 创建map实例</span><br> <span class=\"hljs-keyword\">let</span> map1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();<br> <span class=\"hljs-keyword\">let</span> map2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>]]); <span class=\"hljs-comment\">//  a=&gt;1, b=&gt;2</span><br> <span class=\"hljs-comment\">// 创建set实例</span><br> <span class=\"hljs-keyword\">let</span> set1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();<br> <span class=\"hljs-keyword\">let</span> set2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>])<br><br><span class=\"hljs-comment\">// 通过字面量创建数组</span><br><span class=\"hljs-keyword\">let</span> arr1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-comment\">// 使用Array静态方法从一个可迭代对象或者类数组中创建数组实例</span><br><span class=\"hljs-keyword\">let</span> arr2 = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>([<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]) <br><span class=\"hljs-comment\">// 使用Array构造函数</span><br><span class=\"hljs-keyword\">let</span> arr3 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>([<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>]);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据添加与变更\"><a href=\"#数据添加与变更\" class=\"headerlink\" title=\"数据添加与变更\"></a>数据添加与变更</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// Set的数据操作：添加与删除</span><br><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();<br>set.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-comment\">// [11]</span><br>set.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">23</span>) <span class=\"hljs-comment\">// [11, 23]</span><br>set.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-comment\">// [11, 23]</span><br>set.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">23</span>) <span class=\"hljs-comment\">// [11] </span><br><br><span class=\"hljs-comment\">// Map的数据操作：添加与删除</span><br><span class=\"hljs-keyword\">let</span>  map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();<br>map.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>);   <span class=\"hljs-comment\">// [a=&gt;1]</span><br>map.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>);   <span class=\"hljs-comment\">// [a=&gt;1, b=&gt;2]</span><br>map.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">&#x27;b&#x27;</span>);   <span class=\"hljs-comment\">// [a=&gt;1]</span><br><br><span class=\"hljs-comment\">// Array</span><br><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br><span class=\"hljs-comment\">// 在数组末尾添加一个值</span><br>arr.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">4</span>)       <span class=\"hljs-comment\">// [1,2,3,4]</span><br><span class=\"hljs-comment\">// 弹出数组末尾的值</span><br>arr.<span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-number\">4</span>)        <span class=\"hljs-comment\">// [1,2,3]</span><br><span class=\"hljs-comment\">// 在数组头部添加一个值</span><br>arr.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-number\">0</span>)    <span class=\"hljs-comment\">// [0,1,2,3]</span><br><span class=\"hljs-comment\">// 移除头部的第一个值</span><br>arr.<span class=\"hljs-title function_\">shift</span>()       <span class=\"hljs-comment\">// [1,2,3]</span><br><span class=\"hljs-comment\">// 在第二个数（下标1）之后插入一个值‘a’</span><br>arr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&#x27;a&#x27;</span>)   <span class=\"hljs-comment\">// [1,2,&#x27;a&#x27;, 3];</span><br><span class=\"hljs-comment\">// 删除第二个数（下标1）后面1个值，然后插入一个新的值‘b’</span><br>arr.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>)   <span class=\"hljs-comment\">// [1,2,&#x27;b&#x27;,3]</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"数据访问\"><a href=\"#数据访问\" class=\"headerlink\" title=\"数据访问\"></a>数据访问</h2><p>  Array和Map都能够访问实例中的特定数据，Array是通过下标，而Map是通过实例方法get, 唯独Set没有方式可以直接访问其中特定数据。其实也不难理解，Set本身不是为了单纯存储数据和访问特殊而生的，因为这些功能Array就可以支持，何必再单出构造一个Set数据结构了。我对此的理解是，Set跟多的是紧紧围绕着数据唯一不重复这一准则来的，它的侧重点是某一数据的有无，而不是数据存在哪里。</p>\n<p>  另外，从结构上来说。Set不像Array那样是有序的，所以也无法使用下标来访问，也不像Map那般，每个键对应一个值，所以也无法通过键来访问。故而，Set没有单独访问某一数据的方式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>]);<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>]]);<br><br><span class=\"hljs-comment\">//Array通过下标访问数据</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr[<span class=\"hljs-number\">0</span>], arr[<span class=\"hljs-number\">2</span>]) <span class=\"hljs-comment\">// 1, 3</span><br><span class=\"hljs-comment\">//Map使用实例方法get访问数据，参数是键</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(mpa.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;a))    // 1</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"数据的遍历\"><a href=\"#数据的遍历\" class=\"headerlink\" title=\"数据的遍历\"></a>数据的遍历</h2><p><strong>Set数据的遍历方式</strong>：</p>\n<ul>\n<li>keys()   &emsp;&emsp;返回键名迭代器</li>\n<li>values() &emsp;返回值迭代器  </li>\n<li>entries() &emsp;返回键值迭代器</li>\n<li>forEach()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>]);<br><span class=\"hljs-comment\">// set每个值对应的key其实也是数据值本身</span><br><span class=\"hljs-keyword\">const</span> keyIter = set.<span class=\"hljs-title function_\">keys</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// &#x27;a&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// &#x27;b&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// &#x27;c&#x27;</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keyIter.<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-property\">value</span>);  <span class=\"hljs-comment\">// undefined</span><br><br><span class=\"hljs-keyword\">const</span> valueIter = set.<span class=\"hljs-title function_\">values</span>();<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> val <span class=\"hljs-keyword\">of</span> valueIter) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val);                <span class=\"hljs-comment\">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> entriesIter = set.<span class=\"hljs-title function_\">entries</span>();<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> entriesIter) &#123;<br>  <span class=\"hljs-title function_\">console</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;key&#125;</span>:<span class=\"hljs-subst\">$&#123;value&#125;</span>`</span>)     <span class=\"hljs-comment\">// &#x27;a&#x27;:&#x27;a&#x27;, &#x27;b&#x27;:&#x27;b&#x27;, &#x27;c&#x27;:&#x27;c&#x27;</span><br>&#125;<br><br>set.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(val)             <span class=\"hljs-comment\">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n</br></li>\n</ul>\n<p><strong>Map数据的遍历方式</strong></p>\n<ul>\n<li>keys()   &emsp;&emsp;返回键名迭代器</li>\n<li>values() &emsp;返回值迭代器  </li>\n<li>entries() &emsp;返回键值迭代器</li>\n<li>forEach()</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>]]);<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 代码就自己脑补吧，</span><br><span class=\"hljs-comment\">* 不能说和Set的方式很像，</span><br><span class=\"hljs-comment\">* 只能说真的就是一模一样</span><br><span class=\"hljs-comment\">**/</span><br></code></pre></td></tr></table></figure>\n</br>\n\n<p><strong>Array数据的遍历方式</strong></p>\n<p>Array遍历数据的方法是最多的，除了下面列举的几个之外，还有some, every,甚至filter, find和findIndex这些方法可以用来遍历数据。使用这些方法需要注意的是其使用的场景，例如map和forEach都可以用来对数组内数据做一些操作，但如果不需要返回值的情况，还是使用forEach方法，而不建议是map，其它方法也是如此。</p>\n<ul>\n<li>keys()   &emsp;&emsp;返回键名迭代器</li>\n<li>values() &emsp;返回值迭代器  </li>\n<li>entries() &emsp;返回键值迭代器</li>\n<li>map()    &emsp;回调函数，要有返回值</li>\n<li>reduce() </li>\n<li>forEach()</li>\n<li>for…of<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">* 代码就不写了，偷个懒，不过还是贴心的附上链接</span><br><span class=\"hljs-comment\">* https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</span><br><span class=\"hljs-comment\">**/</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"类似的功能和一些专有方法\"><a href=\"#类似的功能和一些专有方法\" class=\"headerlink\" title=\"类似的功能和一些专有方法\"></a>类似的功能和一些专有方法</h2><ul>\n<li><strong>是否包含某个元素</strong>: 数组的includes方法，map和set的has方法，三者的返回值都是布尔值，区别只在于传入的参数。数组和set传入的是值，map传入的是键。</li>\n<li><strong>合并两个相同类型的数据</strong>： 数组使用concat方法，合并两个数组值，set使用union方法合并两个集合。map没有专有方法可以用来合并两个map数据，不过可以通过使用new Map([…map1, …map2])来返回一个合并之后的新map</li>\n<li><strong>数据大小</strong>：数组有length属性，map和set有size属性</li>\n<li><strong>清空数据</strong>：map和size都可通过clear()方法来清空数据，数组无专有方法，可自己通过修改length值为0或者使用splice方法清空数据。</li>\n</ul>\n<blockquote>\n<p>关于数组中的includes方法在数组值为一个个对象的时候，这个时候传入的值就只能是对象的引用了。如果作用域内不存在引用的话，判断数组中是否存在某个对象，就只能通过filter, find或者findIndex之类的方法加上数据特征去判断数组中是否存在该对象了。</p>\n</blockquote>\n<h2 id=\"三者之间的转换\"><a href=\"#三者之间的转换\" class=\"headerlink\" title=\"三者之间的转换\"></a>三者之间的转换</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>];<br><span class=\"hljs-keyword\">const</span> arr1 = [[<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;Kebei&#x27;</span>]];<br><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-number\">2</span>]);<br><span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>]);<br><br><span class=\"hljs-comment\">// Array 转 Set</span><br><span class=\"hljs-keyword\">const</span> arr2Set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(arr);   <span class=\"hljs-comment\">// [1, 3, 4];</span><br><span class=\"hljs-comment\">// Array 转Map</span><br><span class=\"hljs-keyword\">const</span> arr2Map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>(arr1);  <span class=\"hljs-comment\">// &#123;&#x27;a&#x27; =&gt; &#x27;Kebei&#x27;&#125;</span><br><br><span class=\"hljs-comment\">//Set转Array</span><br><span class=\"hljs-keyword\">const</span> set2Arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(set);        <span class=\"hljs-comment\">// [1, 5]</span><br><span class=\"hljs-keyword\">const</span> set2Arr2 = [...set];              <span class=\"hljs-comment\">// [1, 5]</span><br><span class=\"hljs-keyword\">const</span> set2Arr3 = set.<span class=\"hljs-title function_\">values</span>()           <span class=\"hljs-comment\">// [1, 5]</span><br><span class=\"hljs-comment\">//Set转Map</span><br><span class=\"hljs-keyword\">const</span> set2Map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>(set.<span class=\"hljs-title function_\">entries</span>())  <span class=\"hljs-comment\">// &#123; 1=&gt; 1, 5=&gt;5&#125;</span><br><br><span class=\"hljs-comment\">// Map转Array</span><br><span class=\"hljs-keyword\">const</span> map2Arr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(map);     <span class=\"hljs-comment\">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class=\"hljs-keyword\">const</span> map2Arr2 = [...map];           <span class=\"hljs-comment\">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class=\"hljs-keyword\">const</span> map2Arr3 = map.<span class=\"hljs-title function_\">values</span>()        <span class=\"hljs-comment\">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class=\"hljs-comment\">// Map转Set</span><br><span class=\"hljs-keyword\">const</span> map2Set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(map.<span class=\"hljs-title function_\">values</span>()) <span class=\"hljs-comment\">// [1, 2]</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2></br>\n最常见的一种场景莫过于使用数组与Set之间格式变化进行数据去重\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">dedup</span> = (<span class=\"hljs-params\">arr</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">return</span> [...<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(arr)]<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上述方法和之前includes方法也是一样存在无法处理复杂数据类型，对于复杂对象数据，需要根据各自业务场景对重复的数据进行去重策略选择，即在一堆的重复对象中（以id重复为例）保留业务需要的唯一一个数据。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>三种数据结构有着各自不同的特性。数组是一个天然的栈，也是一个天然的队列，在三种数据结构中，其实例方法也应用也是最多的，是线性存储中话事人般的存在，也是我们在普通业务场景下的首选。Set数据的唯一性，可以帮助我们在业务场景中快速的进行去重。Map键值对结构的特殊性，以及对键的包容性，能够通过键快速获取到值，也是复杂业务冲常常用的。<br></br></p>\n<p>【资料参考】</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map</a></li>\n</ol>\n"},{"title":"Vue依赖收集和触发，看这些关键源码","_content":"\n从Vue开始较大范围在前端应用开始，关于Vue一些基础知识的讨论和面试问题就在开发圈子里基本上就跟前几年的股票和基金一样，楼下摆摊卖酱香饼的阿姨都能说上几句那种。找过前端开发工作或者正在找开发工作的前端都知道，面试官基本上都有那么几个常问的问题，而网上呢也有那么一套可以用来背诵的“八股文”，自己懂多少没有关系，应付面试官还是够的，可以算是屡试不爽吧。\n\n背诵面试八股文无可厚非的，可以说是每一个找工作的人都干过和必须干的事情，因为我们都要工作，都要恰饭。只有恰上饭，才能去谈些伟大的理想。背“八股文”本是一种捷径，尤其是本身对一门技术不是特别了解的开发者，就是那种刚刚能使用它那种。\n\n在众多关于Vue的面试“八股文”中，今天讲的是其中最常问的一个--Vue中的依赖收集。本文也将从代码层面，讲清楚关于依赖收集的几个问题。\n-  收集的依赖是什么？（what）\n-  怎么收集的依赖？  （how）\n-  什么时候收集？     (when)\n\n至于为什么要收集依赖(why)，现在就可以先告诉答案。**收集依赖，其核心作用是在数据发生变化的时候可以做出相应的动作，比如刷新视图**，为了执行这一动作，我们就得知道是谁在什么时候发生了变化，所以我们要收集依赖。\n\n\n下面我们结合代码，尽可能通俗的讲解关于上述的三个问题：\n\n\n\n在搞清楚依赖收集之前，先把源码中几个概念性的东西说明一下，建议下载[Vue3源码](https://github.com/vuejs/core)进行对照着看：\n-  **Dep**: 本质上是一个Map实例，同时在map实例上绑定一个celanup函数和一个computed属性。\n- **ReactiveEffect**: 相当于2.x版本中的Watcher类, 里头有一个deps数组，用来存dep, 每个实例里面都有一个track_id用来标识唯一性。\n\n- **effect函数**： 里头实例化一个ReactiveEffect对象，同时绑定一些options, 返回值是一个runner,实际上是对ReactiveEffect对象行为的一种业务封装。\n\n下面以一行简单的代码开始关于依赖收集的探索。\n```Javascript\nconst num = ref(1);\n```\n```Javascript\n// packages/reactivity/src/ref.ts\nexport function ref<T>(value: T): Ref<UnwrapRef<T>>\nexport function ref<T = any>(): Ref<T | undefined>\nexport function ref(value?: unknown) {\n  return createRef(value, false)\n}\n```\nref函数主要是对createRef做了一个函数包装，主要内容看到createRef函数。\n\n```Javascript\n// packages/reactivity/src/ref.ts\nfunction createRef(rawValue: unknown, shallow: boolean) {\n  if (isRef(rawValue)) {\n    return rawValue\n  }\n  return new RefImpl(rawValue, shallow)\n}\n```\ncreateRef函数在这里对原始数据rawValue做了一个判断，如果数据本身就是响应式数据了，就直接返回它本身，如果不是，就返回一个实例化的RefImpl对象。\n\n\n```Javascript\n// packages/reactivity/src/ref.ts\nclass RefImpl<T> {\n  private _value: T\n  private _rawValue: T\n\n  public dep?: Dep = undefined\n  public readonly __v_isRef = true\n\n  constructor(\n    value: T,\n    public readonly __v_isShallow: boolean,\n  ) {\n    this._rawValue = __v_isShallow ? value : toRaw(value)\n    this._value = __v_isShallow ? value : toReactive(value)\n  }\n\n  get value() {\n    trackRefValue(this)\n    return this._value\n  }\n\n  set value(newVal) {\n    const useDirectValue =\n      this.__v_isShallow || isShallow(newVal) || isReadonly(newVal)\n    newVal = useDirectValue ? newVal : toRaw(newVal)\n    if (hasChanged(newVal, this._rawValue)) {\n      this._rawValue = newVal\n      this._value = useDirectValue ? newVal : toReactive(newVal)\n      triggerRefValue(this, DirtyLevels.Dirty, newVal)\n    }\n  }\n}\n```\n重点来了，RefImple类里头，才是真正包含了从原始数据变成响应式数据，以及收集依赖的逻辑。在一个refImpl实例中，里面有一个dep对象，初始值是undefined， 这个dep会这trackRefValue函数执行的过程中被赋值。\n\n下面代码从17-21(get value())行，就是依赖收集的过程：当一个ref型响应式数据通过.value访问时，会触发RefImpl实例中的getter。它会首先执行一个trackValue函数，然后再返回_value值，所以接下来重点看关注trackValue函数，所以**依赖是在数据被访问的时候触发的**。\n\n```Javascript\n// packages/reactivity/src/ref.ts\nexport function trackRefValue(ref: RefBase<any>) {\n  if (shouldTrack && activeEffect) {\n    ref = toRaw(ref)\n    trackEffect(\n      activeEffect,\n      (ref.dep ??= createDep(\n        () => (ref.dep = undefined),\n        ref instanceof ComputedRefImpl ? ref : undefined,\n      )),\n      __DEV__\n        ? {\n            target: ref,\n            type: TrackOpTypes.GET,\n            key: 'value',\n          }\n        : void 0,\n    )\n  }\n}u\n```\n\ntrackRefValue函数中有两个变量，shouldTrack和activeEffect，暂时我们不去理会它们，只要知道shouldTrack是一个布尔值，activeEffect是一个RectiveEffect实例。\n\n在shouldTrack值为true且activeEffect有值的情况下，首先会将ref转成原始值，然后再执行trackEffect函数。\n\n在执行trackEffect函数的中，第一个是activeEffect, 在任意时刻它在全局是具有唯一性的；第二个是ref.dep, 其中给ref.dep的赋值函数createDep返回一个Dep实例，前面说过的，本质是个map; 第三个函数是个对象，是关于开发环境下debug的一些配置。\n\n在这里，我们可以看到，之前说个的ref实例中原来是undefined的ref.dep赋值，就在此处。\n\n```Javascript\n// packages/reactivity/src/effect.ts\nexport function trackEffect(\n  effect: ReactiveEffect,\n  dep: Dep,\n  debuggerEventExtraInfo?: DebuggerEventExtraInfo,\n) {\n  if (dep.get(effect) !== effect._trackId) {\n    dep.set(effect, effect._trackId)\n    const oldDep = effect.deps[effect._depsLength]\n    if (oldDep !== dep) {\n      if (oldDep) {\n        cleanupDepEffect(oldDep, effect)\n      }\n      effect.deps[effect._depsLength++] = dep\n    } else {\n      effect._depsLength++\n    }\n    if (__DEV__) {\n      effect.onTrack?.(extend({ effect }, debuggerEventExtraInfo!))\n    }\n  }\n}\n```\ntrackEffect函数绝对是依赖收集重头戏中的重头戏。\n\n首先上来就是一个判断，dep, 也就是ref中的dep，本质是个map，判断里面是否存在对应的effect, 如果没有，就执行接下来的操作。\n\ndep将effect也就是activeEffect作为键，其_trackId作为值添加到dep，**所以我们说的收集的依赖指的就是effect对象**。同时我们得到了一个关于**dep和effect之间的第一关系，即一个dep可以对应多个effect**。\n\n接着，将effects实例中deps数组中最后一个值取出来与当前的dep值进行比对，看是否是同一个值如果不是同一个值，而且oldDep是有值的，那么就执行cleanupDepEffect操作。如果oldDep为空值，就跳过这一步，直接往effect.deps中添加dep。因此，我们在这里得到了关于dep和effect第二个结论，**一个effect可以对应多个dep**。\n\n代码还有一部分，接着往下看，在oldDep不等于当前dep的时候，直接对effec_depsLength进行加操作，也就是说，effect.deps值没有变，但是_depsLength值却超出了deps数组边界的情况，这也就是为什么上面要判断oldDep是否存在的原因。\n\n\n由上面上面两个结论我们可以得出，一个dep中可以对应多个effect, 一个effect也可以对应多个dep, 因此dep和effect的关系是多对多的关系。\n\n### 总结\n\n-  收集的依赖是什么？（what）\n  > 我们常说的收集的依赖是effect对象\n\n-  怎么收集的依赖？  （how）\n > 判断当前数据dep中有没有activeEffct, 没有就加进去。把大象关进冰箱里要几步！！！\n-  什么时候收集？     (when)\n> 在数据被访问时，触发getter，进行依赖收集\n","source":"_posts/Dependencies-collecting of vue3.md","raw":"---\ntitle: Vue依赖收集和触发，看这些关键源码\n---\n\n从Vue开始较大范围在前端应用开始，关于Vue一些基础知识的讨论和面试问题就在开发圈子里基本上就跟前几年的股票和基金一样，楼下摆摊卖酱香饼的阿姨都能说上几句那种。找过前端开发工作或者正在找开发工作的前端都知道，面试官基本上都有那么几个常问的问题，而网上呢也有那么一套可以用来背诵的“八股文”，自己懂多少没有关系，应付面试官还是够的，可以算是屡试不爽吧。\n\n背诵面试八股文无可厚非的，可以说是每一个找工作的人都干过和必须干的事情，因为我们都要工作，都要恰饭。只有恰上饭，才能去谈些伟大的理想。背“八股文”本是一种捷径，尤其是本身对一门技术不是特别了解的开发者，就是那种刚刚能使用它那种。\n\n在众多关于Vue的面试“八股文”中，今天讲的是其中最常问的一个--Vue中的依赖收集。本文也将从代码层面，讲清楚关于依赖收集的几个问题。\n-  收集的依赖是什么？（what）\n-  怎么收集的依赖？  （how）\n-  什么时候收集？     (when)\n\n至于为什么要收集依赖(why)，现在就可以先告诉答案。**收集依赖，其核心作用是在数据发生变化的时候可以做出相应的动作，比如刷新视图**，为了执行这一动作，我们就得知道是谁在什么时候发生了变化，所以我们要收集依赖。\n\n\n下面我们结合代码，尽可能通俗的讲解关于上述的三个问题：\n\n\n\n在搞清楚依赖收集之前，先把源码中几个概念性的东西说明一下，建议下载[Vue3源码](https://github.com/vuejs/core)进行对照着看：\n-  **Dep**: 本质上是一个Map实例，同时在map实例上绑定一个celanup函数和一个computed属性。\n- **ReactiveEffect**: 相当于2.x版本中的Watcher类, 里头有一个deps数组，用来存dep, 每个实例里面都有一个track_id用来标识唯一性。\n\n- **effect函数**： 里头实例化一个ReactiveEffect对象，同时绑定一些options, 返回值是一个runner,实际上是对ReactiveEffect对象行为的一种业务封装。\n\n下面以一行简单的代码开始关于依赖收集的探索。\n```Javascript\nconst num = ref(1);\n```\n```Javascript\n// packages/reactivity/src/ref.ts\nexport function ref<T>(value: T): Ref<UnwrapRef<T>>\nexport function ref<T = any>(): Ref<T | undefined>\nexport function ref(value?: unknown) {\n  return createRef(value, false)\n}\n```\nref函数主要是对createRef做了一个函数包装，主要内容看到createRef函数。\n\n```Javascript\n// packages/reactivity/src/ref.ts\nfunction createRef(rawValue: unknown, shallow: boolean) {\n  if (isRef(rawValue)) {\n    return rawValue\n  }\n  return new RefImpl(rawValue, shallow)\n}\n```\ncreateRef函数在这里对原始数据rawValue做了一个判断，如果数据本身就是响应式数据了，就直接返回它本身，如果不是，就返回一个实例化的RefImpl对象。\n\n\n```Javascript\n// packages/reactivity/src/ref.ts\nclass RefImpl<T> {\n  private _value: T\n  private _rawValue: T\n\n  public dep?: Dep = undefined\n  public readonly __v_isRef = true\n\n  constructor(\n    value: T,\n    public readonly __v_isShallow: boolean,\n  ) {\n    this._rawValue = __v_isShallow ? value : toRaw(value)\n    this._value = __v_isShallow ? value : toReactive(value)\n  }\n\n  get value() {\n    trackRefValue(this)\n    return this._value\n  }\n\n  set value(newVal) {\n    const useDirectValue =\n      this.__v_isShallow || isShallow(newVal) || isReadonly(newVal)\n    newVal = useDirectValue ? newVal : toRaw(newVal)\n    if (hasChanged(newVal, this._rawValue)) {\n      this._rawValue = newVal\n      this._value = useDirectValue ? newVal : toReactive(newVal)\n      triggerRefValue(this, DirtyLevels.Dirty, newVal)\n    }\n  }\n}\n```\n重点来了，RefImple类里头，才是真正包含了从原始数据变成响应式数据，以及收集依赖的逻辑。在一个refImpl实例中，里面有一个dep对象，初始值是undefined， 这个dep会这trackRefValue函数执行的过程中被赋值。\n\n下面代码从17-21(get value())行，就是依赖收集的过程：当一个ref型响应式数据通过.value访问时，会触发RefImpl实例中的getter。它会首先执行一个trackValue函数，然后再返回_value值，所以接下来重点看关注trackValue函数，所以**依赖是在数据被访问的时候触发的**。\n\n```Javascript\n// packages/reactivity/src/ref.ts\nexport function trackRefValue(ref: RefBase<any>) {\n  if (shouldTrack && activeEffect) {\n    ref = toRaw(ref)\n    trackEffect(\n      activeEffect,\n      (ref.dep ??= createDep(\n        () => (ref.dep = undefined),\n        ref instanceof ComputedRefImpl ? ref : undefined,\n      )),\n      __DEV__\n        ? {\n            target: ref,\n            type: TrackOpTypes.GET,\n            key: 'value',\n          }\n        : void 0,\n    )\n  }\n}u\n```\n\ntrackRefValue函数中有两个变量，shouldTrack和activeEffect，暂时我们不去理会它们，只要知道shouldTrack是一个布尔值，activeEffect是一个RectiveEffect实例。\n\n在shouldTrack值为true且activeEffect有值的情况下，首先会将ref转成原始值，然后再执行trackEffect函数。\n\n在执行trackEffect函数的中，第一个是activeEffect, 在任意时刻它在全局是具有唯一性的；第二个是ref.dep, 其中给ref.dep的赋值函数createDep返回一个Dep实例，前面说过的，本质是个map; 第三个函数是个对象，是关于开发环境下debug的一些配置。\n\n在这里，我们可以看到，之前说个的ref实例中原来是undefined的ref.dep赋值，就在此处。\n\n```Javascript\n// packages/reactivity/src/effect.ts\nexport function trackEffect(\n  effect: ReactiveEffect,\n  dep: Dep,\n  debuggerEventExtraInfo?: DebuggerEventExtraInfo,\n) {\n  if (dep.get(effect) !== effect._trackId) {\n    dep.set(effect, effect._trackId)\n    const oldDep = effect.deps[effect._depsLength]\n    if (oldDep !== dep) {\n      if (oldDep) {\n        cleanupDepEffect(oldDep, effect)\n      }\n      effect.deps[effect._depsLength++] = dep\n    } else {\n      effect._depsLength++\n    }\n    if (__DEV__) {\n      effect.onTrack?.(extend({ effect }, debuggerEventExtraInfo!))\n    }\n  }\n}\n```\ntrackEffect函数绝对是依赖收集重头戏中的重头戏。\n\n首先上来就是一个判断，dep, 也就是ref中的dep，本质是个map，判断里面是否存在对应的effect, 如果没有，就执行接下来的操作。\n\ndep将effect也就是activeEffect作为键，其_trackId作为值添加到dep，**所以我们说的收集的依赖指的就是effect对象**。同时我们得到了一个关于**dep和effect之间的第一关系，即一个dep可以对应多个effect**。\n\n接着，将effects实例中deps数组中最后一个值取出来与当前的dep值进行比对，看是否是同一个值如果不是同一个值，而且oldDep是有值的，那么就执行cleanupDepEffect操作。如果oldDep为空值，就跳过这一步，直接往effect.deps中添加dep。因此，我们在这里得到了关于dep和effect第二个结论，**一个effect可以对应多个dep**。\n\n代码还有一部分，接着往下看，在oldDep不等于当前dep的时候，直接对effec_depsLength进行加操作，也就是说，effect.deps值没有变，但是_depsLength值却超出了deps数组边界的情况，这也就是为什么上面要判断oldDep是否存在的原因。\n\n\n由上面上面两个结论我们可以得出，一个dep中可以对应多个effect, 一个effect也可以对应多个dep, 因此dep和effect的关系是多对多的关系。\n\n### 总结\n\n-  收集的依赖是什么？（what）\n  > 我们常说的收集的依赖是effect对象\n\n-  怎么收集的依赖？  （how）\n > 判断当前数据dep中有没有activeEffct, 没有就加进去。把大象关进冰箱里要几步！！！\n-  什么时候收集？     (when)\n> 在数据被访问时，触发getter，进行依赖收集\n","slug":"Dependencies-collecting of vue3","published":1,"date":"2025-05-23T11:39:55.334Z","updated":"2025-05-23T11:39:55.334Z","comments":1,"layout":"post","photos":[],"_id":"cmb0qjkpp000150upda0za9m4","content":"<p>从Vue开始较大范围在前端应用开始，关于Vue一些基础知识的讨论和面试问题就在开发圈子里基本上就跟前几年的股票和基金一样，楼下摆摊卖酱香饼的阿姨都能说上几句那种。找过前端开发工作或者正在找开发工作的前端都知道，面试官基本上都有那么几个常问的问题，而网上呢也有那么一套可以用来背诵的“八股文”，自己懂多少没有关系，应付面试官还是够的，可以算是屡试不爽吧。</p>\n<p>背诵面试八股文无可厚非的，可以说是每一个找工作的人都干过和必须干的事情，因为我们都要工作，都要恰饭。只有恰上饭，才能去谈些伟大的理想。背“八股文”本是一种捷径，尤其是本身对一门技术不是特别了解的开发者，就是那种刚刚能使用它那种。</p>\n<p>在众多关于Vue的面试“八股文”中，今天讲的是其中最常问的一个–Vue中的依赖收集。本文也将从代码层面，讲清楚关于依赖收集的几个问题。</p>\n<ul>\n<li>收集的依赖是什么？（what）</li>\n<li>怎么收集的依赖？  （how）</li>\n<li>什么时候收集？     (when)</li>\n</ul>\n<p>至于为什么要收集依赖(why)，现在就可以先告诉答案。<strong>收集依赖，其核心作用是在数据发生变化的时候可以做出相应的动作，比如刷新视图</strong>，为了执行这一动作，我们就得知道是谁在什么时候发生了变化，所以我们要收集依赖。</p>\n<p>下面我们结合代码，尽可能通俗的讲解关于上述的三个问题：</p>\n<p>在搞清楚依赖收集之前，先把源码中几个概念性的东西说明一下，建议下载<a href=\"https://github.com/vuejs/core\">Vue3源码</a>进行对照着看：</p>\n<ul>\n<li><p><strong>Dep</strong>: 本质上是一个Map实例，同时在map实例上绑定一个celanup函数和一个computed属性。</p>\n</li>\n<li><p><strong>ReactiveEffect</strong>: 相当于2.x版本中的Watcher类, 里头有一个deps数组，用来存dep, 每个实例里面都有一个track_id用来标识唯一性。</p>\n</li>\n<li><p><strong>effect函数</strong>： 里头实例化一个ReactiveEffect对象，同时绑定一些options, 返回值是一个runner,实际上是对ReactiveEffect对象行为的一种业务封装。</p>\n</li>\n</ul>\n<p>下面以一行简单的代码开始关于依赖收集的探索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> num = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> ref&lt;T&gt;(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-title class_\">Ref</span>&lt;<span class=\"hljs-title class_\">UnwrapRef</span>&lt;T&gt;&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> ref&lt;T = any&gt;(): <span class=\"hljs-title class_\">Ref</span>&lt;T | <span class=\"hljs-literal\">undefined</span>&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-params\">value?: unknown</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createRef</span>(value, <span class=\"hljs-literal\">false</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ref函数主要是对createRef做了一个函数包装，主要内容看到createRef函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRef</span>(<span class=\"hljs-params\">rawValue: unknown, shallow: boolean</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isRef</span>(rawValue)) &#123;<br>    <span class=\"hljs-keyword\">return</span> rawValue<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefImpl</span>(rawValue, shallow)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>createRef函数在这里对原始数据rawValue做了一个判断，如果数据本身就是响应式数据了，就直接返回它本身，如果不是，就返回一个实例化的RefImpl对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefImpl</span>&lt;T&gt; &#123;<br>  private <span class=\"hljs-attr\">_value</span>: T<br>  private <span class=\"hljs-attr\">_rawValue</span>: T<br><br>  public dep?: <span class=\"hljs-title class_\">Dep</span> = <span class=\"hljs-literal\">undefined</span><br>  public readonly __v_isRef = <span class=\"hljs-literal\">true</span><br><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">    value: T,</span><br><span class=\"hljs-params\">    public readonly __v_isShallow: boolean,</span><br><span class=\"hljs-params\">  </span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toRaw</span>(value)<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toReactive</span>(value)<br>  &#125;<br><br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>() &#123;<br>    <span class=\"hljs-title function_\">trackRefValue</span>(<span class=\"hljs-variable language_\">this</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> useDirectValue =<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__v_isShallow</span> || <span class=\"hljs-title function_\">isShallow</span>(newVal) || <span class=\"hljs-title function_\">isReadonly</span>(newVal)<br>    newVal = useDirectValue ? newVal : <span class=\"hljs-title function_\">toRaw</span>(newVal)<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">hasChanged</span>(newVal, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span>)) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = newVal<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = useDirectValue ? newVal : <span class=\"hljs-title function_\">toReactive</span>(newVal)<br>      <span class=\"hljs-title function_\">triggerRefValue</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-title class_\">DirtyLevels</span>.<span class=\"hljs-property\">Dirty</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重点来了，RefImple类里头，才是真正包含了从原始数据变成响应式数据，以及收集依赖的逻辑。在一个refImpl实例中，里面有一个dep对象，初始值是undefined， 这个dep会这trackRefValue函数执行的过程中被赋值。</p>\n<p>下面代码从17-21(get value())行，就是依赖收集的过程：当一个ref型响应式数据通过.value访问时，会触发RefImpl实例中的getter。它会首先执行一个trackValue函数，然后再返回_value值，所以接下来重点看关注trackValue函数，所以<strong>依赖是在数据被访问的时候触发的</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">trackRefValue</span>(<span class=\"hljs-params\">ref: RefBase&lt;any&gt;</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (shouldTrack &amp;&amp; activeEffect) &#123;<br>    ref = <span class=\"hljs-title function_\">toRaw</span>(ref)<br>    <span class=\"hljs-title function_\">trackEffect</span>(<br>      activeEffect,<br>      (ref.<span class=\"hljs-property\">dep</span> ??= <span class=\"hljs-title function_\">createDep</span>(<br>        <span class=\"hljs-function\">() =&gt;</span> (ref.<span class=\"hljs-property\">dep</span> = <span class=\"hljs-literal\">undefined</span>),<br>        ref <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">ComputedRefImpl</span> ? ref : <span class=\"hljs-literal\">undefined</span>,<br>      )),<br>      __DEV__<br>        ? &#123;<br>            <span class=\"hljs-attr\">target</span>: ref,<br>            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">TrackOpTypes</span>.<span class=\"hljs-property\">GET</span>,<br>            <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>          &#125;<br>        : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>,<br>    )<br>  &#125;<br>&#125;u<br></code></pre></td></tr></table></figure>\n\n<p>trackRefValue函数中有两个变量，shouldTrack和activeEffect，暂时我们不去理会它们，只要知道shouldTrack是一个布尔值，activeEffect是一个RectiveEffect实例。</p>\n<p>在shouldTrack值为true且activeEffect有值的情况下，首先会将ref转成原始值，然后再执行trackEffect函数。</p>\n<p>在执行trackEffect函数的中，第一个是activeEffect, 在任意时刻它在全局是具有唯一性的；第二个是ref.dep, 其中给ref.dep的赋值函数createDep返回一个Dep实例，前面说过的，本质是个map; 第三个函数是个对象，是关于开发环境下debug的一些配置。</p>\n<p>在这里，我们可以看到，之前说个的ref实例中原来是undefined的ref.dep赋值，就在此处。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/effect.ts</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">trackEffect</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">  effect: ReactiveEffect,</span><br><span class=\"hljs-params\">  dep: Dep,</span><br><span class=\"hljs-params\">  debuggerEventExtraInfo?: DebuggerEventExtraInfo,</span><br><span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (dep.<span class=\"hljs-title function_\">get</span>(effect) !== effect.<span class=\"hljs-property\">_trackId</span>) &#123;<br>    dep.<span class=\"hljs-title function_\">set</span>(effect, effect.<span class=\"hljs-property\">_trackId</span>)<br>    <span class=\"hljs-keyword\">const</span> oldDep = effect.<span class=\"hljs-property\">deps</span>[effect.<span class=\"hljs-property\">_depsLength</span>]<br>    <span class=\"hljs-keyword\">if</span> (oldDep !== dep) &#123;<br>      <span class=\"hljs-keyword\">if</span> (oldDep) &#123;<br>        <span class=\"hljs-title function_\">cleanupDepEffect</span>(oldDep, effect)<br>      &#125;<br>      effect.<span class=\"hljs-property\">deps</span>[effect.<span class=\"hljs-property\">_depsLength</span>++] = dep<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      effect.<span class=\"hljs-property\">_depsLength</span>++<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (__DEV__) &#123;<br>      effect.<span class=\"hljs-property\">onTrack</span>?.(<span class=\"hljs-title function_\">extend</span>(&#123; effect &#125;, debuggerEventExtraInfo!))<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>trackEffect函数绝对是依赖收集重头戏中的重头戏。</p>\n<p>首先上来就是一个判断，dep, 也就是ref中的dep，本质是个map，判断里面是否存在对应的effect, 如果没有，就执行接下来的操作。</p>\n<p>dep将effect也就是activeEffect作为键，其_trackId作为值添加到dep，<strong>所以我们说的收集的依赖指的就是effect对象</strong>。同时我们得到了一个关于<strong>dep和effect之间的第一关系，即一个dep可以对应多个effect</strong>。</p>\n<p>接着，将effects实例中deps数组中最后一个值取出来与当前的dep值进行比对，看是否是同一个值如果不是同一个值，而且oldDep是有值的，那么就执行cleanupDepEffect操作。如果oldDep为空值，就跳过这一步，直接往effect.deps中添加dep。因此，我们在这里得到了关于dep和effect第二个结论，<strong>一个effect可以对应多个dep</strong>。</p>\n<p>代码还有一部分，接着往下看，在oldDep不等于当前dep的时候，直接对effec_depsLength进行加操作，也就是说，effect.deps值没有变，但是_depsLength值却超出了deps数组边界的情况，这也就是为什么上面要判断oldDep是否存在的原因。</p>\n<p>由上面上面两个结论我们可以得出，一个dep中可以对应多个effect, 一个effect也可以对应多个dep, 因此dep和effect的关系是多对多的关系。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>收集的依赖是什么？（what）</p>\n<blockquote>\n<p>我们常说的收集的依赖是effect对象</p>\n</blockquote>\n</li>\n<li><p>怎么收集的依赖？  （how）</p>\n<blockquote>\n<p>判断当前数据dep中有没有activeEffct, 没有就加进去。把大象关进冰箱里要几步！！！</p>\n</blockquote>\n</li>\n<li><p>什么时候收集？     (when)</p>\n<blockquote>\n<p>在数据被访问时，触发getter，进行依赖收集</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"","more":"<p>从Vue开始较大范围在前端应用开始，关于Vue一些基础知识的讨论和面试问题就在开发圈子里基本上就跟前几年的股票和基金一样，楼下摆摊卖酱香饼的阿姨都能说上几句那种。找过前端开发工作或者正在找开发工作的前端都知道，面试官基本上都有那么几个常问的问题，而网上呢也有那么一套可以用来背诵的“八股文”，自己懂多少没有关系，应付面试官还是够的，可以算是屡试不爽吧。</p>\n<p>背诵面试八股文无可厚非的，可以说是每一个找工作的人都干过和必须干的事情，因为我们都要工作，都要恰饭。只有恰上饭，才能去谈些伟大的理想。背“八股文”本是一种捷径，尤其是本身对一门技术不是特别了解的开发者，就是那种刚刚能使用它那种。</p>\n<p>在众多关于Vue的面试“八股文”中，今天讲的是其中最常问的一个–Vue中的依赖收集。本文也将从代码层面，讲清楚关于依赖收集的几个问题。</p>\n<ul>\n<li>收集的依赖是什么？（what）</li>\n<li>怎么收集的依赖？  （how）</li>\n<li>什么时候收集？     (when)</li>\n</ul>\n<p>至于为什么要收集依赖(why)，现在就可以先告诉答案。<strong>收集依赖，其核心作用是在数据发生变化的时候可以做出相应的动作，比如刷新视图</strong>，为了执行这一动作，我们就得知道是谁在什么时候发生了变化，所以我们要收集依赖。</p>\n<p>下面我们结合代码，尽可能通俗的讲解关于上述的三个问题：</p>\n<p>在搞清楚依赖收集之前，先把源码中几个概念性的东西说明一下，建议下载<a href=\"https://github.com/vuejs/core\">Vue3源码</a>进行对照着看：</p>\n<ul>\n<li><p><strong>Dep</strong>: 本质上是一个Map实例，同时在map实例上绑定一个celanup函数和一个computed属性。</p>\n</li>\n<li><p><strong>ReactiveEffect</strong>: 相当于2.x版本中的Watcher类, 里头有一个deps数组，用来存dep, 每个实例里面都有一个track_id用来标识唯一性。</p>\n</li>\n<li><p><strong>effect函数</strong>： 里头实例化一个ReactiveEffect对象，同时绑定一些options, 返回值是一个runner,实际上是对ReactiveEffect对象行为的一种业务封装。</p>\n</li>\n</ul>\n<p>下面以一行简单的代码开始关于依赖收集的探索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-keyword\">const</span> num = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> ref&lt;T&gt;(<span class=\"hljs-attr\">value</span>: T): <span class=\"hljs-title class_\">Ref</span>&lt;<span class=\"hljs-title class_\">UnwrapRef</span>&lt;T&gt;&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> ref&lt;T = any&gt;(): <span class=\"hljs-title class_\">Ref</span>&lt;T | <span class=\"hljs-literal\">undefined</span>&gt;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-params\">value?: unknown</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createRef</span>(value, <span class=\"hljs-literal\">false</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ref函数主要是对createRef做了一个函数包装，主要内容看到createRef函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRef</span>(<span class=\"hljs-params\">rawValue: unknown, shallow: boolean</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isRef</span>(rawValue)) &#123;<br>    <span class=\"hljs-keyword\">return</span> rawValue<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefImpl</span>(rawValue, shallow)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>createRef函数在这里对原始数据rawValue做了一个判断，如果数据本身就是响应式数据了，就直接返回它本身，如果不是，就返回一个实例化的RefImpl对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefImpl</span>&lt;T&gt; &#123;<br>  private <span class=\"hljs-attr\">_value</span>: T<br>  private <span class=\"hljs-attr\">_rawValue</span>: T<br><br>  public dep?: <span class=\"hljs-title class_\">Dep</span> = <span class=\"hljs-literal\">undefined</span><br>  public readonly __v_isRef = <span class=\"hljs-literal\">true</span><br><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">    value: T,</span><br><span class=\"hljs-params\">    public readonly __v_isShallow: boolean,</span><br><span class=\"hljs-params\">  </span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toRaw</span>(value)<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toReactive</span>(value)<br>  &#125;<br><br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>() &#123;<br>    <span class=\"hljs-title function_\">trackRefValue</span>(<span class=\"hljs-variable language_\">this</span>)<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> useDirectValue =<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__v_isShallow</span> || <span class=\"hljs-title function_\">isShallow</span>(newVal) || <span class=\"hljs-title function_\">isReadonly</span>(newVal)<br>    newVal = useDirectValue ? newVal : <span class=\"hljs-title function_\">toRaw</span>(newVal)<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">hasChanged</span>(newVal, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span>)) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = newVal<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = useDirectValue ? newVal : <span class=\"hljs-title function_\">toReactive</span>(newVal)<br>      <span class=\"hljs-title function_\">triggerRefValue</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-title class_\">DirtyLevels</span>.<span class=\"hljs-property\">Dirty</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重点来了，RefImple类里头，才是真正包含了从原始数据变成响应式数据，以及收集依赖的逻辑。在一个refImpl实例中，里面有一个dep对象，初始值是undefined， 这个dep会这trackRefValue函数执行的过程中被赋值。</p>\n<p>下面代码从17-21(get value())行，就是依赖收集的过程：当一个ref型响应式数据通过.value访问时，会触发RefImpl实例中的getter。它会首先执行一个trackValue函数，然后再返回_value值，所以接下来重点看关注trackValue函数，所以<strong>依赖是在数据被访问的时候触发的</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/ref.ts</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">trackRefValue</span>(<span class=\"hljs-params\">ref: RefBase&lt;any&gt;</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (shouldTrack &amp;&amp; activeEffect) &#123;<br>    ref = <span class=\"hljs-title function_\">toRaw</span>(ref)<br>    <span class=\"hljs-title function_\">trackEffect</span>(<br>      activeEffect,<br>      (ref.<span class=\"hljs-property\">dep</span> ??= <span class=\"hljs-title function_\">createDep</span>(<br>        <span class=\"hljs-function\">() =&gt;</span> (ref.<span class=\"hljs-property\">dep</span> = <span class=\"hljs-literal\">undefined</span>),<br>        ref <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">ComputedRefImpl</span> ? ref : <span class=\"hljs-literal\">undefined</span>,<br>      )),<br>      __DEV__<br>        ? &#123;<br>            <span class=\"hljs-attr\">target</span>: ref,<br>            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">TrackOpTypes</span>.<span class=\"hljs-property\">GET</span>,<br>            <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;value&#x27;</span>,<br>          &#125;<br>        : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>,<br>    )<br>  &#125;<br>&#125;u<br></code></pre></td></tr></table></figure>\n\n<p>trackRefValue函数中有两个变量，shouldTrack和activeEffect，暂时我们不去理会它们，只要知道shouldTrack是一个布尔值，activeEffect是一个RectiveEffect实例。</p>\n<p>在shouldTrack值为true且activeEffect有值的情况下，首先会将ref转成原始值，然后再执行trackEffect函数。</p>\n<p>在执行trackEffect函数的中，第一个是activeEffect, 在任意时刻它在全局是具有唯一性的；第二个是ref.dep, 其中给ref.dep的赋值函数createDep返回一个Dep实例，前面说过的，本质是个map; 第三个函数是个对象，是关于开发环境下debug的一些配置。</p>\n<p>在这里，我们可以看到，之前说个的ref实例中原来是undefined的ref.dep赋值，就在此处。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Javascript\"><span class=\"hljs-comment\">// packages/reactivity/src/effect.ts</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">trackEffect</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">  effect: ReactiveEffect,</span><br><span class=\"hljs-params\">  dep: Dep,</span><br><span class=\"hljs-params\">  debuggerEventExtraInfo?: DebuggerEventExtraInfo,</span><br><span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (dep.<span class=\"hljs-title function_\">get</span>(effect) !== effect.<span class=\"hljs-property\">_trackId</span>) &#123;<br>    dep.<span class=\"hljs-title function_\">set</span>(effect, effect.<span class=\"hljs-property\">_trackId</span>)<br>    <span class=\"hljs-keyword\">const</span> oldDep = effect.<span class=\"hljs-property\">deps</span>[effect.<span class=\"hljs-property\">_depsLength</span>]<br>    <span class=\"hljs-keyword\">if</span> (oldDep !== dep) &#123;<br>      <span class=\"hljs-keyword\">if</span> (oldDep) &#123;<br>        <span class=\"hljs-title function_\">cleanupDepEffect</span>(oldDep, effect)<br>      &#125;<br>      effect.<span class=\"hljs-property\">deps</span>[effect.<span class=\"hljs-property\">_depsLength</span>++] = dep<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      effect.<span class=\"hljs-property\">_depsLength</span>++<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (__DEV__) &#123;<br>      effect.<span class=\"hljs-property\">onTrack</span>?.(<span class=\"hljs-title function_\">extend</span>(&#123; effect &#125;, debuggerEventExtraInfo!))<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>trackEffect函数绝对是依赖收集重头戏中的重头戏。</p>\n<p>首先上来就是一个判断，dep, 也就是ref中的dep，本质是个map，判断里面是否存在对应的effect, 如果没有，就执行接下来的操作。</p>\n<p>dep将effect也就是activeEffect作为键，其_trackId作为值添加到dep，<strong>所以我们说的收集的依赖指的就是effect对象</strong>。同时我们得到了一个关于<strong>dep和effect之间的第一关系，即一个dep可以对应多个effect</strong>。</p>\n<p>接着，将effects实例中deps数组中最后一个值取出来与当前的dep值进行比对，看是否是同一个值如果不是同一个值，而且oldDep是有值的，那么就执行cleanupDepEffect操作。如果oldDep为空值，就跳过这一步，直接往effect.deps中添加dep。因此，我们在这里得到了关于dep和effect第二个结论，<strong>一个effect可以对应多个dep</strong>。</p>\n<p>代码还有一部分，接着往下看，在oldDep不等于当前dep的时候，直接对effec_depsLength进行加操作，也就是说，effect.deps值没有变，但是_depsLength值却超出了deps数组边界的情况，这也就是为什么上面要判断oldDep是否存在的原因。</p>\n<p>由上面上面两个结论我们可以得出，一个dep中可以对应多个effect, 一个effect也可以对应多个dep, 因此dep和effect的关系是多对多的关系。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li><p>收集的依赖是什么？（what）</p>\n<blockquote>\n<p>我们常说的收集的依赖是effect对象</p>\n</blockquote>\n</li>\n<li><p>怎么收集的依赖？  （how）</p>\n<blockquote>\n<p>判断当前数据dep中有没有activeEffct, 没有就加进去。把大象关进冰箱里要几步！！！</p>\n</blockquote>\n</li>\n<li><p>什么时候收集？     (when)</p>\n<blockquote>\n<p>在数据被访问时，触发getter，进行依赖收集</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Javascript中两种不同的继承方式对比","_content":"\n# Dog.prototype = new Animal() 和 Dog.prototype.proto = Animal.prototype的两种继承方式的区别\n\n\n## 1. Dog.prototype = new Animal()\n\n### 语法和机制\n- **​目的**：通过创建 Animal 的实例来继承其原型链。\n- ​**底层逻辑**：将 Dog.prototype 替换为一个新的 Animal 实例。\n- **​原型链结构**：\n\n```javascript\nDog.prototype → Animal 实例 → Animal.prototype → Object.prototype → null\n```\n\n因此，Dog 的实例通过原型链可以访问 Animal 实例的属性和 Animal.prototype 的方法。\n\n### ​特点\n\n- **​调用父类构造函数**： 会执行 Animal() 构造函数，初始化父类属性（如 this.name)\n- **继承实例属性**：Dog.prototype 会包含 Animal 实例的属性（如 name），即使这些属性是实例级别的。\n\n- **覆盖原有原型**：替换 Dog.prototype 后，原先定义在 Dog.prototype 上的方法会被丢失，需重新添加。\n​- **constructor 问题**：Dog.prototype.constructor 会指向 Animal，需手动修正：\n``` javascript\n  Dog.prototype.constructor = Dog;\n```\n​示例\n``` javascript\n  function Animal() { this.name = \"Animal\"; }\n  Animal.prototype.eat = function() { console.log(\"Eat\"); };\n\n  function Dog() {}\n  Dog.prototype = new Animal(); // 继承\n  Dog.prototype.constructor = Dog; // 修复 constructor\n\n  const dog = new Dog();\n  console.log(dog.name); // \"Animal\"（继承自 Animal 实例）\n  dog.eat();           // \"Eat\"（继承自 Animal.prototype）\n```\n\n## ​2. Dog.prototype.proto = Animal.prototype\n\n### ​语法和机制\n\n- ​目的：直接让 Dog.prototype 的 proto 属性（即 __proto__）指向 Animal.prototype。\n\n- ​底层逻辑：修改 Dog.prototype 的原型链。\n\n​-  原型链结构：\n```javascript\n  Dog.prototype → Animal.prototype → Object.prototype → null\n```\n\n因此，Dog 的实例直接通过原型链访问 Animal.prototype 的方法，但不会继承 Animal 实例的属性。\n### ​特点\n\n- **​不调用父类构造函数**：不会执行 Animal()，避免副作用（如初始化逻辑）。\n\n​- **仅继承原型方法**：Dog 的实例只能访问 Animal.prototype 的方法，无法获取 Animal 实例的属性（如 name）。\n\n- **​保留原有原型**：不会覆盖 Dog.prototype 上已定义的方法。\n\n- **​非标准操作**：直接修改 proto（或 __proto__）是非标准的，可能影响性能，推荐用 Object.setPrototypeOf()：\n```javascript\nObject.setPrototypeOf(Dog.prototype, Animal.prototype);\n```\n​示例\n```javascript\nfunction Animal() { this.name = \"Animal\"; }\nAnimal.prototype.eat = function() { console.log(\"Eat\"); };\n\nfunction Dog() {}\nDog.prototype.proto = Animal.prototype; // 直接修改 proto\n\nconst dog = new Dog();\nconsole.log(dog.name); // undefined（未继承 Animal 实例属性）\ndog.eat();           // \"Eat\"（继承自 Animal.prototype）\n\n```\n\n### ​关键区别总结\n\n### ​**关键区别总结**\n\n| ​**特性**                | `Dog.prototype = new Animal()`                          | `Dog.prototype.__proto__ = Animal.prototype`         |\n|-------------------------|--------------------------------------------------------|-----------------------------------------------------|\n| ​**调用父类构造函数**     | ✅ 是（执行 `Animal()`，初始化父类实例属性）            | ❌ 否（直接链接原型，不调用构造函数）                 |\n| ​**继承实例属性**         | ✅ 是（继承 `Animal` 实例的属性，如 `this.name`）       | ❌ 否（仅继承原型方法，不包含实例属性）               |\n| ​**覆盖原型对象**         | ✅ 是（完全替换 `Dog.prototype` 为新实例）             | ❌ 否（仅修改原型的 `__proto__`，保留原有属性和方法） |\n| ​**constructor修正**    | ✅ 需手动修复（`Dog.prototype.constructor = Dog`）     | ✅ 通常无需修复（原型链未改变构造函数引用）           |\n| ​**兼容性**               | ⚠️ 传统写法，但可能引发副作用（如多余属性继承）       | ⚠️ 非标准操作（直接修改 `__proto__` 可能影响性能）   |\n| ​**推荐程度**             | ❌ 不推荐（问题多，已过时）                             | ⚠️ 慎用（可用 `Object.setPrototypeOf()` 替代）         |\n| ​**原型链结构**           | `Dog.prototype → Animal 实例 → Animal.prototype`         | `Dog.prototype → Animal.prototype → Object.prototype`   |\n| ​**是否继承父类方法**     | ✅ 是（通过 `Animal.prototype`）                       | ✅ 是（直接链接到 `Animal.prototype`）                |\n| ​**是否继承父类实例方法** | ❌ 否（仅继承原型方法，实例属性不会被继承）             | ❌ 否（同上）                                        |\n| ​**典型用途**             | 早期原型链继承（已不推荐）                            | 理论原型链扩展（极少使用，多用 `Object.create()`）   |\n| ​**替代方案**             | `Object.create(Animal.prototype)` + 手动初始化属性     | `Object.setPrototypeOf(Dog.prototype, Animal.prototype)` |\n| ​**ES6 推荐写法**         | `class Dog extends Animal {}`                           | `class Dog extends Animal {}`                         |\n\n### 补充说明\n- ​**Dog.prototype = new Animal() 的问题**：\n\n  - 强制调用父类构造函数，可能导致不必要的初始化逻辑（如 Animal 的 this.name）。\n  - 会将父类实例的属性（如 name）提升为 Dog.prototype 的属性，导致所有子类实例共享这些属性（可能引发意外行为）。\n\n- ​**Dog.prototype.__proto__ = Animal.prototype 的问题**：\n\n  - ​非标准操作：虽然浏览器支持，但 __proto__ 是内部属性，直接修改可能导致性能下降或兼容性问题。\n  - ​无法继承父类构造函数：子类实例仍需通过 new Dog() 创建，不会自动调用父类构造函数。\n\n\n### ​现代替代方案：\n\n​**Object.create()**：\n```javascript\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n```\n直接继承 Animal.prototype，不调用父类构造函数，更安全高效。\n\n​ES6 class 语法：\n```javascript\nclass Dog extends Animal {}\n```\n自动处理原型链和构造函数继承，代码更简洁清晰。","source":"_posts/Differences-between-two-kinds-inherit-approches.md","raw":"\n---\ntitle: Javascript中两种不同的继承方式对比\n---\n\n# Dog.prototype = new Animal() 和 Dog.prototype.proto = Animal.prototype的两种继承方式的区别\n\n\n## 1. Dog.prototype = new Animal()\n\n### 语法和机制\n- **​目的**：通过创建 Animal 的实例来继承其原型链。\n- ​**底层逻辑**：将 Dog.prototype 替换为一个新的 Animal 实例。\n- **​原型链结构**：\n\n```javascript\nDog.prototype → Animal 实例 → Animal.prototype → Object.prototype → null\n```\n\n因此，Dog 的实例通过原型链可以访问 Animal 实例的属性和 Animal.prototype 的方法。\n\n### ​特点\n\n- **​调用父类构造函数**： 会执行 Animal() 构造函数，初始化父类属性（如 this.name)\n- **继承实例属性**：Dog.prototype 会包含 Animal 实例的属性（如 name），即使这些属性是实例级别的。\n\n- **覆盖原有原型**：替换 Dog.prototype 后，原先定义在 Dog.prototype 上的方法会被丢失，需重新添加。\n​- **constructor 问题**：Dog.prototype.constructor 会指向 Animal，需手动修正：\n``` javascript\n  Dog.prototype.constructor = Dog;\n```\n​示例\n``` javascript\n  function Animal() { this.name = \"Animal\"; }\n  Animal.prototype.eat = function() { console.log(\"Eat\"); };\n\n  function Dog() {}\n  Dog.prototype = new Animal(); // 继承\n  Dog.prototype.constructor = Dog; // 修复 constructor\n\n  const dog = new Dog();\n  console.log(dog.name); // \"Animal\"（继承自 Animal 实例）\n  dog.eat();           // \"Eat\"（继承自 Animal.prototype）\n```\n\n## ​2. Dog.prototype.proto = Animal.prototype\n\n### ​语法和机制\n\n- ​目的：直接让 Dog.prototype 的 proto 属性（即 __proto__）指向 Animal.prototype。\n\n- ​底层逻辑：修改 Dog.prototype 的原型链。\n\n​-  原型链结构：\n```javascript\n  Dog.prototype → Animal.prototype → Object.prototype → null\n```\n\n因此，Dog 的实例直接通过原型链访问 Animal.prototype 的方法，但不会继承 Animal 实例的属性。\n### ​特点\n\n- **​不调用父类构造函数**：不会执行 Animal()，避免副作用（如初始化逻辑）。\n\n​- **仅继承原型方法**：Dog 的实例只能访问 Animal.prototype 的方法，无法获取 Animal 实例的属性（如 name）。\n\n- **​保留原有原型**：不会覆盖 Dog.prototype 上已定义的方法。\n\n- **​非标准操作**：直接修改 proto（或 __proto__）是非标准的，可能影响性能，推荐用 Object.setPrototypeOf()：\n```javascript\nObject.setPrototypeOf(Dog.prototype, Animal.prototype);\n```\n​示例\n```javascript\nfunction Animal() { this.name = \"Animal\"; }\nAnimal.prototype.eat = function() { console.log(\"Eat\"); };\n\nfunction Dog() {}\nDog.prototype.proto = Animal.prototype; // 直接修改 proto\n\nconst dog = new Dog();\nconsole.log(dog.name); // undefined（未继承 Animal 实例属性）\ndog.eat();           // \"Eat\"（继承自 Animal.prototype）\n\n```\n\n### ​关键区别总结\n\n### ​**关键区别总结**\n\n| ​**特性**                | `Dog.prototype = new Animal()`                          | `Dog.prototype.__proto__ = Animal.prototype`         |\n|-------------------------|--------------------------------------------------------|-----------------------------------------------------|\n| ​**调用父类构造函数**     | ✅ 是（执行 `Animal()`，初始化父类实例属性）            | ❌ 否（直接链接原型，不调用构造函数）                 |\n| ​**继承实例属性**         | ✅ 是（继承 `Animal` 实例的属性，如 `this.name`）       | ❌ 否（仅继承原型方法，不包含实例属性）               |\n| ​**覆盖原型对象**         | ✅ 是（完全替换 `Dog.prototype` 为新实例）             | ❌ 否（仅修改原型的 `__proto__`，保留原有属性和方法） |\n| ​**constructor修正**    | ✅ 需手动修复（`Dog.prototype.constructor = Dog`）     | ✅ 通常无需修复（原型链未改变构造函数引用）           |\n| ​**兼容性**               | ⚠️ 传统写法，但可能引发副作用（如多余属性继承）       | ⚠️ 非标准操作（直接修改 `__proto__` 可能影响性能）   |\n| ​**推荐程度**             | ❌ 不推荐（问题多，已过时）                             | ⚠️ 慎用（可用 `Object.setPrototypeOf()` 替代）         |\n| ​**原型链结构**           | `Dog.prototype → Animal 实例 → Animal.prototype`         | `Dog.prototype → Animal.prototype → Object.prototype`   |\n| ​**是否继承父类方法**     | ✅ 是（通过 `Animal.prototype`）                       | ✅ 是（直接链接到 `Animal.prototype`）                |\n| ​**是否继承父类实例方法** | ❌ 否（仅继承原型方法，实例属性不会被继承）             | ❌ 否（同上）                                        |\n| ​**典型用途**             | 早期原型链继承（已不推荐）                            | 理论原型链扩展（极少使用，多用 `Object.create()`）   |\n| ​**替代方案**             | `Object.create(Animal.prototype)` + 手动初始化属性     | `Object.setPrototypeOf(Dog.prototype, Animal.prototype)` |\n| ​**ES6 推荐写法**         | `class Dog extends Animal {}`                           | `class Dog extends Animal {}`                         |\n\n### 补充说明\n- ​**Dog.prototype = new Animal() 的问题**：\n\n  - 强制调用父类构造函数，可能导致不必要的初始化逻辑（如 Animal 的 this.name）。\n  - 会将父类实例的属性（如 name）提升为 Dog.prototype 的属性，导致所有子类实例共享这些属性（可能引发意外行为）。\n\n- ​**Dog.prototype.__proto__ = Animal.prototype 的问题**：\n\n  - ​非标准操作：虽然浏览器支持，但 __proto__ 是内部属性，直接修改可能导致性能下降或兼容性问题。\n  - ​无法继承父类构造函数：子类实例仍需通过 new Dog() 创建，不会自动调用父类构造函数。\n\n\n### ​现代替代方案：\n\n​**Object.create()**：\n```javascript\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\n```\n直接继承 Animal.prototype，不调用父类构造函数，更安全高效。\n\n​ES6 class 语法：\n```javascript\nclass Dog extends Animal {}\n```\n自动处理原型链和构造函数继承，代码更简洁清晰。","slug":"Differences-between-two-kinds-inherit-approches","published":1,"date":"2025-05-23T11:39:55.334Z","updated":"2025-05-23T11:39:55.334Z","comments":1,"layout":"post","photos":[],"_id":"cmb0qjkpr000250up21mk5ky1","content":"<h1 id=\"Dog-prototype-new-Animal-和-Dog-prototype-proto-Animal-prototype的两种继承方式的区别\"><a href=\"#Dog-prototype-new-Animal-和-Dog-prototype-proto-Animal-prototype的两种继承方式的区别\" class=\"headerlink\" title=\"Dog.prototype &#x3D; new Animal() 和 Dog.prototype.proto &#x3D; Animal.prototype的两种继承方式的区别\"></a>Dog.prototype &#x3D; new Animal() 和 Dog.prototype.proto &#x3D; Animal.prototype的两种继承方式的区别</h1><h2 id=\"1-Dog-prototype-new-Animal\"><a href=\"#1-Dog-prototype-new-Animal\" class=\"headerlink\" title=\"1. Dog.prototype &#x3D; new Animal()\"></a>1. Dog.prototype &#x3D; new Animal()</h2><h3 id=\"语法和机制\"><a href=\"#语法和机制\" class=\"headerlink\" title=\"语法和机制\"></a>语法和机制</h3><ul>\n<li><strong>​目的</strong>：通过创建 Animal 的实例来继承其原型链。</li>\n<li>​<strong>底层逻辑</strong>：将 Dog.prototype 替换为一个新的 Animal 实例。</li>\n<li><strong>​原型链结构</strong>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Animal</span> 实例 → <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-literal\">null</span><br></code></pre></td></tr></table></figure>\n\n<p>因此，Dog 的实例通过原型链可以访问 Animal 实例的属性和 Animal.prototype 的方法。</p>\n<h3 id=\"​特点\"><a href=\"#​特点\" class=\"headerlink\" title=\"​特点\"></a>​特点</h3><ul>\n<li><p><strong>​调用父类构造函数</strong>： 会执行 Animal() 构造函数，初始化父类属性（如 this.name)</p>\n</li>\n<li><p><strong>继承实例属性</strong>：Dog.prototype 会包含 Animal 实例的属性（如 name），即使这些属性是实例级别的。</p>\n</li>\n<li><p><strong>覆盖原有原型</strong>：替换 Dog.prototype 后，原先定义在 Dog.prototype 上的方法会被丢失，需重新添加。<br>​- <strong>constructor 问题</strong>：Dog.prototype.constructor 会指向 Animal，需手动修正：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Dog</span>;<br></code></pre></td></tr></table></figure>\n<p>​示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Animal</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Animal&quot;</span>; &#125;<br><span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">eat</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Eat&quot;</span>); &#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Dog</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Animal</span>(); <span class=\"hljs-comment\">// 继承</span><br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Dog</span>; <span class=\"hljs-comment\">// 修复 constructor</span><br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(dog.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// &quot;Animal&quot;（继承自 Animal 实例）</span><br>dog.<span class=\"hljs-title function_\">eat</span>();           <span class=\"hljs-comment\">// &quot;Eat&quot;（继承自 Animal.prototype）</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"​2-Dog-prototype-proto-Animal-prototype\"><a href=\"#​2-Dog-prototype-proto-Animal-prototype\" class=\"headerlink\" title=\"​2. Dog.prototype.proto &#x3D; Animal.prototype\"></a>​2. Dog.prototype.proto &#x3D; Animal.prototype</h2><h3 id=\"​语法和机制\"><a href=\"#​语法和机制\" class=\"headerlink\" title=\"​语法和机制\"></a>​语法和机制</h3><ul>\n<li><p>​目的：直接让 Dog.prototype 的 proto 属性（即 __proto__）指向 Animal.prototype。</p>\n</li>\n<li><p>​底层逻辑：修改 Dog.prototype 的原型链。</p>\n</li>\n</ul>\n<p>​-  原型链结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-literal\">null</span><br></code></pre></td></tr></table></figure>\n\n<p>因此，Dog 的实例直接通过原型链访问 Animal.prototype 的方法，但不会继承 Animal 实例的属性。</p>\n<h3 id=\"​特点-1\"><a href=\"#​特点-1\" class=\"headerlink\" title=\"​特点\"></a>​特点</h3><ul>\n<li><strong>​不调用父类构造函数</strong>：不会执行 Animal()，避免副作用（如初始化逻辑）。</li>\n</ul>\n<p>​- <strong>仅继承原型方法</strong>：Dog 的实例只能访问 Animal.prototype 的方法，无法获取 Animal 实例的属性（如 name）。</p>\n<ul>\n<li><p><strong>​保留原有原型</strong>：不会覆盖 Dog.prototype 上已定义的方法。</p>\n</li>\n<li><p><strong>​非标准操作</strong>：直接修改 proto（或 __proto__）是非标准的，可能影响性能，推荐用 Object.setPrototypeOf()：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">setPrototypeOf</span>(<span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>, <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br></code></pre></td></tr></table></figure>\n<p>​示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Animal</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Animal&quot;</span>; &#125;<br><span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">eat</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Eat&quot;</span>); &#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Dog</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">proto</span> = <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>; <span class=\"hljs-comment\">// 直接修改 proto</span><br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(dog.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// undefined（未继承 Animal 实例属性）</span><br>dog.<span class=\"hljs-title function_\">eat</span>();           <span class=\"hljs-comment\">// &quot;Eat&quot;（继承自 Animal.prototype）</span><br><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"​关键区别总结\"><a href=\"#​关键区别总结\" class=\"headerlink\" title=\"​关键区别总结\"></a>​关键区别总结</h3><h3 id=\"​关键区别总结-1\"><a href=\"#​关键区别总结-1\" class=\"headerlink\" title=\"​关键区别总结\"></a>​<strong>关键区别总结</strong></h3><table>\n<thead>\n<tr>\n<th>​<strong>特性</strong></th>\n<th><code>Dog.prototype = new Animal()</code></th>\n<th><code>Dog.prototype.__proto__ = Animal.prototype</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>​<strong>调用父类构造函数</strong></td>\n<td>✅ 是（执行 <code>Animal()</code>，初始化父类实例属性）</td>\n<td>❌ 否（直接链接原型，不调用构造函数）</td>\n</tr>\n<tr>\n<td>​<strong>继承实例属性</strong></td>\n<td>✅ 是（继承 <code>Animal</code> 实例的属性，如 <code>this.name</code>）</td>\n<td>❌ 否（仅继承原型方法，不包含实例属性）</td>\n</tr>\n<tr>\n<td>​<strong>覆盖原型对象</strong></td>\n<td>✅ 是（完全替换 <code>Dog.prototype</code> 为新实例）</td>\n<td>❌ 否（仅修改原型的 <code>__proto__</code>，保留原有属性和方法）</td>\n</tr>\n<tr>\n<td>​<strong>constructor修正</strong></td>\n<td>✅ 需手动修复（<code>Dog.prototype.constructor = Dog</code>）</td>\n<td>✅ 通常无需修复（原型链未改变构造函数引用）</td>\n</tr>\n<tr>\n<td>​<strong>兼容性</strong></td>\n<td>⚠️ 传统写法，但可能引发副作用（如多余属性继承）</td>\n<td>⚠️ 非标准操作（直接修改 <code>__proto__</code> 可能影响性能）</td>\n</tr>\n<tr>\n<td>​<strong>推荐程度</strong></td>\n<td>❌ 不推荐（问题多，已过时）</td>\n<td>⚠️ 慎用（可用 <code>Object.setPrototypeOf()</code> 替代）</td>\n</tr>\n<tr>\n<td>​<strong>原型链结构</strong></td>\n<td><code>Dog.prototype → Animal 实例 → Animal.prototype</code></td>\n<td><code>Dog.prototype → Animal.prototype → Object.prototype</code></td>\n</tr>\n<tr>\n<td>​<strong>是否继承父类方法</strong></td>\n<td>✅ 是（通过 <code>Animal.prototype</code>）</td>\n<td>✅ 是（直接链接到 <code>Animal.prototype</code>）</td>\n</tr>\n<tr>\n<td>​<strong>是否继承父类实例方法</strong></td>\n<td>❌ 否（仅继承原型方法，实例属性不会被继承）</td>\n<td>❌ 否（同上）</td>\n</tr>\n<tr>\n<td>​<strong>典型用途</strong></td>\n<td>早期原型链继承（已不推荐）</td>\n<td>理论原型链扩展（极少使用，多用 <code>Object.create()</code>）</td>\n</tr>\n<tr>\n<td>​<strong>替代方案</strong></td>\n<td><code>Object.create(Animal.prototype)</code> + 手动初始化属性</td>\n<td><code>Object.setPrototypeOf(Dog.prototype, Animal.prototype)</code></td>\n</tr>\n<tr>\n<td>​<strong>ES6 推荐写法</strong></td>\n<td><code>class Dog extends Animal &#123;&#125;</code></td>\n<td><code>class Dog extends Animal &#123;&#125;</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h3><ul>\n<li><p>​<strong>Dog.prototype &#x3D; new Animal() 的问题</strong>：</p>\n<ul>\n<li>强制调用父类构造函数，可能导致不必要的初始化逻辑（如 Animal 的 this.name）。</li>\n<li>会将父类实例的属性（如 name）提升为 Dog.prototype 的属性，导致所有子类实例共享这些属性（可能引发意外行为）。</li>\n</ul>\n</li>\n<li><p>​<strong>Dog.prototype.<strong>proto</strong> &#x3D; Animal.prototype 的问题</strong>：</p>\n<ul>\n<li>​非标准操作：虽然浏览器支持，但 <strong>proto</strong> 是内部属性，直接修改可能导致性能下降或兼容性问题。</li>\n<li>​无法继承父类构造函数：子类实例仍需通过 new Dog() 创建，不会自动调用父类构造函数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"​现代替代方案：\"><a href=\"#​现代替代方案：\" class=\"headerlink\" title=\"​现代替代方案：\"></a>​现代替代方案：</h3><p>​**Object.create()**：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Dog</span>;<br></code></pre></td></tr></table></figure>\n<p>直接继承 Animal.prototype，不调用父类构造函数，更安全高效。</p>\n<p>​ES6 class 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span> &#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>自动处理原型链和构造函数继承，代码更简洁清晰。</p>\n","excerpt":"","more":"<h1 id=\"Dog-prototype-new-Animal-和-Dog-prototype-proto-Animal-prototype的两种继承方式的区别\"><a href=\"#Dog-prototype-new-Animal-和-Dog-prototype-proto-Animal-prototype的两种继承方式的区别\" class=\"headerlink\" title=\"Dog.prototype &#x3D; new Animal() 和 Dog.prototype.proto &#x3D; Animal.prototype的两种继承方式的区别\"></a>Dog.prototype &#x3D; new Animal() 和 Dog.prototype.proto &#x3D; Animal.prototype的两种继承方式的区别</h1><h2 id=\"1-Dog-prototype-new-Animal\"><a href=\"#1-Dog-prototype-new-Animal\" class=\"headerlink\" title=\"1. Dog.prototype &#x3D; new Animal()\"></a>1. Dog.prototype &#x3D; new Animal()</h2><h3 id=\"语法和机制\"><a href=\"#语法和机制\" class=\"headerlink\" title=\"语法和机制\"></a>语法和机制</h3><ul>\n<li><strong>​目的</strong>：通过创建 Animal 的实例来继承其原型链。</li>\n<li>​<strong>底层逻辑</strong>：将 Dog.prototype 替换为一个新的 Animal 实例。</li>\n<li><strong>​原型链结构</strong>：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Animal</span> 实例 → <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-literal\">null</span><br></code></pre></td></tr></table></figure>\n\n<p>因此，Dog 的实例通过原型链可以访问 Animal 实例的属性和 Animal.prototype 的方法。</p>\n<h3 id=\"​特点\"><a href=\"#​特点\" class=\"headerlink\" title=\"​特点\"></a>​特点</h3><ul>\n<li><p><strong>​调用父类构造函数</strong>： 会执行 Animal() 构造函数，初始化父类属性（如 this.name)</p>\n</li>\n<li><p><strong>继承实例属性</strong>：Dog.prototype 会包含 Animal 实例的属性（如 name），即使这些属性是实例级别的。</p>\n</li>\n<li><p><strong>覆盖原有原型</strong>：替换 Dog.prototype 后，原先定义在 Dog.prototype 上的方法会被丢失，需重新添加。<br>​- <strong>constructor 问题</strong>：Dog.prototype.constructor 会指向 Animal，需手动修正：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Dog</span>;<br></code></pre></td></tr></table></figure>\n<p>​示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Animal</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Animal&quot;</span>; &#125;<br><span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">eat</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Eat&quot;</span>); &#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Dog</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Animal</span>(); <span class=\"hljs-comment\">// 继承</span><br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Dog</span>; <span class=\"hljs-comment\">// 修复 constructor</span><br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(dog.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// &quot;Animal&quot;（继承自 Animal 实例）</span><br>dog.<span class=\"hljs-title function_\">eat</span>();           <span class=\"hljs-comment\">// &quot;Eat&quot;（继承自 Animal.prototype）</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"​2-Dog-prototype-proto-Animal-prototype\"><a href=\"#​2-Dog-prototype-proto-Animal-prototype\" class=\"headerlink\" title=\"​2. Dog.prototype.proto &#x3D; Animal.prototype\"></a>​2. Dog.prototype.proto &#x3D; Animal.prototype</h2><h3 id=\"​语法和机制\"><a href=\"#​语法和机制\" class=\"headerlink\" title=\"​语法和机制\"></a>​语法和机制</h3><ul>\n<li><p>​目的：直接让 Dog.prototype 的 proto 属性（即 __proto__）指向 Animal.prototype。</p>\n</li>\n<li><p>​底层逻辑：修改 Dog.prototype 的原型链。</p>\n</li>\n</ul>\n<p>​-  原型链结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> → <span class=\"hljs-literal\">null</span><br></code></pre></td></tr></table></figure>\n\n<p>因此，Dog 的实例直接通过原型链访问 Animal.prototype 的方法，但不会继承 Animal 实例的属性。</p>\n<h3 id=\"​特点-1\"><a href=\"#​特点-1\" class=\"headerlink\" title=\"​特点\"></a>​特点</h3><ul>\n<li><strong>​不调用父类构造函数</strong>：不会执行 Animal()，避免副作用（如初始化逻辑）。</li>\n</ul>\n<p>​- <strong>仅继承原型方法</strong>：Dog 的实例只能访问 Animal.prototype 的方法，无法获取 Animal 实例的属性（如 name）。</p>\n<ul>\n<li><p><strong>​保留原有原型</strong>：不会覆盖 Dog.prototype 上已定义的方法。</p>\n</li>\n<li><p><strong>​非标准操作</strong>：直接修改 proto（或 __proto__）是非标准的，可能影响性能，推荐用 Object.setPrototypeOf()：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">setPrototypeOf</span>(<span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>, <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br></code></pre></td></tr></table></figure>\n<p>​示例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Animal</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Animal&quot;</span>; &#125;<br><span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">eat</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123; <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Eat&quot;</span>); &#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Dog</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">proto</span> = <span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>; <span class=\"hljs-comment\">// 直接修改 proto</span><br><br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(dog.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// undefined（未继承 Animal 实例属性）</span><br>dog.<span class=\"hljs-title function_\">eat</span>();           <span class=\"hljs-comment\">// &quot;Eat&quot;（继承自 Animal.prototype）</span><br><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"​关键区别总结\"><a href=\"#​关键区别总结\" class=\"headerlink\" title=\"​关键区别总结\"></a>​关键区别总结</h3><h3 id=\"​关键区别总结-1\"><a href=\"#​关键区别总结-1\" class=\"headerlink\" title=\"​关键区别总结\"></a>​<strong>关键区别总结</strong></h3><table>\n<thead>\n<tr>\n<th>​<strong>特性</strong></th>\n<th><code>Dog.prototype = new Animal()</code></th>\n<th><code>Dog.prototype.__proto__ = Animal.prototype</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>​<strong>调用父类构造函数</strong></td>\n<td>✅ 是（执行 <code>Animal()</code>，初始化父类实例属性）</td>\n<td>❌ 否（直接链接原型，不调用构造函数）</td>\n</tr>\n<tr>\n<td>​<strong>继承实例属性</strong></td>\n<td>✅ 是（继承 <code>Animal</code> 实例的属性，如 <code>this.name</code>）</td>\n<td>❌ 否（仅继承原型方法，不包含实例属性）</td>\n</tr>\n<tr>\n<td>​<strong>覆盖原型对象</strong></td>\n<td>✅ 是（完全替换 <code>Dog.prototype</code> 为新实例）</td>\n<td>❌ 否（仅修改原型的 <code>__proto__</code>，保留原有属性和方法）</td>\n</tr>\n<tr>\n<td>​<strong>constructor修正</strong></td>\n<td>✅ 需手动修复（<code>Dog.prototype.constructor = Dog</code>）</td>\n<td>✅ 通常无需修复（原型链未改变构造函数引用）</td>\n</tr>\n<tr>\n<td>​<strong>兼容性</strong></td>\n<td>⚠️ 传统写法，但可能引发副作用（如多余属性继承）</td>\n<td>⚠️ 非标准操作（直接修改 <code>__proto__</code> 可能影响性能）</td>\n</tr>\n<tr>\n<td>​<strong>推荐程度</strong></td>\n<td>❌ 不推荐（问题多，已过时）</td>\n<td>⚠️ 慎用（可用 <code>Object.setPrototypeOf()</code> 替代）</td>\n</tr>\n<tr>\n<td>​<strong>原型链结构</strong></td>\n<td><code>Dog.prototype → Animal 实例 → Animal.prototype</code></td>\n<td><code>Dog.prototype → Animal.prototype → Object.prototype</code></td>\n</tr>\n<tr>\n<td>​<strong>是否继承父类方法</strong></td>\n<td>✅ 是（通过 <code>Animal.prototype</code>）</td>\n<td>✅ 是（直接链接到 <code>Animal.prototype</code>）</td>\n</tr>\n<tr>\n<td>​<strong>是否继承父类实例方法</strong></td>\n<td>❌ 否（仅继承原型方法，实例属性不会被继承）</td>\n<td>❌ 否（同上）</td>\n</tr>\n<tr>\n<td>​<strong>典型用途</strong></td>\n<td>早期原型链继承（已不推荐）</td>\n<td>理论原型链扩展（极少使用，多用 <code>Object.create()</code>）</td>\n</tr>\n<tr>\n<td>​<strong>替代方案</strong></td>\n<td><code>Object.create(Animal.prototype)</code> + 手动初始化属性</td>\n<td><code>Object.setPrototypeOf(Dog.prototype, Animal.prototype)</code></td>\n</tr>\n<tr>\n<td>​<strong>ES6 推荐写法</strong></td>\n<td><code>class Dog extends Animal &#123;&#125;</code></td>\n<td><code>class Dog extends Animal &#123;&#125;</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h3><ul>\n<li><p>​<strong>Dog.prototype &#x3D; new Animal() 的问题</strong>：</p>\n<ul>\n<li>强制调用父类构造函数，可能导致不必要的初始化逻辑（如 Animal 的 this.name）。</li>\n<li>会将父类实例的属性（如 name）提升为 Dog.prototype 的属性，导致所有子类实例共享这些属性（可能引发意外行为）。</li>\n</ul>\n</li>\n<li><p>​<strong>Dog.prototype.<strong>proto</strong> &#x3D; Animal.prototype 的问题</strong>：</p>\n<ul>\n<li>​非标准操作：虽然浏览器支持，但 <strong>proto</strong> 是内部属性，直接修改可能导致性能下降或兼容性问题。</li>\n<li>​无法继承父类构造函数：子类实例仍需通过 new Dog() 创建，不会自动调用父类构造函数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"​现代替代方案：\"><a href=\"#​现代替代方案：\" class=\"headerlink\" title=\"​现代替代方案：\"></a>​现代替代方案：</h3><p>​**Object.create()**：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Animal</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><span class=\"hljs-title class_\">Dog</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Dog</span>;<br></code></pre></td></tr></table></figure>\n<p>直接继承 Animal.prototype，不调用父类构造函数，更安全高效。</p>\n<p>​ES6 class 语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span> &#123;&#125;<br></code></pre></td></tr></table></figure>\n<p>自动处理原型链和构造函数继承，代码更简洁清晰。</p>\n"},{"title":"关于微信云托管对象存储那点事","_content":"最近在鼓捣一个关于图像处理相关的小程序，出于快速开发考虑，在后台开发这块，没有选择走传统的后台部署服务。毕竟，购买云服务器，注册购买域名以及备案等一系列操作下来，也够让人心累。\n\n这次选择的是微信开发的平台的云托管，至于为什么走的不是云函数开发，其中就涉及到了开发语言的选择--python, 如果改用javascript重写一下，成本有点高，所以最终方案选择云托管。\n\n在按照云托管的部署流程一通走下来后，everything is fine. But...\n\n离大谱的，接口请求和响应，居然不能超过1M, 而我这程序就是关于图像处理的，动不动图片大小就会超过1M。如果非要限制用户图片大小限制在1M以下，太过影响用户体验。\n\n此外我还想过，在用户端使用图像压缩，但图像太大压缩也会存在超过1M的情况，另外清晰度也会受到影响。\n\n在微信开发社区和各个IT论坛找了一圈下来，其实没有比较好的解决方案，最终都需要经过一个中间对象存储的过程。\n\n也就是先将图片上传到云上，让后将图片对象的id作为接口入参传入，后台需要使用到图片的时候根据图片id下载即可，然后将处理后的图片，又要上传回云上，返回给客户端新的图片的id，客户端可以根据图片id来获取资源。如下图\n\n<!-- ![处理流程](./imgs/微信云对象存储..png) -->\n<div align=\"center\">\n    <img src=\"../docs/imgs/微信云对象存储..png\" width=\"80%\" height=\"20%\" alt=\"处理流程\"/>\n</div>\n\n\n\n对象存储云平台其实很多，例如比较有名的比如七牛，阿里，还有腾讯云自己的。我这里采用了微信云对象存储，具体的使用呢可以参考 [微信云托管对象存储](https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/guide/storage/manage.html)，相应的开发手册可以参考[对象存储-服务端和其他客户端](https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/development/storage/service/)\n\n\n为了在后续的开发中更好处理类似的情况，我将微信云托管对象存储做成了一个模块，具体实现情况如下。\n\n首先，需要从自己的小程序或者和云托管平台获取到以下三个重要参数：\n\n- **APPID** ： \"your-wechat-appid\"\n- **SECRET**： \"your-wechat-secret\"\n- **ENV_ID**： \"your-cloud-env-id\"\n\n- ### 文件上传 (获取token-获取元数据-上传COS)\n\n微信开放平台如果第三方调用对应接口的话，都是需要鉴权了，所以首先我们需要获取到token值。\n\n``` Python\ndef _refresh_access_token(self):\n        \"\"\"获取或刷新access_token\"\"\"\n        url = \"https://api.weixin.qq.com/cgi-bin/token\"\n        params = {\n            \"grant_type\": \"client_credential\",\n            \"appid\": self.appid,\n            \"secret\": self.secret\n        }\n        response = requests.get(url, params=params, verify=False).json()\n        if 'access_token' in response:\n            self.access_token = response['access_token']\n            self.token_expires = time.time() + response['expires_in'] - 300  # 提前5分钟刷新\n        else:\n            raise Exception(f\"获取access_token失败: {response}\")\n```\n\n\n文件上传可以分成2步：**1获取上传元数据，2上传文件到COS**。\n\n获取元数据可以理解为向平台发送请求，获取一个用来存放一个文件（存储对象）的一个URL地址, 上传文件到COS可以则可以理解成将资源放到上一步生成的URL地址上，经此，文件才算真正的上传成功了。\n\n``` Python\n    def upload_file(self, local_path, cloud_path):\n        \"\"\"\n        上传本地文件到微信云存储\n        :param local_path: 本地文件路径\n        :param cloud_path: 云端存储路径（如：'images/example.jpg'）\n        :return: 文件ID（用于后续下载）\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取上传元数据\n        upload_meta_url = \"https://api.weixin.qq.com/tcb/uploadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\"env\": self.env, \"path\": cloud_path}\n        response = requests.post(upload_meta_url, params=params, json=payload,verify=False).json()\n        print(payload, params)\n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"上传元数据获取失败: {response}\")\n        \n        # 2. 上传文件到COS\n        cos_url = response['url']\n       \n        key = cloud_path.split('/')[-1]\n        print(key)\n        files = {\n            \"Signature\":(None,response['authorization']),\n            \"x-cos-meta-fileid\": (None, response['cos_file_id']),\n            \"x-cos-security-token\": (None,response['token']),\n            \"key\": (None, cloud_path),\n            'file':(key, open(local_path, 'rb')),\n        }\n\n        upload_resp = requests.post(cos_url, files=files, verify=False)\n        if upload_resp.status_code != 204:\n            raise Exception(f\"COS上传失败: {upload_resp.text}\", upload_resp)\n       \n        return response['file_id']\n```\n\n\n- ### 文件下载\n\n下载文件相对简单一些，直接调用微信开放平台对外提供的批量下载接口，当然对应的token也是需要的，这部分就不做赘述，代码实现可以参考下方。\n\n``` Python \n\ndef download_file(self, file_id, local_path):\n        \"\"\"\n        从微信云存储下载文件\n        :param file_id: 文件ID（上传时返回的file_id）\n        :param local_path: 本地存储路径\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取下载链接\n        download_meta_url = \"https://api.weixin.qq.com/tcb/batchdownloadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\n            \"env\": self.env,\n            \"file_list\": [{\"fileid\": file_id, \"max_age\": 7200}]\n        }\n        response = requests.post(download_meta_url, params=params, json=payload, verify=False).json()\n        \n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"下载元数据获取失败: {response}\")\n        \n        file_info = response['file_list'][0]\n        if file_info['status'] != 0:\n            raise Exception(f\"下载错误: {file_info['errmsg']}\")\n        \n        # 2. 下载文件\n        download_resp = requests.get(file_info['download_url'], verify=False)\n        if download_resp.status_code != 200:\n            raise Exception(\"文件下载失败\")\n        \n        with open(local_path, 'wb') as f:\n            f.write(download_resp.content)\n            \n        return True\n```\n\n以上就是微信云托管上对象存储的上传和下载的实现了。为了方便，我们可以将功能在一个类中实现。此外，考虑到token获取接口是有限制的，每天的调用次数是2000次，而每个token的有效时间是2小时，因此可以重复利用已有token。\n\n最终，完整的代码实现如下：\n\n``` Python\n# wx-cloud-storage.py\n# description: 微信云托管对象存储管理模块\nimport requests\nimport time\n\nclass WeChatCloudStorage:\n    def __init__(self, appid, secret, env):\n        self.appid = appid\n        self.secret = secret\n        self.env = env\n        self.access_token = None\n        self.token_expires = 0  # Token过期时间戳\n\n    def _refresh_access_token(self):\n        \"\"\"获取或刷新access_token\"\"\"\n        url = \"https://api.weixin.qq.com/cgi-bin/token\"\n        params = {\n            \"grant_type\": \"client_credential\",\n            \"appid\": self.appid,\n            \"secret\": self.secret\n        }\n        response = requests.get(url, params=params, verify=False).json()\n        if 'access_token' in response:\n            self.access_token = response['access_token']\n            self.token_expires = time.time() + response['expires_in'] - 300  # 提前5分钟刷新\n        else:\n            raise Exception(f\"获取access_token失败: {response}\")\n\n    def _ensure_access_token(self):\n        \"\"\"确保access_token有效\"\"\"\n        if time.time() >= self.token_expires or not self.access_token:\n            self._refresh_access_token()\n\n    def upload_file(self, local_path, cloud_path):\n        \"\"\"\n        上传本地文件到微信云存储\n        :param local_path: 本地文件路径\n        :param cloud_path: 云端存储路径（如：'images/example.jpg'）\n        :return: 文件ID（用于后续下载）\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取上传元数据\n        upload_meta_url = \"https://api.weixin.qq.com/tcb/uploadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\"env\": self.env, \"path\": cloud_path}\n        response = requests.post(upload_meta_url, params=params, json=payload,verify=False).json()\n        print(payload, params)\n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"上传元数据获取失败: {response}\")\n        \n        # 2. 上传文件到COS\n        cos_url = response['url']\n       \n        key = cloud_path.split('/')[-1]\n        print(key)\n        files = {\n            \"Signature\":(None,response['authorization']),\n            \"x-cos-meta-fileid\": (None, response['cos_file_id']),\n            \"x-cos-security-token\": (None,response['token']),\n            \"key\": (None, cloud_path),\n            'file':(key, open(local_path, 'rb')),\n        }\n\n        upload_resp = requests.post(cos_url, files=files, verify=False)\n        if upload_resp.status_code != 204:\n            raise Exception(f\"COS上传失败: {upload_resp.text}\", upload_resp)\n       \n        return response['file_id']\n\n    def download_file(self, file_id, local_path):\n        \"\"\"\n        从微信云存储下载文件\n        :param file_id: 文件ID（上传时返回的file_id）\n        :param local_path: 本地存储路径\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取下载链接\n        download_meta_url = \"https://api.weixin.qq.com/tcb/batchdownloadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\n            \"env\": self.env,\n            \"file_list\": [{\"fileid\": file_id, \"max_age\": 7200}]\n        }\n        response = requests.post(download_meta_url, params=params, json=payload, verify=False).json()\n        \n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"下载元数据获取失败: {response}\")\n        \n        file_info = response['file_list'][0]\n        if file_info['status'] != 0:\n            raise Exception(f\"下载错误: {file_info['errmsg']}\")\n        \n        # 2. 下载文件\n        download_resp = requests.get(file_info['download_url'], verify=False)\n        if download_resp.status_code != 200:\n            raise Exception(\"文件下载失败\")\n        \n        with open(local_path, 'wb') as f:\n            f.write(download_resp.content)\n            \n        return True\n\n# 使用示例\nif __name__ == \"__main__\":\n    # 配置信息（需要替换为实际值）\n    APPID = \"your-wechat-appid\"\n    SECRET = \"your-wechat-secret\"\n    ENV_ID = \"your-cloud-env-id\"\n   \n    # 上传示例\n    storage = WeChatCloudStorage(APPID, SECRET, ENV_ID)\n    try:\n        file_id = storage.upload_file(\"../test.png\", \"image/test2.png\")\n        print(f\"文件上传成功，File ID: {file_id}\")\n    except Exception as e:\n        print(f\"上传失败: {e}\")\n    # 下载示例\n    try:\n        storage.download_file(file_id, \"downloaded_image.jpg\")\n        print(\"文件下载成功\")\n    except Exception as e:\n        print(f\"下载失败: {e}\")\n\n\n```\n\n以上就是关于对象存储管理相关的内容了，如果你在开发类似的功能过程中有类似的idea或者遇到一些难搞的坑，欢迎一起讨论。","source":"_posts/Manage-wx-could-service.md","raw":"---\ntitle: 关于微信云托管对象存储那点事\n---\n最近在鼓捣一个关于图像处理相关的小程序，出于快速开发考虑，在后台开发这块，没有选择走传统的后台部署服务。毕竟，购买云服务器，注册购买域名以及备案等一系列操作下来，也够让人心累。\n\n这次选择的是微信开发的平台的云托管，至于为什么走的不是云函数开发，其中就涉及到了开发语言的选择--python, 如果改用javascript重写一下，成本有点高，所以最终方案选择云托管。\n\n在按照云托管的部署流程一通走下来后，everything is fine. But...\n\n离大谱的，接口请求和响应，居然不能超过1M, 而我这程序就是关于图像处理的，动不动图片大小就会超过1M。如果非要限制用户图片大小限制在1M以下，太过影响用户体验。\n\n此外我还想过，在用户端使用图像压缩，但图像太大压缩也会存在超过1M的情况，另外清晰度也会受到影响。\n\n在微信开发社区和各个IT论坛找了一圈下来，其实没有比较好的解决方案，最终都需要经过一个中间对象存储的过程。\n\n也就是先将图片上传到云上，让后将图片对象的id作为接口入参传入，后台需要使用到图片的时候根据图片id下载即可，然后将处理后的图片，又要上传回云上，返回给客户端新的图片的id，客户端可以根据图片id来获取资源。如下图\n\n<!-- ![处理流程](./imgs/微信云对象存储..png) -->\n<div align=\"center\">\n    <img src=\"../docs/imgs/微信云对象存储..png\" width=\"80%\" height=\"20%\" alt=\"处理流程\"/>\n</div>\n\n\n\n对象存储云平台其实很多，例如比较有名的比如七牛，阿里，还有腾讯云自己的。我这里采用了微信云对象存储，具体的使用呢可以参考 [微信云托管对象存储](https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/guide/storage/manage.html)，相应的开发手册可以参考[对象存储-服务端和其他客户端](https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/development/storage/service/)\n\n\n为了在后续的开发中更好处理类似的情况，我将微信云托管对象存储做成了一个模块，具体实现情况如下。\n\n首先，需要从自己的小程序或者和云托管平台获取到以下三个重要参数：\n\n- **APPID** ： \"your-wechat-appid\"\n- **SECRET**： \"your-wechat-secret\"\n- **ENV_ID**： \"your-cloud-env-id\"\n\n- ### 文件上传 (获取token-获取元数据-上传COS)\n\n微信开放平台如果第三方调用对应接口的话，都是需要鉴权了，所以首先我们需要获取到token值。\n\n``` Python\ndef _refresh_access_token(self):\n        \"\"\"获取或刷新access_token\"\"\"\n        url = \"https://api.weixin.qq.com/cgi-bin/token\"\n        params = {\n            \"grant_type\": \"client_credential\",\n            \"appid\": self.appid,\n            \"secret\": self.secret\n        }\n        response = requests.get(url, params=params, verify=False).json()\n        if 'access_token' in response:\n            self.access_token = response['access_token']\n            self.token_expires = time.time() + response['expires_in'] - 300  # 提前5分钟刷新\n        else:\n            raise Exception(f\"获取access_token失败: {response}\")\n```\n\n\n文件上传可以分成2步：**1获取上传元数据，2上传文件到COS**。\n\n获取元数据可以理解为向平台发送请求，获取一个用来存放一个文件（存储对象）的一个URL地址, 上传文件到COS可以则可以理解成将资源放到上一步生成的URL地址上，经此，文件才算真正的上传成功了。\n\n``` Python\n    def upload_file(self, local_path, cloud_path):\n        \"\"\"\n        上传本地文件到微信云存储\n        :param local_path: 本地文件路径\n        :param cloud_path: 云端存储路径（如：'images/example.jpg'）\n        :return: 文件ID（用于后续下载）\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取上传元数据\n        upload_meta_url = \"https://api.weixin.qq.com/tcb/uploadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\"env\": self.env, \"path\": cloud_path}\n        response = requests.post(upload_meta_url, params=params, json=payload,verify=False).json()\n        print(payload, params)\n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"上传元数据获取失败: {response}\")\n        \n        # 2. 上传文件到COS\n        cos_url = response['url']\n       \n        key = cloud_path.split('/')[-1]\n        print(key)\n        files = {\n            \"Signature\":(None,response['authorization']),\n            \"x-cos-meta-fileid\": (None, response['cos_file_id']),\n            \"x-cos-security-token\": (None,response['token']),\n            \"key\": (None, cloud_path),\n            'file':(key, open(local_path, 'rb')),\n        }\n\n        upload_resp = requests.post(cos_url, files=files, verify=False)\n        if upload_resp.status_code != 204:\n            raise Exception(f\"COS上传失败: {upload_resp.text}\", upload_resp)\n       \n        return response['file_id']\n```\n\n\n- ### 文件下载\n\n下载文件相对简单一些，直接调用微信开放平台对外提供的批量下载接口，当然对应的token也是需要的，这部分就不做赘述，代码实现可以参考下方。\n\n``` Python \n\ndef download_file(self, file_id, local_path):\n        \"\"\"\n        从微信云存储下载文件\n        :param file_id: 文件ID（上传时返回的file_id）\n        :param local_path: 本地存储路径\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取下载链接\n        download_meta_url = \"https://api.weixin.qq.com/tcb/batchdownloadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\n            \"env\": self.env,\n            \"file_list\": [{\"fileid\": file_id, \"max_age\": 7200}]\n        }\n        response = requests.post(download_meta_url, params=params, json=payload, verify=False).json()\n        \n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"下载元数据获取失败: {response}\")\n        \n        file_info = response['file_list'][0]\n        if file_info['status'] != 0:\n            raise Exception(f\"下载错误: {file_info['errmsg']}\")\n        \n        # 2. 下载文件\n        download_resp = requests.get(file_info['download_url'], verify=False)\n        if download_resp.status_code != 200:\n            raise Exception(\"文件下载失败\")\n        \n        with open(local_path, 'wb') as f:\n            f.write(download_resp.content)\n            \n        return True\n```\n\n以上就是微信云托管上对象存储的上传和下载的实现了。为了方便，我们可以将功能在一个类中实现。此外，考虑到token获取接口是有限制的，每天的调用次数是2000次，而每个token的有效时间是2小时，因此可以重复利用已有token。\n\n最终，完整的代码实现如下：\n\n``` Python\n# wx-cloud-storage.py\n# description: 微信云托管对象存储管理模块\nimport requests\nimport time\n\nclass WeChatCloudStorage:\n    def __init__(self, appid, secret, env):\n        self.appid = appid\n        self.secret = secret\n        self.env = env\n        self.access_token = None\n        self.token_expires = 0  # Token过期时间戳\n\n    def _refresh_access_token(self):\n        \"\"\"获取或刷新access_token\"\"\"\n        url = \"https://api.weixin.qq.com/cgi-bin/token\"\n        params = {\n            \"grant_type\": \"client_credential\",\n            \"appid\": self.appid,\n            \"secret\": self.secret\n        }\n        response = requests.get(url, params=params, verify=False).json()\n        if 'access_token' in response:\n            self.access_token = response['access_token']\n            self.token_expires = time.time() + response['expires_in'] - 300  # 提前5分钟刷新\n        else:\n            raise Exception(f\"获取access_token失败: {response}\")\n\n    def _ensure_access_token(self):\n        \"\"\"确保access_token有效\"\"\"\n        if time.time() >= self.token_expires or not self.access_token:\n            self._refresh_access_token()\n\n    def upload_file(self, local_path, cloud_path):\n        \"\"\"\n        上传本地文件到微信云存储\n        :param local_path: 本地文件路径\n        :param cloud_path: 云端存储路径（如：'images/example.jpg'）\n        :return: 文件ID（用于后续下载）\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取上传元数据\n        upload_meta_url = \"https://api.weixin.qq.com/tcb/uploadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\"env\": self.env, \"path\": cloud_path}\n        response = requests.post(upload_meta_url, params=params, json=payload,verify=False).json()\n        print(payload, params)\n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"上传元数据获取失败: {response}\")\n        \n        # 2. 上传文件到COS\n        cos_url = response['url']\n       \n        key = cloud_path.split('/')[-1]\n        print(key)\n        files = {\n            \"Signature\":(None,response['authorization']),\n            \"x-cos-meta-fileid\": (None, response['cos_file_id']),\n            \"x-cos-security-token\": (None,response['token']),\n            \"key\": (None, cloud_path),\n            'file':(key, open(local_path, 'rb')),\n        }\n\n        upload_resp = requests.post(cos_url, files=files, verify=False)\n        if upload_resp.status_code != 204:\n            raise Exception(f\"COS上传失败: {upload_resp.text}\", upload_resp)\n       \n        return response['file_id']\n\n    def download_file(self, file_id, local_path):\n        \"\"\"\n        从微信云存储下载文件\n        :param file_id: 文件ID（上传时返回的file_id）\n        :param local_path: 本地存储路径\n        \"\"\"\n        self._ensure_access_token()\n        \n        # 1. 获取下载链接\n        download_meta_url = \"https://api.weixin.qq.com/tcb/batchdownloadfile\"\n        params = {\"access_token\": self.access_token}\n        payload = {\n            \"env\": self.env,\n            \"file_list\": [{\"fileid\": file_id, \"max_age\": 7200}]\n        }\n        response = requests.post(download_meta_url, params=params, json=payload, verify=False).json()\n        \n        if response.get('errcode', 0) != 0:\n            raise Exception(f\"下载元数据获取失败: {response}\")\n        \n        file_info = response['file_list'][0]\n        if file_info['status'] != 0:\n            raise Exception(f\"下载错误: {file_info['errmsg']}\")\n        \n        # 2. 下载文件\n        download_resp = requests.get(file_info['download_url'], verify=False)\n        if download_resp.status_code != 200:\n            raise Exception(\"文件下载失败\")\n        \n        with open(local_path, 'wb') as f:\n            f.write(download_resp.content)\n            \n        return True\n\n# 使用示例\nif __name__ == \"__main__\":\n    # 配置信息（需要替换为实际值）\n    APPID = \"your-wechat-appid\"\n    SECRET = \"your-wechat-secret\"\n    ENV_ID = \"your-cloud-env-id\"\n   \n    # 上传示例\n    storage = WeChatCloudStorage(APPID, SECRET, ENV_ID)\n    try:\n        file_id = storage.upload_file(\"../test.png\", \"image/test2.png\")\n        print(f\"文件上传成功，File ID: {file_id}\")\n    except Exception as e:\n        print(f\"上传失败: {e}\")\n    # 下载示例\n    try:\n        storage.download_file(file_id, \"downloaded_image.jpg\")\n        print(\"文件下载成功\")\n    except Exception as e:\n        print(f\"下载失败: {e}\")\n\n\n```\n\n以上就是关于对象存储管理相关的内容了，如果你在开发类似的功能过程中有类似的idea或者遇到一些难搞的坑，欢迎一起讨论。","slug":"Manage-wx-could-service","published":1,"date":"2025-05-23T11:39:55.334Z","updated":"2025-05-23T12:32:04.441Z","_id":"cmb0qjkps000350up5hzhbjyl","comments":1,"layout":"post","photos":[],"content":"<p>最近在鼓捣一个关于图像处理相关的小程序，出于快速开发考虑，在后台开发这块，没有选择走传统的后台部署服务。毕竟，购买云服务器，注册购买域名以及备案等一系列操作下来，也够让人心累。</p>\n<p>这次选择的是微信开发的平台的云托管，至于为什么走的不是云函数开发，其中就涉及到了开发语言的选择–python, 如果改用javascript重写一下，成本有点高，所以最终方案选择云托管。</p>\n<p>在按照云托管的部署流程一通走下来后，everything is fine. But…</p>\n<p>离大谱的，接口请求和响应，居然不能超过1M, 而我这程序就是关于图像处理的，动不动图片大小就会超过1M。如果非要限制用户图片大小限制在1M以下，太过影响用户体验。</p>\n<p>此外我还想过，在用户端使用图像压缩，但图像太大压缩也会存在超过1M的情况，另外清晰度也会受到影响。</p>\n<p>在微信开发社区和各个IT论坛找了一圈下来，其实没有比较好的解决方案，最终都需要经过一个中间对象存储的过程。</p>\n<p>也就是先将图片上传到云上，让后将图片对象的id作为接口入参传入，后台需要使用到图片的时候根据图片id下载即可，然后将处理后的图片，又要上传回云上，返回给客户端新的图片的id，客户端可以根据图片id来获取资源。如下图</p>\n<!-- ![处理流程](./imgs/微信云对象存储..png) -->\n<div align=\"center\">\n    <img src=\"../docs/imgs/微信云对象存储..png\" width=\"80%\" height=\"20%\" alt=\"处理流程\"/>\n</div>\n\n\n\n<p>对象存储云平台其实很多，例如比较有名的比如七牛，阿里，还有腾讯云自己的。我这里采用了微信云对象存储，具体的使用呢可以参考 <a href=\"https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/guide/storage/manage.html\">微信云托管对象存储</a>，相应的开发手册可以参考<a href=\"https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/development/storage/service/\">对象存储-服务端和其他客户端</a></p>\n<p>为了在后续的开发中更好处理类似的情况，我将微信云托管对象存储做成了一个模块，具体实现情况如下。</p>\n<p>首先，需要从自己的小程序或者和云托管平台获取到以下三个重要参数：</p>\n<ul>\n<li><p><strong>APPID</strong> ： “your-wechat-appid”</p>\n</li>\n<li><p><strong>SECRET</strong>： “your-wechat-secret”</p>\n</li>\n<li><p><strong>ENV_ID</strong>： “your-cloud-env-id”</p>\n</li>\n<li><h3 id=\"文件上传-获取token-获取元数据-上传COS\"><a href=\"#文件上传-获取token-获取元数据-上传COS\" class=\"headerlink\" title=\"文件上传 (获取token-获取元数据-上传COS)\"></a>文件上传 (获取token-获取元数据-上传COS)</h3></li>\n</ul>\n<p>微信开放平台如果第三方调用对应接口的话，都是需要鉴权了，所以首先我们需要获取到token值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_refresh_access_token</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;获取或刷新access_token&quot;&quot;&quot;</span><br>        url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span><br>        params = &#123;<br>            <span class=\"hljs-string\">&quot;grant_type&quot;</span>: <span class=\"hljs-string\">&quot;client_credential&quot;</span>,<br>            <span class=\"hljs-string\">&quot;appid&quot;</span>: <span class=\"hljs-variable language_\">self</span>.appid,<br>            <span class=\"hljs-string\">&quot;secret&quot;</span>: <span class=\"hljs-variable language_\">self</span>.secret<br>        &#125;<br>        response = requests.get(url, params=params, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;access_token&#x27;</span> <span class=\"hljs-keyword\">in</span> response:<br>            <span class=\"hljs-variable language_\">self</span>.access_token = response[<span class=\"hljs-string\">&#x27;access_token&#x27;</span>]<br>            <span class=\"hljs-variable language_\">self</span>.token_expires = time.time() + response[<span class=\"hljs-string\">&#x27;expires_in&#x27;</span>] - <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># 提前5分钟刷新</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;获取access_token失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n\n<p>文件上传可以分成2步：<strong>1获取上传元数据，2上传文件到COS</strong>。</p>\n<p>获取元数据可以理解为向平台发送请求，获取一个用来存放一个文件（存储对象）的一个URL地址, 上传文件到COS可以则可以理解成将资源放到上一步生成的URL地址上，经此，文件才算真正的上传成功了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">upload_file</span>(<span class=\"hljs-params\">self, local_path, cloud_path</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    上传本地文件到微信云存储</span><br><span class=\"hljs-string\">    :param local_path: 本地文件路径</span><br><span class=\"hljs-string\">    :param cloud_path: 云端存储路径（如：&#x27;images/example.jpg&#x27;）</span><br><span class=\"hljs-string\">    :return: 文件ID（用于后续下载）</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>    <br>    <span class=\"hljs-comment\"># 1. 获取上传元数据</span><br>    upload_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/uploadfile&quot;</span><br>    params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>    payload = &#123;<span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env, <span class=\"hljs-string\">&quot;path&quot;</span>: cloud_path&#125;<br>    response = requests.post(upload_meta_url, params=params, json=payload,verify=<span class=\"hljs-literal\">False</span>).json()<br>    <span class=\"hljs-built_in\">print</span>(payload, params)<br>    <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;上传元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>    <br>    <span class=\"hljs-comment\"># 2. 上传文件到COS</span><br>    cos_url = response[<span class=\"hljs-string\">&#x27;url&#x27;</span>]<br>   <br>    key = cloud_path.split(<span class=\"hljs-string\">&#x27;/&#x27;</span>)[-<span class=\"hljs-number\">1</span>]<br>    <span class=\"hljs-built_in\">print</span>(key)<br>    files = &#123;<br>        <span class=\"hljs-string\">&quot;Signature&quot;</span>:(<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;authorization&#x27;</span>]),<br>        <span class=\"hljs-string\">&quot;x-cos-meta-fileid&quot;</span>: (<span class=\"hljs-literal\">None</span>, response[<span class=\"hljs-string\">&#x27;cos_file_id&#x27;</span>]),<br>        <span class=\"hljs-string\">&quot;x-cos-security-token&quot;</span>: (<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;token&#x27;</span>]),<br>        <span class=\"hljs-string\">&quot;key&quot;</span>: (<span class=\"hljs-literal\">None</span>, cloud_path),<br>        <span class=\"hljs-string\">&#x27;file&#x27;</span>:(key, <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;rb&#x27;</span>)),<br>    &#125;<br><br>    upload_resp = requests.post(cos_url, files=files, verify=<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-keyword\">if</span> upload_resp.status_code != <span class=\"hljs-number\">204</span>:<br>        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;COS上传失败: <span class=\"hljs-subst\">&#123;upload_resp.text&#125;</span>&quot;</span>, upload_resp)<br>   <br>    <span class=\"hljs-keyword\">return</span> response[<span class=\"hljs-string\">&#x27;file_id&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li><h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3></li>\n</ul>\n<p>下载文件相对简单一些，直接调用微信开放平台对外提供的批量下载接口，当然对应的token也是需要的，这部分就不做赘述，代码实现可以参考下方。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">download_file</span>(<span class=\"hljs-params\">self, file_id, local_path</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        从微信云存储下载文件</span><br><span class=\"hljs-string\">        :param file_id: 文件ID（上传时返回的file_id）</span><br><span class=\"hljs-string\">        :param local_path: 本地存储路径</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>        <br>        <span class=\"hljs-comment\"># 1. 获取下载链接</span><br>        download_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/batchdownloadfile&quot;</span><br>        params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>        payload = &#123;<br>            <span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env,<br>            <span class=\"hljs-string\">&quot;file_list&quot;</span>: [&#123;<span class=\"hljs-string\">&quot;fileid&quot;</span>: file_id, <span class=\"hljs-string\">&quot;max_age&quot;</span>: <span class=\"hljs-number\">7200</span>&#125;]<br>        &#125;<br>        response = requests.post(download_meta_url, params=params, json=payload, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <br>        <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>        <br>        file_info = response[<span class=\"hljs-string\">&#x27;file_list&#x27;</span>][<span class=\"hljs-number\">0</span>]<br>        <span class=\"hljs-keyword\">if</span> file_info[<span class=\"hljs-string\">&#x27;status&#x27;</span>] != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载错误: <span class=\"hljs-subst\">&#123;file_info[<span class=\"hljs-string\">&#x27;errmsg&#x27;</span>]&#125;</span>&quot;</span>)<br>        <br>        <span class=\"hljs-comment\"># 2. 下载文件</span><br>        download_resp = requests.get(file_info[<span class=\"hljs-string\">&#x27;download_url&#x27;</span>], verify=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-keyword\">if</span> download_resp.status_code != <span class=\"hljs-number\">200</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;文件下载失败&quot;</span>)<br>        <br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> f:<br>            f.write(download_resp.content)<br>            <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<p>以上就是微信云托管上对象存储的上传和下载的实现了。为了方便，我们可以将功能在一个类中实现。此外，考虑到token获取接口是有限制的，每天的调用次数是2000次，而每个token的有效时间是2小时，因此可以重复利用已有token。</p>\n<p>最终，完整的代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-comment\"># wx-cloud-storage.py</span><br><span class=\"hljs-comment\"># description: 微信云托管对象存储管理模块</span><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WeChatCloudStorage</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, appid, secret, env</span>):<br>        <span class=\"hljs-variable language_\">self</span>.appid = appid<br>        <span class=\"hljs-variable language_\">self</span>.secret = secret<br>        <span class=\"hljs-variable language_\">self</span>.env = env<br>        <span class=\"hljs-variable language_\">self</span>.access_token = <span class=\"hljs-literal\">None</span><br>        <span class=\"hljs-variable language_\">self</span>.token_expires = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># Token过期时间戳</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_refresh_access_token</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;获取或刷新access_token&quot;&quot;&quot;</span><br>        url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span><br>        params = &#123;<br>            <span class=\"hljs-string\">&quot;grant_type&quot;</span>: <span class=\"hljs-string\">&quot;client_credential&quot;</span>,<br>            <span class=\"hljs-string\">&quot;appid&quot;</span>: <span class=\"hljs-variable language_\">self</span>.appid,<br>            <span class=\"hljs-string\">&quot;secret&quot;</span>: <span class=\"hljs-variable language_\">self</span>.secret<br>        &#125;<br>        response = requests.get(url, params=params, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;access_token&#x27;</span> <span class=\"hljs-keyword\">in</span> response:<br>            <span class=\"hljs-variable language_\">self</span>.access_token = response[<span class=\"hljs-string\">&#x27;access_token&#x27;</span>]<br>            <span class=\"hljs-variable language_\">self</span>.token_expires = time.time() + response[<span class=\"hljs-string\">&#x27;expires_in&#x27;</span>] - <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># 提前5分钟刷新</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;获取access_token失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_ensure_access_token</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;确保access_token有效&quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> time.time() &gt;= <span class=\"hljs-variable language_\">self</span>.token_expires <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-variable language_\">self</span>.access_token:<br>            <span class=\"hljs-variable language_\">self</span>._refresh_access_token()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">upload_file</span>(<span class=\"hljs-params\">self, local_path, cloud_path</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        上传本地文件到微信云存储</span><br><span class=\"hljs-string\">        :param local_path: 本地文件路径</span><br><span class=\"hljs-string\">        :param cloud_path: 云端存储路径（如：&#x27;images/example.jpg&#x27;）</span><br><span class=\"hljs-string\">        :return: 文件ID（用于后续下载）</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>        <br>        <span class=\"hljs-comment\"># 1. 获取上传元数据</span><br>        upload_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/uploadfile&quot;</span><br>        params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>        payload = &#123;<span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env, <span class=\"hljs-string\">&quot;path&quot;</span>: cloud_path&#125;<br>        response = requests.post(upload_meta_url, params=params, json=payload,verify=<span class=\"hljs-literal\">False</span>).json()<br>        <span class=\"hljs-built_in\">print</span>(payload, params)<br>        <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;上传元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>        <br>        <span class=\"hljs-comment\"># 2. 上传文件到COS</span><br>        cos_url = response[<span class=\"hljs-string\">&#x27;url&#x27;</span>]<br>       <br>        key = cloud_path.split(<span class=\"hljs-string\">&#x27;/&#x27;</span>)[-<span class=\"hljs-number\">1</span>]<br>        <span class=\"hljs-built_in\">print</span>(key)<br>        files = &#123;<br>            <span class=\"hljs-string\">&quot;Signature&quot;</span>:(<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;authorization&#x27;</span>]),<br>            <span class=\"hljs-string\">&quot;x-cos-meta-fileid&quot;</span>: (<span class=\"hljs-literal\">None</span>, response[<span class=\"hljs-string\">&#x27;cos_file_id&#x27;</span>]),<br>            <span class=\"hljs-string\">&quot;x-cos-security-token&quot;</span>: (<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;token&#x27;</span>]),<br>            <span class=\"hljs-string\">&quot;key&quot;</span>: (<span class=\"hljs-literal\">None</span>, cloud_path),<br>            <span class=\"hljs-string\">&#x27;file&#x27;</span>:(key, <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;rb&#x27;</span>)),<br>        &#125;<br><br>        upload_resp = requests.post(cos_url, files=files, verify=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-keyword\">if</span> upload_resp.status_code != <span class=\"hljs-number\">204</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;COS上传失败: <span class=\"hljs-subst\">&#123;upload_resp.text&#125;</span>&quot;</span>, upload_resp)<br>       <br>        <span class=\"hljs-keyword\">return</span> response[<span class=\"hljs-string\">&#x27;file_id&#x27;</span>]<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">download_file</span>(<span class=\"hljs-params\">self, file_id, local_path</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        从微信云存储下载文件</span><br><span class=\"hljs-string\">        :param file_id: 文件ID（上传时返回的file_id）</span><br><span class=\"hljs-string\">        :param local_path: 本地存储路径</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>        <br>        <span class=\"hljs-comment\"># 1. 获取下载链接</span><br>        download_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/batchdownloadfile&quot;</span><br>        params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>        payload = &#123;<br>            <span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env,<br>            <span class=\"hljs-string\">&quot;file_list&quot;</span>: [&#123;<span class=\"hljs-string\">&quot;fileid&quot;</span>: file_id, <span class=\"hljs-string\">&quot;max_age&quot;</span>: <span class=\"hljs-number\">7200</span>&#125;]<br>        &#125;<br>        response = requests.post(download_meta_url, params=params, json=payload, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <br>        <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>        <br>        file_info = response[<span class=\"hljs-string\">&#x27;file_list&#x27;</span>][<span class=\"hljs-number\">0</span>]<br>        <span class=\"hljs-keyword\">if</span> file_info[<span class=\"hljs-string\">&#x27;status&#x27;</span>] != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载错误: <span class=\"hljs-subst\">&#123;file_info[<span class=\"hljs-string\">&#x27;errmsg&#x27;</span>]&#125;</span>&quot;</span>)<br>        <br>        <span class=\"hljs-comment\"># 2. 下载文件</span><br>        download_resp = requests.get(file_info[<span class=\"hljs-string\">&#x27;download_url&#x27;</span>], verify=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-keyword\">if</span> download_resp.status_code != <span class=\"hljs-number\">200</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;文件下载失败&quot;</span>)<br>        <br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> f:<br>            f.write(download_resp.content)<br>            <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br><br><span class=\"hljs-comment\"># 使用示例</span><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    <span class=\"hljs-comment\"># 配置信息（需要替换为实际值）</span><br>    APPID = <span class=\"hljs-string\">&quot;your-wechat-appid&quot;</span><br>    SECRET = <span class=\"hljs-string\">&quot;your-wechat-secret&quot;</span><br>    ENV_ID = <span class=\"hljs-string\">&quot;your-cloud-env-id&quot;</span><br>   <br>    <span class=\"hljs-comment\"># 上传示例</span><br>    storage = WeChatCloudStorage(APPID, SECRET, ENV_ID)<br>    <span class=\"hljs-keyword\">try</span>:<br>        file_id = storage.upload_file(<span class=\"hljs-string\">&quot;../test.png&quot;</span>, <span class=\"hljs-string\">&quot;image/test2.png&quot;</span>)<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;文件上传成功，File ID: <span class=\"hljs-subst\">&#123;file_id&#125;</span>&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;上传失败: <span class=\"hljs-subst\">&#123;e&#125;</span>&quot;</span>)<br>    <span class=\"hljs-comment\"># 下载示例</span><br>    <span class=\"hljs-keyword\">try</span>:<br>        storage.download_file(file_id, <span class=\"hljs-string\">&quot;downloaded_image.jpg&quot;</span>)<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;文件下载成功&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;下载失败: <span class=\"hljs-subst\">&#123;e&#125;</span>&quot;</span>)<br><br><br></code></pre></td></tr></table></figure>\n\n<p>以上就是关于对象存储管理相关的内容了，如果你在开发类似的功能过程中有类似的idea或者遇到一些难搞的坑，欢迎一起讨论。</p>\n","excerpt":"","more":"<p>最近在鼓捣一个关于图像处理相关的小程序，出于快速开发考虑，在后台开发这块，没有选择走传统的后台部署服务。毕竟，购买云服务器，注册购买域名以及备案等一系列操作下来，也够让人心累。</p>\n<p>这次选择的是微信开发的平台的云托管，至于为什么走的不是云函数开发，其中就涉及到了开发语言的选择–python, 如果改用javascript重写一下，成本有点高，所以最终方案选择云托管。</p>\n<p>在按照云托管的部署流程一通走下来后，everything is fine. But…</p>\n<p>离大谱的，接口请求和响应，居然不能超过1M, 而我这程序就是关于图像处理的，动不动图片大小就会超过1M。如果非要限制用户图片大小限制在1M以下，太过影响用户体验。</p>\n<p>此外我还想过，在用户端使用图像压缩，但图像太大压缩也会存在超过1M的情况，另外清晰度也会受到影响。</p>\n<p>在微信开发社区和各个IT论坛找了一圈下来，其实没有比较好的解决方案，最终都需要经过一个中间对象存储的过程。</p>\n<p>也就是先将图片上传到云上，让后将图片对象的id作为接口入参传入，后台需要使用到图片的时候根据图片id下载即可，然后将处理后的图片，又要上传回云上，返回给客户端新的图片的id，客户端可以根据图片id来获取资源。如下图</p>\n<!-- ![处理流程](./imgs/微信云对象存储..png) -->\n<div align=\"center\">\n    <img src=\"../docs/imgs/微信云对象存储..png\" width=\"80%\" height=\"20%\" alt=\"处理流程\"/>\n</div>\n\n\n\n<p>对象存储云平台其实很多，例如比较有名的比如七牛，阿里，还有腾讯云自己的。我这里采用了微信云对象存储，具体的使用呢可以参考 <a href=\"https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/guide/storage/manage.html\">微信云托管对象存储</a>，相应的开发手册可以参考<a href=\"https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/development/storage/service/\">对象存储-服务端和其他客户端</a></p>\n<p>为了在后续的开发中更好处理类似的情况，我将微信云托管对象存储做成了一个模块，具体实现情况如下。</p>\n<p>首先，需要从自己的小程序或者和云托管平台获取到以下三个重要参数：</p>\n<ul>\n<li><p><strong>APPID</strong> ： “your-wechat-appid”</p>\n</li>\n<li><p><strong>SECRET</strong>： “your-wechat-secret”</p>\n</li>\n<li><p><strong>ENV_ID</strong>： “your-cloud-env-id”</p>\n</li>\n<li><h3 id=\"文件上传-获取token-获取元数据-上传COS\"><a href=\"#文件上传-获取token-获取元数据-上传COS\" class=\"headerlink\" title=\"文件上传 (获取token-获取元数据-上传COS)\"></a>文件上传 (获取token-获取元数据-上传COS)</h3></li>\n</ul>\n<p>微信开放平台如果第三方调用对应接口的话，都是需要鉴权了，所以首先我们需要获取到token值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_refresh_access_token</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;获取或刷新access_token&quot;&quot;&quot;</span><br>        url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span><br>        params = &#123;<br>            <span class=\"hljs-string\">&quot;grant_type&quot;</span>: <span class=\"hljs-string\">&quot;client_credential&quot;</span>,<br>            <span class=\"hljs-string\">&quot;appid&quot;</span>: <span class=\"hljs-variable language_\">self</span>.appid,<br>            <span class=\"hljs-string\">&quot;secret&quot;</span>: <span class=\"hljs-variable language_\">self</span>.secret<br>        &#125;<br>        response = requests.get(url, params=params, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;access_token&#x27;</span> <span class=\"hljs-keyword\">in</span> response:<br>            <span class=\"hljs-variable language_\">self</span>.access_token = response[<span class=\"hljs-string\">&#x27;access_token&#x27;</span>]<br>            <span class=\"hljs-variable language_\">self</span>.token_expires = time.time() + response[<span class=\"hljs-string\">&#x27;expires_in&#x27;</span>] - <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># 提前5分钟刷新</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;获取access_token失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n\n<p>文件上传可以分成2步：<strong>1获取上传元数据，2上传文件到COS</strong>。</p>\n<p>获取元数据可以理解为向平台发送请求，获取一个用来存放一个文件（存储对象）的一个URL地址, 上传文件到COS可以则可以理解成将资源放到上一步生成的URL地址上，经此，文件才算真正的上传成功了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">upload_file</span>(<span class=\"hljs-params\">self, local_path, cloud_path</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">    上传本地文件到微信云存储</span><br><span class=\"hljs-string\">    :param local_path: 本地文件路径</span><br><span class=\"hljs-string\">    :param cloud_path: 云端存储路径（如：&#x27;images/example.jpg&#x27;）</span><br><span class=\"hljs-string\">    :return: 文件ID（用于后续下载）</span><br><span class=\"hljs-string\">    &quot;&quot;&quot;</span><br>    <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>    <br>    <span class=\"hljs-comment\"># 1. 获取上传元数据</span><br>    upload_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/uploadfile&quot;</span><br>    params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>    payload = &#123;<span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env, <span class=\"hljs-string\">&quot;path&quot;</span>: cloud_path&#125;<br>    response = requests.post(upload_meta_url, params=params, json=payload,verify=<span class=\"hljs-literal\">False</span>).json()<br>    <span class=\"hljs-built_in\">print</span>(payload, params)<br>    <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;上传元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>    <br>    <span class=\"hljs-comment\"># 2. 上传文件到COS</span><br>    cos_url = response[<span class=\"hljs-string\">&#x27;url&#x27;</span>]<br>   <br>    key = cloud_path.split(<span class=\"hljs-string\">&#x27;/&#x27;</span>)[-<span class=\"hljs-number\">1</span>]<br>    <span class=\"hljs-built_in\">print</span>(key)<br>    files = &#123;<br>        <span class=\"hljs-string\">&quot;Signature&quot;</span>:(<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;authorization&#x27;</span>]),<br>        <span class=\"hljs-string\">&quot;x-cos-meta-fileid&quot;</span>: (<span class=\"hljs-literal\">None</span>, response[<span class=\"hljs-string\">&#x27;cos_file_id&#x27;</span>]),<br>        <span class=\"hljs-string\">&quot;x-cos-security-token&quot;</span>: (<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;token&#x27;</span>]),<br>        <span class=\"hljs-string\">&quot;key&quot;</span>: (<span class=\"hljs-literal\">None</span>, cloud_path),<br>        <span class=\"hljs-string\">&#x27;file&#x27;</span>:(key, <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;rb&#x27;</span>)),<br>    &#125;<br><br>    upload_resp = requests.post(cos_url, files=files, verify=<span class=\"hljs-literal\">False</span>)<br>    <span class=\"hljs-keyword\">if</span> upload_resp.status_code != <span class=\"hljs-number\">204</span>:<br>        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;COS上传失败: <span class=\"hljs-subst\">&#123;upload_resp.text&#125;</span>&quot;</span>, upload_resp)<br>   <br>    <span class=\"hljs-keyword\">return</span> response[<span class=\"hljs-string\">&#x27;file_id&#x27;</span>]<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li><h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3></li>\n</ul>\n<p>下载文件相对简单一些，直接调用微信开放平台对外提供的批量下载接口，当然对应的token也是需要的，这部分就不做赘述，代码实现可以参考下方。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">download_file</span>(<span class=\"hljs-params\">self, file_id, local_path</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        从微信云存储下载文件</span><br><span class=\"hljs-string\">        :param file_id: 文件ID（上传时返回的file_id）</span><br><span class=\"hljs-string\">        :param local_path: 本地存储路径</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>        <br>        <span class=\"hljs-comment\"># 1. 获取下载链接</span><br>        download_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/batchdownloadfile&quot;</span><br>        params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>        payload = &#123;<br>            <span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env,<br>            <span class=\"hljs-string\">&quot;file_list&quot;</span>: [&#123;<span class=\"hljs-string\">&quot;fileid&quot;</span>: file_id, <span class=\"hljs-string\">&quot;max_age&quot;</span>: <span class=\"hljs-number\">7200</span>&#125;]<br>        &#125;<br>        response = requests.post(download_meta_url, params=params, json=payload, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <br>        <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>        <br>        file_info = response[<span class=\"hljs-string\">&#x27;file_list&#x27;</span>][<span class=\"hljs-number\">0</span>]<br>        <span class=\"hljs-keyword\">if</span> file_info[<span class=\"hljs-string\">&#x27;status&#x27;</span>] != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载错误: <span class=\"hljs-subst\">&#123;file_info[<span class=\"hljs-string\">&#x27;errmsg&#x27;</span>]&#125;</span>&quot;</span>)<br>        <br>        <span class=\"hljs-comment\"># 2. 下载文件</span><br>        download_resp = requests.get(file_info[<span class=\"hljs-string\">&#x27;download_url&#x27;</span>], verify=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-keyword\">if</span> download_resp.status_code != <span class=\"hljs-number\">200</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;文件下载失败&quot;</span>)<br>        <br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> f:<br>            f.write(download_resp.content)<br>            <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br></code></pre></td></tr></table></figure>\n\n<p>以上就是微信云托管上对象存储的上传和下载的实现了。为了方便，我们可以将功能在一个类中实现。此外，考虑到token获取接口是有限制的，每天的调用次数是2000次，而每个token的有效时间是2小时，因此可以重复利用已有token。</p>\n<p>最终，完整的代码实现如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Python\"><span class=\"hljs-comment\"># wx-cloud-storage.py</span><br><span class=\"hljs-comment\"># description: 微信云托管对象存储管理模块</span><br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WeChatCloudStorage</span>:<br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, appid, secret, env</span>):<br>        <span class=\"hljs-variable language_\">self</span>.appid = appid<br>        <span class=\"hljs-variable language_\">self</span>.secret = secret<br>        <span class=\"hljs-variable language_\">self</span>.env = env<br>        <span class=\"hljs-variable language_\">self</span>.access_token = <span class=\"hljs-literal\">None</span><br>        <span class=\"hljs-variable language_\">self</span>.token_expires = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># Token过期时间戳</span><br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_refresh_access_token</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;获取或刷新access_token&quot;&quot;&quot;</span><br>        url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span><br>        params = &#123;<br>            <span class=\"hljs-string\">&quot;grant_type&quot;</span>: <span class=\"hljs-string\">&quot;client_credential&quot;</span>,<br>            <span class=\"hljs-string\">&quot;appid&quot;</span>: <span class=\"hljs-variable language_\">self</span>.appid,<br>            <span class=\"hljs-string\">&quot;secret&quot;</span>: <span class=\"hljs-variable language_\">self</span>.secret<br>        &#125;<br>        response = requests.get(url, params=params, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&#x27;access_token&#x27;</span> <span class=\"hljs-keyword\">in</span> response:<br>            <span class=\"hljs-variable language_\">self</span>.access_token = response[<span class=\"hljs-string\">&#x27;access_token&#x27;</span>]<br>            <span class=\"hljs-variable language_\">self</span>.token_expires = time.time() + response[<span class=\"hljs-string\">&#x27;expires_in&#x27;</span>] - <span class=\"hljs-number\">300</span>  <span class=\"hljs-comment\"># 提前5分钟刷新</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;获取access_token失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_ensure_access_token</span>(<span class=\"hljs-params\">self</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;确保access_token有效&quot;&quot;&quot;</span><br>        <span class=\"hljs-keyword\">if</span> time.time() &gt;= <span class=\"hljs-variable language_\">self</span>.token_expires <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-variable language_\">self</span>.access_token:<br>            <span class=\"hljs-variable language_\">self</span>._refresh_access_token()<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">upload_file</span>(<span class=\"hljs-params\">self, local_path, cloud_path</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        上传本地文件到微信云存储</span><br><span class=\"hljs-string\">        :param local_path: 本地文件路径</span><br><span class=\"hljs-string\">        :param cloud_path: 云端存储路径（如：&#x27;images/example.jpg&#x27;）</span><br><span class=\"hljs-string\">        :return: 文件ID（用于后续下载）</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>        <br>        <span class=\"hljs-comment\"># 1. 获取上传元数据</span><br>        upload_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/uploadfile&quot;</span><br>        params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>        payload = &#123;<span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env, <span class=\"hljs-string\">&quot;path&quot;</span>: cloud_path&#125;<br>        response = requests.post(upload_meta_url, params=params, json=payload,verify=<span class=\"hljs-literal\">False</span>).json()<br>        <span class=\"hljs-built_in\">print</span>(payload, params)<br>        <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;上传元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>        <br>        <span class=\"hljs-comment\"># 2. 上传文件到COS</span><br>        cos_url = response[<span class=\"hljs-string\">&#x27;url&#x27;</span>]<br>       <br>        key = cloud_path.split(<span class=\"hljs-string\">&#x27;/&#x27;</span>)[-<span class=\"hljs-number\">1</span>]<br>        <span class=\"hljs-built_in\">print</span>(key)<br>        files = &#123;<br>            <span class=\"hljs-string\">&quot;Signature&quot;</span>:(<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;authorization&#x27;</span>]),<br>            <span class=\"hljs-string\">&quot;x-cos-meta-fileid&quot;</span>: (<span class=\"hljs-literal\">None</span>, response[<span class=\"hljs-string\">&#x27;cos_file_id&#x27;</span>]),<br>            <span class=\"hljs-string\">&quot;x-cos-security-token&quot;</span>: (<span class=\"hljs-literal\">None</span>,response[<span class=\"hljs-string\">&#x27;token&#x27;</span>]),<br>            <span class=\"hljs-string\">&quot;key&quot;</span>: (<span class=\"hljs-literal\">None</span>, cloud_path),<br>            <span class=\"hljs-string\">&#x27;file&#x27;</span>:(key, <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;rb&#x27;</span>)),<br>        &#125;<br><br>        upload_resp = requests.post(cos_url, files=files, verify=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-keyword\">if</span> upload_resp.status_code != <span class=\"hljs-number\">204</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;COS上传失败: <span class=\"hljs-subst\">&#123;upload_resp.text&#125;</span>&quot;</span>, upload_resp)<br>       <br>        <span class=\"hljs-keyword\">return</span> response[<span class=\"hljs-string\">&#x27;file_id&#x27;</span>]<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">download_file</span>(<span class=\"hljs-params\">self, file_id, local_path</span>):<br>        <span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">        从微信云存储下载文件</span><br><span class=\"hljs-string\">        :param file_id: 文件ID（上传时返回的file_id）</span><br><span class=\"hljs-string\">        :param local_path: 本地存储路径</span><br><span class=\"hljs-string\">        &quot;&quot;&quot;</span><br>        <span class=\"hljs-variable language_\">self</span>._ensure_access_token()<br>        <br>        <span class=\"hljs-comment\"># 1. 获取下载链接</span><br>        download_meta_url = <span class=\"hljs-string\">&quot;https://api.weixin.qq.com/tcb/batchdownloadfile&quot;</span><br>        params = &#123;<span class=\"hljs-string\">&quot;access_token&quot;</span>: <span class=\"hljs-variable language_\">self</span>.access_token&#125;<br>        payload = &#123;<br>            <span class=\"hljs-string\">&quot;env&quot;</span>: <span class=\"hljs-variable language_\">self</span>.env,<br>            <span class=\"hljs-string\">&quot;file_list&quot;</span>: [&#123;<span class=\"hljs-string\">&quot;fileid&quot;</span>: file_id, <span class=\"hljs-string\">&quot;max_age&quot;</span>: <span class=\"hljs-number\">7200</span>&#125;]<br>        &#125;<br>        response = requests.post(download_meta_url, params=params, json=payload, verify=<span class=\"hljs-literal\">False</span>).json()<br>        <br>        <span class=\"hljs-keyword\">if</span> response.get(<span class=\"hljs-string\">&#x27;errcode&#x27;</span>, <span class=\"hljs-number\">0</span>) != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载元数据获取失败: <span class=\"hljs-subst\">&#123;response&#125;</span>&quot;</span>)<br>        <br>        file_info = response[<span class=\"hljs-string\">&#x27;file_list&#x27;</span>][<span class=\"hljs-number\">0</span>]<br>        <span class=\"hljs-keyword\">if</span> file_info[<span class=\"hljs-string\">&#x27;status&#x27;</span>] != <span class=\"hljs-number\">0</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;下载错误: <span class=\"hljs-subst\">&#123;file_info[<span class=\"hljs-string\">&#x27;errmsg&#x27;</span>]&#125;</span>&quot;</span>)<br>        <br>        <span class=\"hljs-comment\"># 2. 下载文件</span><br>        download_resp = requests.get(file_info[<span class=\"hljs-string\">&#x27;download_url&#x27;</span>], verify=<span class=\"hljs-literal\">False</span>)<br>        <span class=\"hljs-keyword\">if</span> download_resp.status_code != <span class=\"hljs-number\">200</span>:<br>            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;文件下载失败&quot;</span>)<br>        <br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(local_path, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> f:<br>            f.write(download_resp.content)<br>            <br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span><br><br><span class=\"hljs-comment\"># 使用示例</span><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:<br>    <span class=\"hljs-comment\"># 配置信息（需要替换为实际值）</span><br>    APPID = <span class=\"hljs-string\">&quot;your-wechat-appid&quot;</span><br>    SECRET = <span class=\"hljs-string\">&quot;your-wechat-secret&quot;</span><br>    ENV_ID = <span class=\"hljs-string\">&quot;your-cloud-env-id&quot;</span><br>   <br>    <span class=\"hljs-comment\"># 上传示例</span><br>    storage = WeChatCloudStorage(APPID, SECRET, ENV_ID)<br>    <span class=\"hljs-keyword\">try</span>:<br>        file_id = storage.upload_file(<span class=\"hljs-string\">&quot;../test.png&quot;</span>, <span class=\"hljs-string\">&quot;image/test2.png&quot;</span>)<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;文件上传成功，File ID: <span class=\"hljs-subst\">&#123;file_id&#125;</span>&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;上传失败: <span class=\"hljs-subst\">&#123;e&#125;</span>&quot;</span>)<br>    <span class=\"hljs-comment\"># 下载示例</span><br>    <span class=\"hljs-keyword\">try</span>:<br>        storage.download_file(file_id, <span class=\"hljs-string\">&quot;downloaded_image.jpg&quot;</span>)<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;文件下载成功&quot;</span>)<br>    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:<br>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;下载失败: <span class=\"hljs-subst\">&#123;e&#125;</span>&quot;</span>)<br><br><br></code></pre></td></tr></table></figure>\n\n<p>以上就是关于对象存储管理相关的内容了，如果你在开发类似的功能过程中有类似的idea或者遇到一些难搞的坑，欢迎一起讨论。</p>\n"},{"title":"糟糕，Vite proxy error ECONNREFUSED","_content":" \n\n最近正在开发一款应用，前端框架是vite+vue, 后台服务也是使用的node+express组合，当一切工作都在顺利进行的时候，不出意外，意外出现了。\n\n当我尝试使用axios直连本地服务地址的时候，丝滑得如同德芙一样。然而每次请求地址都需要拼写全链接--即host+port+service-path，这是一件很愚蠢的事情。\n\n为了让事情变得简单一些，减少重复工作，我和聪明的各位一样决定使用vite的代理。\n\n因为web的地址9000，本地启动的后台服务地址是8080，所以我最初的配置如下：\n\n``` javascript\nexport default defineConfig({\n  # ...   其它配置\n  server: {\n    host: '0.0.0.0',\n    port: 9000,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8080/',\n        changeOrigin: true,\n      }\n    }\n  }\n})\n\n```\n\n然后它却对我说 `Vite proxy error ECONNREFUSED`\n\n那么多大风大浪都过去了，居然在这小阴沟里翻了船，忍不了！\n\n## 排查方向\n因为涉及到vite server配置，其本质就是http-server以及http-agent的问题,  于是从从下面几个方向做了一一排查\n\n- **Vite的服务器配置**\n\n- **端口占用或防火墙设置**\n\n- **浏览器或系统代理设置**\n\n- ​**Hosts文件配置问题或DNS解析问题**\n\n\n## 测试验证\n- 首先vite服务配置问题是最先被排除的，因为该项目配置已经经历了时间的考验，在很多项目中都有使用\n\n- 然后通过 `netstat -ano | find 9000` 检查并未发现端口被占用的情况\n\n- 至于代理，确实是开了--科学上网使用。然而在关闭之后，似乎没有起作用，所以问题不在这里。\n\n- 那么还剩最后一条，当我检查我本地的hosts文件时，纳尼，localhost没有配置指向本地的环回地址127.0.0.1，难道是这里出问题了吗。\n\n  为了验证这个想法，我将配置中的target做了以下修改:\n\n  ~~target: 'http://localhost:8080/'~~ </br>\n    target: 'http://127.0.0.1:8080/'\n\n  果然，生效了，看来之前的猜测是对的。\n\n</br>\n\n所以目前至少有两种方法可以解决该问题：\n\n  - **在vite配置中将localhost替换成127.0.0.1**\n  - **在hosts文件中添加localhost的地址**\n\n当然，第二种方式显然是更合理的，几乎是种一劳永逸的方法，在日后不同项目的开发中，总是难免还会存在使用localhost的情况。因此，建议在hosts文件中配置它。\n\n## 总结\n在这个问题中呢，其实也牵扯出更多的关于http server 和 http client相关的知识。不论是server的创建还是client的连接，正确的ip和端口是需要保证的。\n\n当遇到类似的情况时，不妨从底层思考在复杂的封装工具和配置的背后，它的本质是什么，以及正常使用时需要哪些因子的参与。","source":"_posts/Vite-server-error.md","raw":"---\ntitle: 糟糕，Vite proxy error ECONNREFUSED\n--- \n\n最近正在开发一款应用，前端框架是vite+vue, 后台服务也是使用的node+express组合，当一切工作都在顺利进行的时候，不出意外，意外出现了。\n\n当我尝试使用axios直连本地服务地址的时候，丝滑得如同德芙一样。然而每次请求地址都需要拼写全链接--即host+port+service-path，这是一件很愚蠢的事情。\n\n为了让事情变得简单一些，减少重复工作，我和聪明的各位一样决定使用vite的代理。\n\n因为web的地址9000，本地启动的后台服务地址是8080，所以我最初的配置如下：\n\n``` javascript\nexport default defineConfig({\n  # ...   其它配置\n  server: {\n    host: '0.0.0.0',\n    port: 9000,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8080/',\n        changeOrigin: true,\n      }\n    }\n  }\n})\n\n```\n\n然后它却对我说 `Vite proxy error ECONNREFUSED`\n\n那么多大风大浪都过去了，居然在这小阴沟里翻了船，忍不了！\n\n## 排查方向\n因为涉及到vite server配置，其本质就是http-server以及http-agent的问题,  于是从从下面几个方向做了一一排查\n\n- **Vite的服务器配置**\n\n- **端口占用或防火墙设置**\n\n- **浏览器或系统代理设置**\n\n- ​**Hosts文件配置问题或DNS解析问题**\n\n\n## 测试验证\n- 首先vite服务配置问题是最先被排除的，因为该项目配置已经经历了时间的考验，在很多项目中都有使用\n\n- 然后通过 `netstat -ano | find 9000` 检查并未发现端口被占用的情况\n\n- 至于代理，确实是开了--科学上网使用。然而在关闭之后，似乎没有起作用，所以问题不在这里。\n\n- 那么还剩最后一条，当我检查我本地的hosts文件时，纳尼，localhost没有配置指向本地的环回地址127.0.0.1，难道是这里出问题了吗。\n\n  为了验证这个想法，我将配置中的target做了以下修改:\n\n  ~~target: 'http://localhost:8080/'~~ </br>\n    target: 'http://127.0.0.1:8080/'\n\n  果然，生效了，看来之前的猜测是对的。\n\n</br>\n\n所以目前至少有两种方法可以解决该问题：\n\n  - **在vite配置中将localhost替换成127.0.0.1**\n  - **在hosts文件中添加localhost的地址**\n\n当然，第二种方式显然是更合理的，几乎是种一劳永逸的方法，在日后不同项目的开发中，总是难免还会存在使用localhost的情况。因此，建议在hosts文件中配置它。\n\n## 总结\n在这个问题中呢，其实也牵扯出更多的关于http server 和 http client相关的知识。不论是server的创建还是client的连接，正确的ip和端口是需要保证的。\n\n当遇到类似的情况时，不妨从底层思考在复杂的封装工具和配置的背后，它的本质是什么，以及正常使用时需要哪些因子的参与。","slug":"Vite-server-error","published":1,"date":"2025-05-23T11:39:55.335Z","updated":"2025-05-23T11:39:55.335Z","comments":1,"layout":"post","photos":[],"_id":"cmb0qjkpt000450upatq31y8w","content":"<p>最近正在开发一款应用，前端框架是vite+vue, 后台服务也是使用的node+express组合，当一切工作都在顺利进行的时候，不出意外，意外出现了。</p>\n<p>当我尝试使用axios直连本地服务地址的时候，丝滑得如同德芙一样。然而每次请求地址都需要拼写全链接–即host+port+service-path，这是一件很愚蠢的事情。</p>\n<p>为了让事情变得简单一些，减少重复工作，我和聪明的各位一样决定使用vite的代理。</p>\n<p>因为web的地址9000，本地启动的后台服务地址是8080，所以我最初的配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  # ...   其它配置<br>  <span class=\"hljs-attr\">server</span>: &#123;<br>    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;0.0.0.0&#x27;</span>,<br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">9000</span>,<br>    <span class=\"hljs-attr\">proxy</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;/api&#x27;</span>: &#123;<br>        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">&#x27;http://localhost:8080/&#x27;</span>,<br>        <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>然后它却对我说 <code>Vite proxy error ECONNREFUSED</code></p>\n<p>那么多大风大浪都过去了，居然在这小阴沟里翻了船，忍不了！</p>\n<h2 id=\"排查方向\"><a href=\"#排查方向\" class=\"headerlink\" title=\"排查方向\"></a>排查方向</h2><p>因为涉及到vite server配置，其本质就是http-server以及http-agent的问题,  于是从从下面几个方向做了一一排查</p>\n<ul>\n<li><p><strong>Vite的服务器配置</strong></p>\n</li>\n<li><p><strong>端口占用或防火墙设置</strong></p>\n</li>\n<li><p><strong>浏览器或系统代理设置</strong></p>\n</li>\n<li><p>​<strong>Hosts文件配置问题或DNS解析问题</strong></p>\n</li>\n</ul>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><ul>\n<li><p>首先vite服务配置问题是最先被排除的，因为该项目配置已经经历了时间的考验，在很多项目中都有使用</p>\n</li>\n<li><p>然后通过 <code>netstat -ano | find 9000</code> 检查并未发现端口被占用的情况</p>\n</li>\n<li><p>至于代理，确实是开了–科学上网使用。然而在关闭之后，似乎没有起作用，所以问题不在这里。</p>\n</li>\n<li><p>那么还剩最后一条，当我检查我本地的hosts文件时，纳尼，localhost没有配置指向本地的环回地址127.0.0.1，难道是这里出问题了吗。</p>\n<p>为了验证这个想法，我将配置中的target做了以下修改:</p>\n<p><del>target: ‘<a href=\"http://localhost:8080/\">http://localhost:8080/</a>‘</del> </br><br>  target: ‘<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a>‘</p>\n<p>果然，生效了，看来之前的猜测是对的。</p>\n</li>\n</ul>\n</br>\n\n<p>所以目前至少有两种方法可以解决该问题：</p>\n<ul>\n<li><strong>在vite配置中将localhost替换成127.0.0.1</strong></li>\n<li><strong>在hosts文件中添加localhost的地址</strong></li>\n</ul>\n<p>当然，第二种方式显然是更合理的，几乎是种一劳永逸的方法，在日后不同项目的开发中，总是难免还会存在使用localhost的情况。因此，建议在hosts文件中配置它。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这个问题中呢，其实也牵扯出更多的关于http server 和 http client相关的知识。不论是server的创建还是client的连接，正确的ip和端口是需要保证的。</p>\n<p>当遇到类似的情况时，不妨从底层思考在复杂的封装工具和配置的背后，它的本质是什么，以及正常使用时需要哪些因子的参与。</p>\n","excerpt":"","more":"<p>最近正在开发一款应用，前端框架是vite+vue, 后台服务也是使用的node+express组合，当一切工作都在顺利进行的时候，不出意外，意外出现了。</p>\n<p>当我尝试使用axios直连本地服务地址的时候，丝滑得如同德芙一样。然而每次请求地址都需要拼写全链接–即host+port+service-path，这是一件很愚蠢的事情。</p>\n<p>为了让事情变得简单一些，减少重复工作，我和聪明的各位一样决定使用vite的代理。</p>\n<p>因为web的地址9000，本地启动的后台服务地址是8080，所以我最初的配置如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>(&#123;<br>  # ...   其它配置<br>  <span class=\"hljs-attr\">server</span>: &#123;<br>    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&#x27;0.0.0.0&#x27;</span>,<br>    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">9000</span>,<br>    <span class=\"hljs-attr\">proxy</span>: &#123;<br>      <span class=\"hljs-string\">&#x27;/api&#x27;</span>: &#123;<br>        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">&#x27;http://localhost:8080/&#x27;</span>,<br>        <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure>\n\n<p>然后它却对我说 <code>Vite proxy error ECONNREFUSED</code></p>\n<p>那么多大风大浪都过去了，居然在这小阴沟里翻了船，忍不了！</p>\n<h2 id=\"排查方向\"><a href=\"#排查方向\" class=\"headerlink\" title=\"排查方向\"></a>排查方向</h2><p>因为涉及到vite server配置，其本质就是http-server以及http-agent的问题,  于是从从下面几个方向做了一一排查</p>\n<ul>\n<li><p><strong>Vite的服务器配置</strong></p>\n</li>\n<li><p><strong>端口占用或防火墙设置</strong></p>\n</li>\n<li><p><strong>浏览器或系统代理设置</strong></p>\n</li>\n<li><p>​<strong>Hosts文件配置问题或DNS解析问题</strong></p>\n</li>\n</ul>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><ul>\n<li><p>首先vite服务配置问题是最先被排除的，因为该项目配置已经经历了时间的考验，在很多项目中都有使用</p>\n</li>\n<li><p>然后通过 <code>netstat -ano | find 9000</code> 检查并未发现端口被占用的情况</p>\n</li>\n<li><p>至于代理，确实是开了–科学上网使用。然而在关闭之后，似乎没有起作用，所以问题不在这里。</p>\n</li>\n<li><p>那么还剩最后一条，当我检查我本地的hosts文件时，纳尼，localhost没有配置指向本地的环回地址127.0.0.1，难道是这里出问题了吗。</p>\n<p>为了验证这个想法，我将配置中的target做了以下修改:</p>\n<p><del>target: ‘<a href=\"http://localhost:8080/\">http://localhost:8080/</a>‘</del> </br><br>  target: ‘<a href=\"http://127.0.0.1:8080/\">http://127.0.0.1:8080/</a>‘</p>\n<p>果然，生效了，看来之前的猜测是对的。</p>\n</li>\n</ul>\n</br>\n\n<p>所以目前至少有两种方法可以解决该问题：</p>\n<ul>\n<li><strong>在vite配置中将localhost替换成127.0.0.1</strong></li>\n<li><strong>在hosts文件中添加localhost的地址</strong></li>\n</ul>\n<p>当然，第二种方式显然是更合理的，几乎是种一劳永逸的方法，在日后不同项目的开发中，总是难免还会存在使用localhost的情况。因此，建议在hosts文件中配置它。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这个问题中呢，其实也牵扯出更多的关于http server 和 http client相关的知识。不论是server的创建还是client的连接，正确的ip和端口是需要保证的。</p>\n<p>当遇到类似的情况时，不妨从底层思考在复杂的封装工具和配置的背后，它的本质是什么，以及正常使用时需要哪些因子的参与。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}