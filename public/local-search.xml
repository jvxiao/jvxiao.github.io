<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>糟糕，Vite proxy error ECONNREFUSED</title>
    <link href="/2025/05/23/Vite-server-error/"/>
    <url>/2025/05/23/Vite-server-error/</url>
    
    <content type="html"><![CDATA[<p>最近正在开发一款应用，前端框架是vite+vue, 后台服务也是使用的node+express组合，当一切工作都在顺利进行的时候，不出意外，意外出现了。</p><p>当我尝试使用axios直连本地服务地址的时候，丝滑得如同德芙一样。然而每次请求地址都需要拼写全链接–即host+port+service-path，这是一件很愚蠢的事情。</p><p>为了让事情变得简单一些，减少重复工作，我和聪明的各位一样决定使用vite的代理。</p><p>因为web的地址9000，本地启动的后台服务地址是8080，所以我最初的配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  # ...   其它配置<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>,<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8080/&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>然后它却对我说 <code>Vite proxy error ECONNREFUSED</code></p><p>那么多大风大浪都过去了，居然在这小阴沟里翻了船，忍不了！</p><h2 id="排查方向"><a href="#排查方向" class="headerlink" title="排查方向"></a>排查方向</h2><p>因为涉及到vite server配置，其本质就是http-server以及http-agent的问题,  于是从从下面几个方向做了一一排查</p><ul><li><p><strong>Vite的服务器配置</strong></p></li><li><p><strong>端口占用或防火墙设置</strong></p></li><li><p><strong>浏览器或系统代理设置</strong></p></li><li><p>​<strong>Hosts文件配置问题或DNS解析问题</strong></p></li></ul><h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><ul><li><p>首先vite服务配置问题是最先被排除的，因为该项目配置已经经历了时间的考验，在很多项目中都有使用</p></li><li><p>然后通过 <code>netstat -ano | find 9000</code> 检查并未发现端口被占用的情况</p></li><li><p>至于代理，确实是开了–科学上网使用。然而在关闭之后，似乎没有起作用，所以问题不在这里。</p></li><li><p>那么还剩最后一条，当我检查我本地的hosts文件时，纳尼，localhost没有配置指向本地的环回地址127.0.0.1，难道是这里出问题了吗。</p><p>为了验证这个想法，我将配置中的target做了以下修改:</p><p><del>target: ‘<a href="http://localhost:8080/">http://localhost:8080/</a>‘</del> </br><br>  target: ‘<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080/</a>‘</p><p>果然，生效了，看来之前的猜测是对的。</p></li></ul></br><p>所以目前至少有两种方法可以解决该问题：</p><ul><li><strong>在vite配置中将localhost替换成127.0.0.1</strong></li><li><strong>在hosts文件中添加localhost的地址</strong></li></ul><p>当然，第二种方式显然是更合理的，几乎是种一劳永逸的方法，在日后不同项目的开发中，总是难免还会存在使用localhost的情况。因此，建议在hosts文件中配置它。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这个问题中呢，其实也牵扯出更多的关于http server 和 http client相关的知识。不论是server的创建还是client的连接，正确的ip和端口是需要保证的。</p><p>当遇到类似的情况时，不妨从底层思考在复杂的封装工具和配置的背后，它的本质是什么，以及正常使用时需要哪些因子的参与。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue依赖收集和触发，看这些关键源码</title>
    <link href="/2025/05/23/Dependencies-collecting%20of%20vue3/"/>
    <url>/2025/05/23/Dependencies-collecting%20of%20vue3/</url>
    
    <content type="html"><![CDATA[<p>从Vue开始较大范围在前端应用开始，关于Vue一些基础知识的讨论和面试问题就在开发圈子里基本上就跟前几年的股票和基金一样，楼下摆摊卖酱香饼的阿姨都能说上几句那种。找过前端开发工作或者正在找开发工作的前端都知道，面试官基本上都有那么几个常问的问题，而网上呢也有那么一套可以用来背诵的“八股文”，自己懂多少没有关系，应付面试官还是够的，可以算是屡试不爽吧。</p><p>背诵面试八股文无可厚非的，可以说是每一个找工作的人都干过和必须干的事情，因为我们都要工作，都要恰饭。只有恰上饭，才能去谈些伟大的理想。背“八股文”本是一种捷径，尤其是本身对一门技术不是特别了解的开发者，就是那种刚刚能使用它那种。</p><p>在众多关于Vue的面试“八股文”中，今天讲的是其中最常问的一个–Vue中的依赖收集。本文也将从代码层面，讲清楚关于依赖收集的几个问题。</p><ul><li>收集的依赖是什么？（what）</li><li>怎么收集的依赖？  （how）</li><li>什么时候收集？     (when)</li></ul><p>至于为什么要收集依赖(why)，现在就可以先告诉答案。<strong>收集依赖，其核心作用是在数据发生变化的时候可以做出相应的动作，比如刷新视图</strong>，为了执行这一动作，我们就得知道是谁在什么时候发生了变化，所以我们要收集依赖。</p><p>下面我们结合代码，尽可能通俗的讲解关于上述的三个问题：</p><p>在搞清楚依赖收集之前，先把源码中几个概念性的东西说明一下，建议下载<a href="https://github.com/vuejs/core">Vue3源码</a>进行对照着看：</p><ul><li><p><strong>Dep</strong>: 本质上是一个Map实例，同时在map实例上绑定一个celanup函数和一个computed属性。</p></li><li><p><strong>ReactiveEffect</strong>: 相当于2.x版本中的Watcher类, 里头有一个deps数组，用来存dep, 每个实例里面都有一个track_id用来标识唯一性。</p></li><li><p><strong>effect函数</strong>： 里头实例化一个ReactiveEffect对象，同时绑定一些options, 返回值是一个runner,实际上是对ReactiveEffect对象行为的一种业务封装。</p></li></ul><p>下面以一行简单的代码开始关于依赖收集的探索。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">// packages/reactivity/src/ref.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> ref&lt;T&gt;(<span class="hljs-attr">value</span>: T): <span class="hljs-title class_">Ref</span>&lt;<span class="hljs-title class_">UnwrapRef</span>&lt;T&gt;&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> ref&lt;T = any&gt;(): <span class="hljs-title class_">Ref</span>&lt;T | <span class="hljs-literal">undefined</span>&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ref</span>(<span class="hljs-params">value?: unknown</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createRef</span>(value, <span class="hljs-literal">false</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>ref函数主要是对createRef做了一个函数包装，主要内容看到createRef函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">// packages/reactivity/src/ref.ts</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRef</span>(<span class="hljs-params">rawValue: unknown, shallow: boolean</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRef</span>(rawValue)) &#123;<br>    <span class="hljs-keyword">return</span> rawValue<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefImpl</span>(rawValue, shallow)<br>&#125;<br></code></pre></td></tr></table></figure><p>createRef函数在这里对原始数据rawValue做了一个判断，如果数据本身就是响应式数据了，就直接返回它本身，如果不是，就返回一个实例化的RefImpl对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">// packages/reactivity/src/ref.ts</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefImpl</span>&lt;T&gt; &#123;<br>  private <span class="hljs-attr">_value</span>: T<br>  private <span class="hljs-attr">_rawValue</span>: T<br><br>  public dep?: <span class="hljs-title class_">Dep</span> = <span class="hljs-literal">undefined</span><br>  public readonly __v_isRef = <span class="hljs-literal">true</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    value: T,</span><br><span class="hljs-params">    public readonly __v_isShallow: boolean,</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = __v_isShallow ? value : <span class="hljs-title function_">toRaw</span>(value)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = __v_isShallow ? value : <span class="hljs-title function_">toReactive</span>(value)<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>    <span class="hljs-title function_">trackRefValue</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span><br>  &#125;<br><br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newVal</span>) &#123;<br>    <span class="hljs-keyword">const</span> useDirectValue =<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">__v_isShallow</span> || <span class="hljs-title function_">isShallow</span>(newVal) || <span class="hljs-title function_">isReadonly</span>(newVal)<br>    newVal = useDirectValue ? newVal : <span class="hljs-title function_">toRaw</span>(newVal)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasChanged</span>(newVal, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span>)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = newVal<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = useDirectValue ? newVal : <span class="hljs-title function_">toReactive</span>(newVal)<br>      <span class="hljs-title function_">triggerRefValue</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-title class_">DirtyLevels</span>.<span class="hljs-property">Dirty</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点来了，RefImple类里头，才是真正包含了从原始数据变成响应式数据，以及收集依赖的逻辑。在一个refImpl实例中，里面有一个dep对象，初始值是undefined， 这个dep会这trackRefValue函数执行的过程中被赋值。</p><p>下面代码从17-21(get value())行，就是依赖收集的过程：当一个ref型响应式数据通过.value访问时，会触发RefImpl实例中的getter。它会首先执行一个trackValue函数，然后再返回_value值，所以接下来重点看关注trackValue函数，所以<strong>依赖是在数据被访问的时候触发的</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">// packages/reactivity/src/ref.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trackRefValue</span>(<span class="hljs-params">ref: RefBase&lt;any&gt;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (shouldTrack &amp;&amp; activeEffect) &#123;<br>    ref = <span class="hljs-title function_">toRaw</span>(ref)<br>    <span class="hljs-title function_">trackEffect</span>(<br>      activeEffect,<br>      (ref.<span class="hljs-property">dep</span> ??= <span class="hljs-title function_">createDep</span>(<br>        <span class="hljs-function">() =&gt;</span> (ref.<span class="hljs-property">dep</span> = <span class="hljs-literal">undefined</span>),<br>        ref <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">ComputedRefImpl</span> ? ref : <span class="hljs-literal">undefined</span>,<br>      )),<br>      __DEV__<br>        ? &#123;<br>            <span class="hljs-attr">target</span>: ref,<br>            <span class="hljs-attr">type</span>: <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>,<br>            <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>          &#125;<br>        : <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>,<br>    )<br>  &#125;<br>&#125;u<br></code></pre></td></tr></table></figure><p>trackRefValue函数中有两个变量，shouldTrack和activeEffect，暂时我们不去理会它们，只要知道shouldTrack是一个布尔值，activeEffect是一个RectiveEffect实例。</p><p>在shouldTrack值为true且activeEffect有值的情况下，首先会将ref转成原始值，然后再执行trackEffect函数。</p><p>在执行trackEffect函数的中，第一个是activeEffect, 在任意时刻它在全局是具有唯一性的；第二个是ref.dep, 其中给ref.dep的赋值函数createDep返回一个Dep实例，前面说过的，本质是个map; 第三个函数是个对象，是关于开发环境下debug的一些配置。</p><p>在这里，我们可以看到，之前说个的ref实例中原来是undefined的ref.dep赋值，就在此处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">// packages/reactivity/src/effect.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trackEffect</span>(<span class="hljs-params"></span><br><span class="hljs-params">  effect: ReactiveEffect,</span><br><span class="hljs-params">  dep: Dep,</span><br><span class="hljs-params">  debuggerEventExtraInfo?: DebuggerEventExtraInfo,</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (dep.<span class="hljs-title function_">get</span>(effect) !== effect.<span class="hljs-property">_trackId</span>) &#123;<br>    dep.<span class="hljs-title function_">set</span>(effect, effect.<span class="hljs-property">_trackId</span>)<br>    <span class="hljs-keyword">const</span> oldDep = effect.<span class="hljs-property">deps</span>[effect.<span class="hljs-property">_depsLength</span>]<br>    <span class="hljs-keyword">if</span> (oldDep !== dep) &#123;<br>      <span class="hljs-keyword">if</span> (oldDep) &#123;<br>        <span class="hljs-title function_">cleanupDepEffect</span>(oldDep, effect)<br>      &#125;<br>      effect.<span class="hljs-property">deps</span>[effect.<span class="hljs-property">_depsLength</span>++] = dep<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      effect.<span class="hljs-property">_depsLength</span>++<br>    &#125;<br>    <span class="hljs-keyword">if</span> (__DEV__) &#123;<br>      effect.<span class="hljs-property">onTrack</span>?.(<span class="hljs-title function_">extend</span>(&#123; effect &#125;, debuggerEventExtraInfo!))<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>trackEffect函数绝对是依赖收集重头戏中的重头戏。</p><p>首先上来就是一个判断，dep, 也就是ref中的dep，本质是个map，判断里面是否存在对应的effect, 如果没有，就执行接下来的操作。</p><p>dep将effect也就是activeEffect作为键，其_trackId作为值添加到dep，<strong>所以我们说的收集的依赖指的就是effect对象</strong>。同时我们得到了一个关于<strong>dep和effect之间的第一关系，即一个dep可以对应多个effect</strong>。</p><p>接着，将effects实例中deps数组中最后一个值取出来与当前的dep值进行比对，看是否是同一个值如果不是同一个值，而且oldDep是有值的，那么就执行cleanupDepEffect操作。如果oldDep为空值，就跳过这一步，直接往effect.deps中添加dep。因此，我们在这里得到了关于dep和effect第二个结论，<strong>一个effect可以对应多个dep</strong>。</p><p>代码还有一部分，接着往下看，在oldDep不等于当前dep的时候，直接对effec_depsLength进行加操作，也就是说，effect.deps值没有变，但是_depsLength值却超出了deps数组边界的情况，这也就是为什么上面要判断oldDep是否存在的原因。</p><p>由上面上面两个结论我们可以得出，一个dep中可以对应多个effect, 一个effect也可以对应多个dep, 因此dep和effect的关系是多对多的关系。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>收集的依赖是什么？（what）</p><blockquote><p>我们常说的收集的依赖是effect对象</p></blockquote></li><li><p>怎么收集的依赖？  （how）</p><blockquote><p>判断当前数据dep中有没有activeEffct, 没有就加进去。把大象关进冰箱里要几步！！！</p></blockquote></li><li><p>什么时候收集？     (when)</p><blockquote><p>在数据被访问时，触发getter，进行依赖收集</p></blockquote></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Javascript中两种不同的继承方式对比</title>
    <link href="/2025/05/23/Differences-between-two-kinds-inherit-approches/"/>
    <url>/2025/05/23/Differences-between-two-kinds-inherit-approches/</url>
    
    <content type="html"><![CDATA[<h1 id="Dog-prototype-new-Animal-和-Dog-prototype-proto-Animal-prototype的两种继承方式的区别"><a href="#Dog-prototype-new-Animal-和-Dog-prototype-proto-Animal-prototype的两种继承方式的区别" class="headerlink" title="Dog.prototype &#x3D; new Animal() 和 Dog.prototype.proto &#x3D; Animal.prototype的两种继承方式的区别"></a>Dog.prototype &#x3D; new Animal() 和 Dog.prototype.proto &#x3D; Animal.prototype的两种继承方式的区别</h1><h2 id="1-Dog-prototype-new-Animal"><a href="#1-Dog-prototype-new-Animal" class="headerlink" title="1. Dog.prototype &#x3D; new Animal()"></a>1. Dog.prototype &#x3D; new Animal()</h2><h3 id="语法和机制"><a href="#语法和机制" class="headerlink" title="语法和机制"></a>语法和机制</h3><ul><li><strong>​目的</strong>：通过创建 Animal 的实例来继承其原型链。</li><li>​<strong>底层逻辑</strong>：将 Dog.prototype 替换为一个新的 Animal 实例。</li><li><strong>​原型链结构</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> → <span class="hljs-title class_">Animal</span> 实例 → <span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> → <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> → <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>因此，Dog 的实例通过原型链可以访问 Animal 实例的属性和 Animal.prototype 的方法。</p><h3 id="​特点"><a href="#​特点" class="headerlink" title="​特点"></a>​特点</h3><ul><li><p><strong>​调用父类构造函数</strong>： 会执行 Animal() 构造函数，初始化父类属性（如 this.name)</p></li><li><p><strong>继承实例属性</strong>：Dog.prototype 会包含 Animal 实例的属性（如 name），即使这些属性是实例级别的。</p></li><li><p><strong>覆盖原有原型</strong>：替换 Dog.prototype 后，原先定义在 Dog.prototype 上的方法会被丢失，需重新添加。<br>​- <strong>constructor 问题</strong>：Dog.prototype.constructor 会指向 Animal，需手动修正：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Dog</span>;<br></code></pre></td></tr></table></figure><p>​示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Animal&quot;</span>; &#125;<br><span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">eat</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Eat&quot;</span>); &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(); <span class="hljs-comment">// 继承</span><br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Dog</span>; <span class="hljs-comment">// 修复 constructor</span><br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog.<span class="hljs-property">name</span>); <span class="hljs-comment">// &quot;Animal&quot;（继承自 Animal 实例）</span><br>dog.<span class="hljs-title function_">eat</span>();           <span class="hljs-comment">// &quot;Eat&quot;（继承自 Animal.prototype）</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="​2-Dog-prototype-proto-Animal-prototype"><a href="#​2-Dog-prototype-proto-Animal-prototype" class="headerlink" title="​2. Dog.prototype.proto &#x3D; Animal.prototype"></a>​2. Dog.prototype.proto &#x3D; Animal.prototype</h2><h3 id="​语法和机制"><a href="#​语法和机制" class="headerlink" title="​语法和机制"></a>​语法和机制</h3><ul><li><p>​目的：直接让 Dog.prototype 的 proto 属性（即 __proto__）指向 Animal.prototype。</p></li><li><p>​底层逻辑：修改 Dog.prototype 的原型链。</p></li></ul><p>​-  原型链结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> → <span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> → <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> → <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>因此，Dog 的实例直接通过原型链访问 Animal.prototype 的方法，但不会继承 Animal 实例的属性。</p><h3 id="​特点-1"><a href="#​特点-1" class="headerlink" title="​特点"></a>​特点</h3><ul><li><strong>​不调用父类构造函数</strong>：不会执行 Animal()，避免副作用（如初始化逻辑）。</li></ul><p>​- <strong>仅继承原型方法</strong>：Dog 的实例只能访问 Animal.prototype 的方法，无法获取 Animal 实例的属性（如 name）。</p><ul><li><p><strong>​保留原有原型</strong>：不会覆盖 Dog.prototype 上已定义的方法。</p></li><li><p><strong>​非标准操作</strong>：直接修改 proto（或 __proto__）是非标准的，可能影响性能，推荐用 Object.setPrototypeOf()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(<span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br></code></pre></td></tr></table></figure><p>​示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Animal&quot;</span>; &#125;<br><span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">eat</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Eat&quot;</span>); &#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Dog</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">proto</span> = <span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// 直接修改 proto</span><br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dog.<span class="hljs-property">name</span>); <span class="hljs-comment">// undefined（未继承 Animal 实例属性）</span><br>dog.<span class="hljs-title function_">eat</span>();           <span class="hljs-comment">// &quot;Eat&quot;（继承自 Animal.prototype）</span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="​关键区别总结"><a href="#​关键区别总结" class="headerlink" title="​关键区别总结"></a>​关键区别总结</h3><h3 id="​关键区别总结-1"><a href="#​关键区别总结-1" class="headerlink" title="​关键区别总结"></a>​<strong>关键区别总结</strong></h3><table><thead><tr><th>​<strong>特性</strong></th><th><code>Dog.prototype = new Animal()</code></th><th><code>Dog.prototype.__proto__ = Animal.prototype</code></th></tr></thead><tbody><tr><td>​<strong>调用父类构造函数</strong></td><td>✅ 是（执行 <code>Animal()</code>，初始化父类实例属性）</td><td>❌ 否（直接链接原型，不调用构造函数）</td></tr><tr><td>​<strong>继承实例属性</strong></td><td>✅ 是（继承 <code>Animal</code> 实例的属性，如 <code>this.name</code>）</td><td>❌ 否（仅继承原型方法，不包含实例属性）</td></tr><tr><td>​<strong>覆盖原型对象</strong></td><td>✅ 是（完全替换 <code>Dog.prototype</code> 为新实例）</td><td>❌ 否（仅修改原型的 <code>__proto__</code>，保留原有属性和方法）</td></tr><tr><td>​<strong>constructor修正</strong></td><td>✅ 需手动修复（<code>Dog.prototype.constructor = Dog</code>）</td><td>✅ 通常无需修复（原型链未改变构造函数引用）</td></tr><tr><td>​<strong>兼容性</strong></td><td>⚠️ 传统写法，但可能引发副作用（如多余属性继承）</td><td>⚠️ 非标准操作（直接修改 <code>__proto__</code> 可能影响性能）</td></tr><tr><td>​<strong>推荐程度</strong></td><td>❌ 不推荐（问题多，已过时）</td><td>⚠️ 慎用（可用 <code>Object.setPrototypeOf()</code> 替代）</td></tr><tr><td>​<strong>原型链结构</strong></td><td><code>Dog.prototype → Animal 实例 → Animal.prototype</code></td><td><code>Dog.prototype → Animal.prototype → Object.prototype</code></td></tr><tr><td>​<strong>是否继承父类方法</strong></td><td>✅ 是（通过 <code>Animal.prototype</code>）</td><td>✅ 是（直接链接到 <code>Animal.prototype</code>）</td></tr><tr><td>​<strong>是否继承父类实例方法</strong></td><td>❌ 否（仅继承原型方法，实例属性不会被继承）</td><td>❌ 否（同上）</td></tr><tr><td>​<strong>典型用途</strong></td><td>早期原型链继承（已不推荐）</td><td>理论原型链扩展（极少使用，多用 <code>Object.create()</code>）</td></tr><tr><td>​<strong>替代方案</strong></td><td><code>Object.create(Animal.prototype)</code> + 手动初始化属性</td><td><code>Object.setPrototypeOf(Dog.prototype, Animal.prototype)</code></td></tr><tr><td>​<strong>ES6 推荐写法</strong></td><td><code>class Dog extends Animal &#123;&#125;</code></td><td><code>class Dog extends Animal &#123;&#125;</code></td></tr></tbody></table><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul><li><p>​<strong>Dog.prototype &#x3D; new Animal() 的问题</strong>：</p><ul><li>强制调用父类构造函数，可能导致不必要的初始化逻辑（如 Animal 的 this.name）。</li><li>会将父类实例的属性（如 name）提升为 Dog.prototype 的属性，导致所有子类实例共享这些属性（可能引发意外行为）。</li></ul></li><li><p>​<strong>Dog.prototype.<strong>proto</strong> &#x3D; Animal.prototype 的问题</strong>：</p><ul><li>​非标准操作：虽然浏览器支持，但 <strong>proto</strong> 是内部属性，直接修改可能导致性能下降或兼容性问题。</li><li>​无法继承父类构造函数：子类实例仍需通过 new Dog() 创建，不会自动调用父类构造函数。</li></ul></li></ul><h3 id="​现代替代方案："><a href="#​现代替代方案：" class="headerlink" title="​现代替代方案："></a>​现代替代方案：</h3><p>​**Object.create()**：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">Dog</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Dog</span>;<br></code></pre></td></tr></table></figure><p>直接继承 Animal.prototype，不调用父类构造函数，更安全高效。</p><p>​ES6 class 语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>自动处理原型链和构造函数继承，代码更简洁清晰。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/05/23/Manage-wx-could-service/"/>
    <url>/2025/05/23/Manage-wx-could-service/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="title-关于微信云托管对象存储那点事"><a href="#title-关于微信云托管对象存储那点事" class="headerlink" title="title:关于微信云托管对象存储那点事"></a>title:关于微信云托管对象存储那点事</h2><p>最近在鼓捣一个关于图像处理相关的小程序，出于快速开发考虑，在后台开发这块，没有选择走传统的后台部署服务。毕竟，购买云服务器，注册购买域名以及备案等一系列操作下来，也够让人心累。</p><p>这次选择的是微信开发的平台的云托管，至于为什么走的不是云函数开发，其中就涉及到了开发语言的选择–python, 如果改用javascript重写一下，成本有点高，所以最终方案选择云托管。</p><p>在按照云托管的部署流程一通走下来后，everything is fine. But…</p><p>离大谱的，接口请求和响应，居然不能超过1M, 而我这程序就是关于图像处理的，动不动图片大小就会超过1M。如果非要限制用户图片大小限制在1M以下，太过影响用户体验。</p><p>此外我还想过，在用户端使用图像压缩，但图像太大压缩也会存在超过1M的情况，另外清晰度也会受到影响。</p><p>在微信开发社区和各个IT论坛找了一圈下来，其实没有比较好的解决方案，最终都需要经过一个中间对象存储的过程。</p><p>也就是先将图片上传到云上，让后将图片对象的id作为接口入参传入，后台需要使用到图片的时候根据图片id下载即可，然后将处理后的图片，又要上传回云上，返回给客户端新的图片的id，客户端可以根据图片id来获取资源。如下图</p><!-- ![处理流程](./imgs/微信云对象存储..png) --><div align="center">    <img src="../docs/imgs/微信云对象存储..png" width="80%" height="20%" alt="处理流程"/></div><p>对象存储云平台其实很多，例如比较有名的比如七牛，阿里，还有腾讯云自己的。我这里采用了微信云对象存储，具体的使用呢可以参考 <a href="https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/guide/storage/manage.html">微信云托管对象存储</a>，相应的开发手册可以参考<a href="https://developers.weixin.qq.com/minigame/dev/wxcloudrun/src/development/storage/service/">对象存储-服务端和其他客户端</a></p><p>为了在后续的开发中更好处理类似的情况，我将微信云托管对象存储做成了一个模块，具体实现情况如下。</p><p>首先，需要从自己的小程序或者和云托管平台获取到以下三个重要参数：</p><ul><li><p><strong>APPID</strong> ： “your-wechat-appid”</p></li><li><p><strong>SECRET</strong>： “your-wechat-secret”</p></li><li><p><strong>ENV_ID</strong>： “your-cloud-env-id”</p></li><li><h3 id="文件上传-获取token-获取元数据-上传COS"><a href="#文件上传-获取token-获取元数据-上传COS" class="headerlink" title="文件上传 (获取token-获取元数据-上传COS)"></a>文件上传 (获取token-获取元数据-上传COS)</h3></li></ul><p>微信开放平台如果第三方调用对应接口的话，都是需要鉴权了，所以首先我们需要获取到token值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_refresh_access_token</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取或刷新access_token&quot;&quot;&quot;</span><br>        url = <span class="hljs-string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span><br>        params = &#123;<br>            <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;client_credential&quot;</span>,<br>            <span class="hljs-string">&quot;appid&quot;</span>: <span class="hljs-variable language_">self</span>.appid,<br>            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-variable language_">self</span>.secret<br>        &#125;<br>        response = requests.get(url, params=params, verify=<span class="hljs-literal">False</span>).json()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;access_token&#x27;</span> <span class="hljs-keyword">in</span> response:<br>            <span class="hljs-variable language_">self</span>.access_token = response[<span class="hljs-string">&#x27;access_token&#x27;</span>]<br>            <span class="hljs-variable language_">self</span>.token_expires = time.time() + response[<span class="hljs-string">&#x27;expires_in&#x27;</span>] - <span class="hljs-number">300</span>  <span class="hljs-comment"># 提前5分钟刷新</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;获取access_token失败: <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>文件上传可以分成2步：<strong>1获取上传元数据，2上传文件到COS</strong>。</p><p>获取元数据可以理解为向平台发送请求，获取一个用来存放一个文件（存储对象）的一个URL地址, 上传文件到COS可以则可以理解成将资源放到上一步生成的URL地址上，经此，文件才算真正的上传成功了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">self, local_path, cloud_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    上传本地文件到微信云存储</span><br><span class="hljs-string">    :param local_path: 本地文件路径</span><br><span class="hljs-string">    :param cloud_path: 云端存储路径（如：&#x27;images/example.jpg&#x27;）</span><br><span class="hljs-string">    :return: 文件ID（用于后续下载）</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-variable language_">self</span>._ensure_access_token()<br>    <br>    <span class="hljs-comment"># 1. 获取上传元数据</span><br>    upload_meta_url = <span class="hljs-string">&quot;https://api.weixin.qq.com/tcb/uploadfile&quot;</span><br>    params = &#123;<span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-variable language_">self</span>.access_token&#125;<br>    payload = &#123;<span class="hljs-string">&quot;env&quot;</span>: <span class="hljs-variable language_">self</span>.env, <span class="hljs-string">&quot;path&quot;</span>: cloud_path&#125;<br>    response = requests.post(upload_meta_url, params=params, json=payload,verify=<span class="hljs-literal">False</span>).json()<br>    <span class="hljs-built_in">print</span>(payload, params)<br>    <span class="hljs-keyword">if</span> response.get(<span class="hljs-string">&#x27;errcode&#x27;</span>, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;上传元数据获取失败: <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-comment"># 2. 上传文件到COS</span><br>    cos_url = response[<span class="hljs-string">&#x27;url&#x27;</span>]<br>   <br>    key = cloud_path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">print</span>(key)<br>    files = &#123;<br>        <span class="hljs-string">&quot;Signature&quot;</span>:(<span class="hljs-literal">None</span>,response[<span class="hljs-string">&#x27;authorization&#x27;</span>]),<br>        <span class="hljs-string">&quot;x-cos-meta-fileid&quot;</span>: (<span class="hljs-literal">None</span>, response[<span class="hljs-string">&#x27;cos_file_id&#x27;</span>]),<br>        <span class="hljs-string">&quot;x-cos-security-token&quot;</span>: (<span class="hljs-literal">None</span>,response[<span class="hljs-string">&#x27;token&#x27;</span>]),<br>        <span class="hljs-string">&quot;key&quot;</span>: (<span class="hljs-literal">None</span>, cloud_path),<br>        <span class="hljs-string">&#x27;file&#x27;</span>:(key, <span class="hljs-built_in">open</span>(local_path, <span class="hljs-string">&#x27;rb&#x27;</span>)),<br>    &#125;<br><br>    upload_resp = requests.post(cos_url, files=files, verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">if</span> upload_resp.status_code != <span class="hljs-number">204</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;COS上传失败: <span class="hljs-subst">&#123;upload_resp.text&#125;</span>&quot;</span>, upload_resp)<br>   <br>    <span class="hljs-keyword">return</span> response[<span class="hljs-string">&#x27;file_id&#x27;</span>]<br></code></pre></td></tr></table></figure><ul><li><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3></li></ul><p>下载文件相对简单一些，直接调用微信开放平台对外提供的批量下载接口，当然对应的token也是需要的，这部分就不做赘述，代码实现可以参考下方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">self, file_id, local_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        从微信云存储下载文件</span><br><span class="hljs-string">        :param file_id: 文件ID（上传时返回的file_id）</span><br><span class="hljs-string">        :param local_path: 本地存储路径</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>._ensure_access_token()<br>        <br>        <span class="hljs-comment"># 1. 获取下载链接</span><br>        download_meta_url = <span class="hljs-string">&quot;https://api.weixin.qq.com/tcb/batchdownloadfile&quot;</span><br>        params = &#123;<span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-variable language_">self</span>.access_token&#125;<br>        payload = &#123;<br>            <span class="hljs-string">&quot;env&quot;</span>: <span class="hljs-variable language_">self</span>.env,<br>            <span class="hljs-string">&quot;file_list&quot;</span>: [&#123;<span class="hljs-string">&quot;fileid&quot;</span>: file_id, <span class="hljs-string">&quot;max_age&quot;</span>: <span class="hljs-number">7200</span>&#125;]<br>        &#125;<br>        response = requests.post(download_meta_url, params=params, json=payload, verify=<span class="hljs-literal">False</span>).json()<br>        <br>        <span class="hljs-keyword">if</span> response.get(<span class="hljs-string">&#x27;errcode&#x27;</span>, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;下载元数据获取失败: <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br>        <br>        file_info = response[<span class="hljs-string">&#x27;file_list&#x27;</span>][<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> file_info[<span class="hljs-string">&#x27;status&#x27;</span>] != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;下载错误: <span class="hljs-subst">&#123;file_info[<span class="hljs-string">&#x27;errmsg&#x27;</span>]&#125;</span>&quot;</span>)<br>        <br>        <span class="hljs-comment"># 2. 下载文件</span><br>        download_resp = requests.get(file_info[<span class="hljs-string">&#x27;download_url&#x27;</span>], verify=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> download_resp.status_code != <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;文件下载失败&quot;</span>)<br>        <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(local_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(download_resp.content)<br>            <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>以上就是微信云托管上对象存储的上传和下载的实现了。为了方便，我们可以将功能在一个类中实现。此外，考虑到token获取接口是有限制的，每天的调用次数是2000次，而每个token的有效时间是2小时，因此可以重复利用已有token。</p><p>最终，完整的代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># wx-cloud-storage.py</span><br><span class="hljs-comment"># description: 微信云托管对象存储管理模块</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeChatCloudStorage</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, appid, secret, env</span>):<br>        <span class="hljs-variable language_">self</span>.appid = appid<br>        <span class="hljs-variable language_">self</span>.secret = secret<br>        <span class="hljs-variable language_">self</span>.env = env<br>        <span class="hljs-variable language_">self</span>.access_token = <span class="hljs-literal">None</span><br>        <span class="hljs-variable language_">self</span>.token_expires = <span class="hljs-number">0</span>  <span class="hljs-comment"># Token过期时间戳</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_refresh_access_token</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;获取或刷新access_token&quot;&quot;&quot;</span><br>        url = <span class="hljs-string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span><br>        params = &#123;<br>            <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;client_credential&quot;</span>,<br>            <span class="hljs-string">&quot;appid&quot;</span>: <span class="hljs-variable language_">self</span>.appid,<br>            <span class="hljs-string">&quot;secret&quot;</span>: <span class="hljs-variable language_">self</span>.secret<br>        &#125;<br>        response = requests.get(url, params=params, verify=<span class="hljs-literal">False</span>).json()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;access_token&#x27;</span> <span class="hljs-keyword">in</span> response:<br>            <span class="hljs-variable language_">self</span>.access_token = response[<span class="hljs-string">&#x27;access_token&#x27;</span>]<br>            <span class="hljs-variable language_">self</span>.token_expires = time.time() + response[<span class="hljs-string">&#x27;expires_in&#x27;</span>] - <span class="hljs-number">300</span>  <span class="hljs-comment"># 提前5分钟刷新</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;获取access_token失败: <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_ensure_access_token</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;确保access_token有效&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> time.time() &gt;= <span class="hljs-variable language_">self</span>.token_expires <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.access_token:<br>            <span class="hljs-variable language_">self</span>._refresh_access_token()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>(<span class="hljs-params">self, local_path, cloud_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        上传本地文件到微信云存储</span><br><span class="hljs-string">        :param local_path: 本地文件路径</span><br><span class="hljs-string">        :param cloud_path: 云端存储路径（如：&#x27;images/example.jpg&#x27;）</span><br><span class="hljs-string">        :return: 文件ID（用于后续下载）</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>._ensure_access_token()<br>        <br>        <span class="hljs-comment"># 1. 获取上传元数据</span><br>        upload_meta_url = <span class="hljs-string">&quot;https://api.weixin.qq.com/tcb/uploadfile&quot;</span><br>        params = &#123;<span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-variable language_">self</span>.access_token&#125;<br>        payload = &#123;<span class="hljs-string">&quot;env&quot;</span>: <span class="hljs-variable language_">self</span>.env, <span class="hljs-string">&quot;path&quot;</span>: cloud_path&#125;<br>        response = requests.post(upload_meta_url, params=params, json=payload,verify=<span class="hljs-literal">False</span>).json()<br>        <span class="hljs-built_in">print</span>(payload, params)<br>        <span class="hljs-keyword">if</span> response.get(<span class="hljs-string">&#x27;errcode&#x27;</span>, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;上传元数据获取失败: <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br>        <br>        <span class="hljs-comment"># 2. 上传文件到COS</span><br>        cos_url = response[<span class="hljs-string">&#x27;url&#x27;</span>]<br>       <br>        key = cloud_path.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(key)<br>        files = &#123;<br>            <span class="hljs-string">&quot;Signature&quot;</span>:(<span class="hljs-literal">None</span>,response[<span class="hljs-string">&#x27;authorization&#x27;</span>]),<br>            <span class="hljs-string">&quot;x-cos-meta-fileid&quot;</span>: (<span class="hljs-literal">None</span>, response[<span class="hljs-string">&#x27;cos_file_id&#x27;</span>]),<br>            <span class="hljs-string">&quot;x-cos-security-token&quot;</span>: (<span class="hljs-literal">None</span>,response[<span class="hljs-string">&#x27;token&#x27;</span>]),<br>            <span class="hljs-string">&quot;key&quot;</span>: (<span class="hljs-literal">None</span>, cloud_path),<br>            <span class="hljs-string">&#x27;file&#x27;</span>:(key, <span class="hljs-built_in">open</span>(local_path, <span class="hljs-string">&#x27;rb&#x27;</span>)),<br>        &#125;<br><br>        upload_resp = requests.post(cos_url, files=files, verify=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> upload_resp.status_code != <span class="hljs-number">204</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;COS上传失败: <span class="hljs-subst">&#123;upload_resp.text&#125;</span>&quot;</span>, upload_resp)<br>       <br>        <span class="hljs-keyword">return</span> response[<span class="hljs-string">&#x27;file_id&#x27;</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">self, file_id, local_path</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        从微信云存储下载文件</span><br><span class="hljs-string">        :param file_id: 文件ID（上传时返回的file_id）</span><br><span class="hljs-string">        :param local_path: 本地存储路径</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-variable language_">self</span>._ensure_access_token()<br>        <br>        <span class="hljs-comment"># 1. 获取下载链接</span><br>        download_meta_url = <span class="hljs-string">&quot;https://api.weixin.qq.com/tcb/batchdownloadfile&quot;</span><br>        params = &#123;<span class="hljs-string">&quot;access_token&quot;</span>: <span class="hljs-variable language_">self</span>.access_token&#125;<br>        payload = &#123;<br>            <span class="hljs-string">&quot;env&quot;</span>: <span class="hljs-variable language_">self</span>.env,<br>            <span class="hljs-string">&quot;file_list&quot;</span>: [&#123;<span class="hljs-string">&quot;fileid&quot;</span>: file_id, <span class="hljs-string">&quot;max_age&quot;</span>: <span class="hljs-number">7200</span>&#125;]<br>        &#125;<br>        response = requests.post(download_meta_url, params=params, json=payload, verify=<span class="hljs-literal">False</span>).json()<br>        <br>        <span class="hljs-keyword">if</span> response.get(<span class="hljs-string">&#x27;errcode&#x27;</span>, <span class="hljs-number">0</span>) != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;下载元数据获取失败: <span class="hljs-subst">&#123;response&#125;</span>&quot;</span>)<br>        <br>        file_info = response[<span class="hljs-string">&#x27;file_list&#x27;</span>][<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> file_info[<span class="hljs-string">&#x27;status&#x27;</span>] != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">f&quot;下载错误: <span class="hljs-subst">&#123;file_info[<span class="hljs-string">&#x27;errmsg&#x27;</span>]&#125;</span>&quot;</span>)<br>        <br>        <span class="hljs-comment"># 2. 下载文件</span><br>        download_resp = requests.get(file_info[<span class="hljs-string">&#x27;download_url&#x27;</span>], verify=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> download_resp.status_code != <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;文件下载失败&quot;</span>)<br>        <br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(local_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            f.write(download_resp.content)<br>            <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 使用示例</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 配置信息（需要替换为实际值）</span><br>    APPID = <span class="hljs-string">&quot;your-wechat-appid&quot;</span><br>    SECRET = <span class="hljs-string">&quot;your-wechat-secret&quot;</span><br>    ENV_ID = <span class="hljs-string">&quot;your-cloud-env-id&quot;</span><br>   <br>    <span class="hljs-comment"># 上传示例</span><br>    storage = WeChatCloudStorage(APPID, SECRET, ENV_ID)<br>    <span class="hljs-keyword">try</span>:<br>        file_id = storage.upload_file(<span class="hljs-string">&quot;../test.png&quot;</span>, <span class="hljs-string">&quot;image/test2.png&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;文件上传成功，File ID: <span class="hljs-subst">&#123;file_id&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;上传失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-comment"># 下载示例</span><br>    <span class="hljs-keyword">try</span>:<br>        storage.download_file(file_id, <span class="hljs-string">&quot;downloaded_image.jpg&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件下载成功&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;下载失败: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br></code></pre></td></tr></table></figure><p>以上就是关于对象存储管理相关的内容了，如果你在开发类似的功能过程中有类似的idea或者遇到一些难搞的坑，欢迎一起讨论。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章搞懂Array,Set和Map异同</title>
    <link href="/2025/05/23/Array-set-map%20summary/"/>
    <url>/2025/05/23/Array-set-map%20summary/</url>
    
    <content type="html"><![CDATA[<p>Array,Set和Map三个作为Javascript中可迭代的集合数据类型，在编程过程中使用的频率也比较高。针对三种数据类型各自的一些特性，本文的内容将从以下几个方面来上述数据类型做一个总结。</p><ul><li><a href="##%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%88%9B%E5%BB%BA"><strong>实例的创建</strong></a></li><li><a href="##%E6%95%B0%E6%8D%AE%E6%B7%BB%E5%8A%A0"><strong>数据添加</strong></a></li><li><a href="##%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%EF%BC%88%E6%9F%A5%E6%89%BE%EF%BC%89"><strong>数据访问（查找）</strong></a></li><li><a href="##%E6%95%B0%E6%8D%AE%E7%9A%84%E9%81%8D%E5%8E%86"><strong>数据的遍历</strong></a></li><li><a href="##%E7%B1%BB%E4%BC%BC%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E4%B8%80%E4%BA%9B%E4%B8%93%E6%9C%89%E6%96%B9%E6%B3%95"><strong>类似的功能和一些专有方法</strong></a></li><li><a href="##%E4%B8%89%E8%80%85%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2"><strong>三者之间的转换</strong></a></li><li><a href="##%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"><strong>应用场景</strong></a></li></ul><h2 id="实例的创建"><a href="#实例的创建" class="headerlink" title="实例的创建"></a>实例的创建</h2><p>  Map和Set创建实例的方式是唯一的，只允许通过new调用构造方法来创建一个实例。值得注意的是，Set和Map在调用构造函数的时候，传参都是数组或者可迭代对象，其中Map的传参数组需要时一个键值对数组。当然，传参也是可选的，非必须。</p><p> Array相较于前两者，其创建实例的方式要多写，可通过字面方式创建，也可像Map和Set一样通过构造函数来创建。此外使用Array的静态函数Array.from来创建也是非常常见的。例如，通过docuemnt.getElementsByTagName这类方法获取到一个HTMLCollect这样一个类数组，通常会通过Array.from将其装换成一个真正的数组来进行后续的操作。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><br> <span class="hljs-comment">// 创建map实例</span><br> <span class="hljs-keyword">let</span> map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br> <span class="hljs-keyword">let</span> map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]]); <span class="hljs-comment">//  a=&gt;1, b=&gt;2</span><br> <span class="hljs-comment">// 创建set实例</span><br> <span class="hljs-keyword">let</span> set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br> <span class="hljs-keyword">let</span> set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br><br><span class="hljs-comment">// 通过字面量创建数组</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">// 使用Array静态方法从一个可迭代对象或者类数组中创建数组实例</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]) <br><span class="hljs-comment">// 使用Array构造函数</span><br><span class="hljs-keyword">let</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>([<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]);<br></code></pre></td></tr></table></figure><h2 id="数据添加与变更"><a href="#数据添加与变更" class="headerlink" title="数据添加与变更"></a>数据添加与变更</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">// Set的数据操作：添加与删除</span><br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">11</span>) <span class="hljs-comment">// [11]</span><br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">23</span>) <span class="hljs-comment">// [11, 23]</span><br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">11</span>) <span class="hljs-comment">// [11, 23]</span><br>set.<span class="hljs-title function_">delete</span>(<span class="hljs-number">23</span>) <span class="hljs-comment">// [11] </span><br><br><span class="hljs-comment">// Map的数据操作：添加与删除</span><br><span class="hljs-keyword">let</span>  map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>);   <span class="hljs-comment">// [a=&gt;1]</span><br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>);   <span class="hljs-comment">// [a=&gt;1, b=&gt;2]</span><br>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;b&#x27;</span>);   <span class="hljs-comment">// [a=&gt;1]</span><br><br><span class="hljs-comment">// Array</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-comment">// 在数组末尾添加一个值</span><br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>)       <span class="hljs-comment">// [1,2,3,4]</span><br><span class="hljs-comment">// 弹出数组末尾的值</span><br>arr.<span class="hljs-title function_">pop</span>(<span class="hljs-number">4</span>)        <span class="hljs-comment">// [1,2,3]</span><br><span class="hljs-comment">// 在数组头部添加一个值</span><br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">0</span>)    <span class="hljs-comment">// [0,1,2,3]</span><br><span class="hljs-comment">// 移除头部的第一个值</span><br>arr.<span class="hljs-title function_">shift</span>()       <span class="hljs-comment">// [1,2,3]</span><br><span class="hljs-comment">// 在第二个数（下标1）之后插入一个值‘a’</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>)   <span class="hljs-comment">// [1,2,&#x27;a&#x27;, 3];</span><br><span class="hljs-comment">// 删除第二个数（下标1）后面1个值，然后插入一个新的值‘b’</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>)   <span class="hljs-comment">// [1,2,&#x27;b&#x27;,3]</span><br></code></pre></td></tr></table></figure><h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><p>  Array和Map都能够访问实例中的特定数据，Array是通过下标，而Map是通过实例方法get, 唯独Set没有方式可以直接访问其中特定数据。其实也不难理解，Set本身不是为了单纯存储数据和访问特殊而生的，因为这些功能Array就可以支持，何必再单出构造一个Set数据结构了。我对此的理解是，Set跟多的是紧紧围绕着数据唯一不重复这一准则来的，它的侧重点是某一数据的有无，而不是数据存在哪里。</p><p>  另外，从结构上来说。Set不像Array那样是有序的，所以也无法使用下标来访问，也不像Map那般，每个键对应一个值，所以也无法通过键来访问。故而，Set没有单独访问某一数据的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>]]);<br><br><span class="hljs-comment">//Array通过下标访问数据</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">2</span>]) <span class="hljs-comment">// 1, 3</span><br><span class="hljs-comment">//Map使用实例方法get访问数据，参数是键</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mpa.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;a))    // 1</span><br></code></pre></td></tr></table></figure><h2 id="数据的遍历"><a href="#数据的遍历" class="headerlink" title="数据的遍历"></a>数据的遍历</h2><p><strong>Set数据的遍历方式</strong>：</p><ul><li>keys()   &emsp;&emsp;返回键名迭代器</li><li>values() &emsp;返回值迭代器  </li><li>entries() &emsp;返回键值迭代器</li><li>forEach()<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]);<br><span class="hljs-comment">// set每个值对应的key其实也是数据值本身</span><br><span class="hljs-keyword">const</span> keyIter = set.<span class="hljs-title function_">keys</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keyIter.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>);  <span class="hljs-comment">// &#x27;a&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keyIter.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>);  <span class="hljs-comment">// &#x27;b&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keyIter.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>);  <span class="hljs-comment">// &#x27;c&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keyIter.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>);  <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">const</span> valueIter = set.<span class="hljs-title function_">values</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> val <span class="hljs-keyword">of</span> valueIter) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val);                <span class="hljs-comment">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> entriesIter = set.<span class="hljs-title function_">entries</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> entriesIter) &#123;<br>  <span class="hljs-title function_">console</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>:<span class="hljs-subst">$&#123;value&#125;</span>`</span>)     <span class="hljs-comment">// &#x27;a&#x27;:&#x27;a&#x27;, &#x27;b&#x27;:&#x27;b&#x27;, &#x27;c&#x27;:&#x27;c&#x27;</span><br>&#125;<br><br>set.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)             <span class="hljs-comment">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></br></li></ul><p><strong>Map数据的遍历方式</strong></p><ul><li>keys()   &emsp;&emsp;返回键名迭代器</li><li>values() &emsp;返回值迭代器  </li><li>entries() &emsp;返回键值迭代器</li><li>forEach()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>]]);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 代码就自己脑补吧，</span><br><span class="hljs-comment">* 不能说和Set的方式很像，</span><br><span class="hljs-comment">* 只能说真的就是一模一样</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure></br><p><strong>Array数据的遍历方式</strong></p><p>Array遍历数据的方法是最多的，除了下面列举的几个之外，还有some, every,甚至filter, find和findIndex这些方法可以用来遍历数据。使用这些方法需要注意的是其使用的场景，例如map和forEach都可以用来对数组内数据做一些操作，但如果不需要返回值的情况，还是使用forEach方法，而不建议是map，其它方法也是如此。</p><ul><li>keys()   &emsp;&emsp;返回键名迭代器</li><li>values() &emsp;返回值迭代器  </li><li>entries() &emsp;返回键值迭代器</li><li>map()    &emsp;回调函数，要有返回值</li><li>reduce() </li><li>forEach()</li><li>for…of<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 代码就不写了，偷个懒，不过还是贴心的附上链接</span><br><span class="hljs-comment">* https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</span><br><span class="hljs-comment">**/</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="类似的功能和一些专有方法"><a href="#类似的功能和一些专有方法" class="headerlink" title="类似的功能和一些专有方法"></a>类似的功能和一些专有方法</h2><ul><li><strong>是否包含某个元素</strong>: 数组的includes方法，map和set的has方法，三者的返回值都是布尔值，区别只在于传入的参数。数组和set传入的是值，map传入的是键。</li><li><strong>合并两个相同类型的数据</strong>： 数组使用concat方法，合并两个数组值，set使用union方法合并两个集合。map没有专有方法可以用来合并两个map数据，不过可以通过使用new Map([…map1, …map2])来返回一个合并之后的新map</li><li><strong>数据大小</strong>：数组有length属性，map和set有size属性</li><li><strong>清空数据</strong>：map和size都可通过clear()方法来清空数据，数组无专有方法，可自己通过修改length值为0或者使用splice方法清空数据。</li></ul><blockquote><p>关于数组中的includes方法在数组值为一个个对象的时候，这个时候传入的值就只能是对象的引用了。如果作用域内不存在引用的话，判断数组中是否存在某个对象，就只能通过filter, find或者findIndex之类的方法加上数据特征去判断数组中是否存在该对象了。</p></blockquote><h2 id="三者之间的转换"><a href="#三者之间的转换" class="headerlink" title="三者之间的转换"></a>三者之间的转换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">const</span> arr1 = [[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;Kebei&#x27;</span>]];<br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]);<br><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">5</span>]);<br><br><span class="hljs-comment">// Array 转 Set</span><br><span class="hljs-keyword">const</span> arr2Set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr);   <span class="hljs-comment">// [1, 3, 4];</span><br><span class="hljs-comment">// Array 转Map</span><br><span class="hljs-keyword">const</span> arr2Map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(arr1);  <span class="hljs-comment">// &#123;&#x27;a&#x27; =&gt; &#x27;Kebei&#x27;&#125;</span><br><br><span class="hljs-comment">//Set转Array</span><br><span class="hljs-keyword">const</span> set2Arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(set);        <span class="hljs-comment">// [1, 5]</span><br><span class="hljs-keyword">const</span> set2Arr2 = [...set];              <span class="hljs-comment">// [1, 5]</span><br><span class="hljs-keyword">const</span> set2Arr3 = set.<span class="hljs-title function_">values</span>()           <span class="hljs-comment">// [1, 5]</span><br><span class="hljs-comment">//Set转Map</span><br><span class="hljs-keyword">const</span> set2Map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(set.<span class="hljs-title function_">entries</span>())  <span class="hljs-comment">// &#123; 1=&gt; 1, 5=&gt;5&#125;</span><br><br><span class="hljs-comment">// Map转Array</span><br><span class="hljs-keyword">const</span> map2Arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(map);     <span class="hljs-comment">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class="hljs-keyword">const</span> map2Arr2 = [...map];           <span class="hljs-comment">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class="hljs-keyword">const</span> map2Arr3 = map.<span class="hljs-title function_">values</span>()        <span class="hljs-comment">// [&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]</span><br><span class="hljs-comment">// Map转Set</span><br><span class="hljs-keyword">const</span> map2Set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(map.<span class="hljs-title function_">values</span>()) <span class="hljs-comment">// [1, 2]</span><br></code></pre></td></tr></table></figure><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2></br>最常见的一种场景莫过于使用数组与Set之间格式变化进行数据去重<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">dedup</span> = (<span class="hljs-params">arr</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]<br>&#125;<br></code></pre></td></tr></table></figure><p>上述方法和之前includes方法也是一样存在无法处理复杂数据类型，对于复杂对象数据，需要根据各自业务场景对重复的数据进行去重策略选择，即在一堆的重复对象中（以id重复为例）保留业务需要的唯一一个数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>三种数据结构有着各自不同的特性。数组是一个天然的栈，也是一个天然的队列，在三种数据结构中，其实例方法也应用也是最多的，是线性存储中话事人般的存在，也是我们在普通业务场景下的首选。Set数据的唯一性，可以帮助我们在业务场景中快速的进行去重。Map键值对结构的特殊性，以及对键的包容性，能够通过键快速获取到值，也是复杂业务冲常常用的。<br></br></p><p>【资料参考】</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
